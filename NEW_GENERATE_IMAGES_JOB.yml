# New generate-images job for article-generation-v2.yml
# Replace lines 445-551 with this configuration

  # Job 7: Image Generation using MCP + Imagen4
  generate-images:
    if: ${{ inputs.enable_image_generation }}
    needs: [initialize-and-analyze, structure-and-write]
    runs-on: ubuntu-latest
    environment: GA
    timeout-minutes: 20
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Download artifacts
        uses: actions/download-artifact@v4
        with:
          pattern: phase*-${{ needs.initialize-and-analyze.outputs.article_id }}
          path: output/${{ needs.initialize-and-analyze.outputs.article_id }}
          merge-multiple: true

      # Image generation using Claude Code + MCP + Imagen4
      - name: Generate Images with MCP + Imagen4
        id: generate_images
        uses: anthropics/claude-code-base-action@beta
        with:
          anthropic_api_key: ${{ secrets.ANTHROPIC_API_KEY }}
          prompt_file: prompts/image_generation_mcp.md
          allowed_tools: "View,Write,mcp__gemini__generate_image"
          claude_env: |
            ARTICLE_ID=${{ needs.initialize-and-analyze.outputs.article_id }}
            TOPIC=${{ inputs.topic }}
            GEMINI_API_KEY=${{ secrets.GEMINI_API_KEY }}
          max_turns: "15"
          mcp_servers: |
            {
              "gemini": {
                "command": "npx",
                "args": ["-y", "@modelcontextprotocol/server-gemini"],
                "env": {
                  "GEMINI_API_KEY": "${{ secrets.GEMINI_API_KEY }}"
                }
              }
            }

      # Verify image generation results
      - name: Verify Image Generation
        run: |
          ARTICLE_ID="${{ needs.initialize-and-analyze.outputs.article_id }}"
          IMAGE_DIR="output/${ARTICLE_ID}/images"
          
          echo "Checking generated images in ${IMAGE_DIR}..."
          
          if [ -d "${IMAGE_DIR}" ]; then
            echo "Images directory exists"
            ls -la "${IMAGE_DIR}"
            
            # Check for required files
            REQUIRED_FILES=("hero.png" "section-1.png" "section-2.png" "section-3.png" "section-4.png" "images_metadata.json")
            MISSING_FILES=0
            
            for file in "${REQUIRED_FILES[@]}"; do
              if [ -f "${IMAGE_DIR}/${file}" ]; then
                echo "✓ Found: ${file}"
              else
                echo "✗ Missing: ${file}"
                MISSING_FILES=$((MISSING_FILES + 1))
              fi
            done
            
            if [ $MISSING_FILES -gt 0 ]; then
              echo "Warning: ${MISSING_FILES} files are missing"
            else
              echo "All required files generated successfully!"
            fi
            
            # Display metadata if exists
            if [ -f "${IMAGE_DIR}/images_metadata.json" ]; then
              echo "Image generation metadata:"
              cat "${IMAGE_DIR}/images_metadata.json" | jq '.'
            fi
          else
            echo "Warning: Images directory not found"
            echo "Creating directory and placeholder metadata..."
            mkdir -p "${IMAGE_DIR}"
            cat > "${IMAGE_DIR}/images_metadata.json" << EOF
          {
            "generated_images": [],
            "statistics": {
              "total_requested": 5,
              "successful": 0,
              "failed": 5,
              "generator": "imagen-3.0-mcp",
              "error": "Image generation directory not created"
            },
            "created_at": "$(date -u +%Y-%m-%dT%H:%M:%SZ)"
          }
          EOF
          fi

      - name: Upload image artifacts
        uses: actions/upload-artifact@v4
        with:
          name: images-${{ needs.initialize-and-analyze.outputs.article_id }}
          path: output/${{ needs.initialize-and-analyze.outputs.article_id }}/images
          retention-days: 30

# Configuration Notes:
# 1. This job replaces the Python-based image generation with MCP + Imagen4
# 2. Requires GEMINI_API_KEY to be set in GitHub Secrets
# 3. No Python dependencies needed
# 4. Images are generated directly by Claude Code using MCP
# 5. Maintains backward compatibility with existing metadata structure