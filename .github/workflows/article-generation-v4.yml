name: Article Generation V4 (Simplified Output)

on:
  workflow_dispatch:
    inputs:
      article_title:
        description: '記事タイトル'
        required: true
        type: string
        default: ''
      
      target_persona:
        description: 'ターゲットペルソナ（例：30代女性、健康意識が高い、子育て中）'
        required: true
        type: string
        default: ''
      
      meta_keywords:
        description: 'メタキーワード（カンマ区切り）'
        required: true
        type: string
        default: ''
      
      word_count:
        description: '目標文字数'
        required: false
        type: string
        default: '3200'
      
      enable_image_generation:
        description: '画像生成を有効にする'
        required: false
        type: boolean
        default: true
      
      # Google Drive upload removed

env:
  PYTHON_VERSION: '3.11'

jobs:
  # ジョブ1: 初期化
  initialize:
    runs-on: ubuntu-latest
    environment: GA
    timeout-minutes: 5
    outputs:
      article_id: ${{ steps.init.outputs.article_id }}
      
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Initialize article generation
        id: init
        run: |
          # タイトルからIDを生成
          CLEAN_TITLE=$(echo "${{ inputs.article_title }}" | sed 's/[^a-zA-Z0-9あ-んア-ン一-龯]/_/g' | cut -c1-50)
          ARTICLE_ID=$(date +%Y%m%d_%H%M%S)_${CLEAN_TITLE}
          echo "article_id=${ARTICLE_ID}" >> $GITHUB_OUTPUT
          echo "Article ID: ${ARTICLE_ID}"
          
          # 出力ディレクトリ作成
          mkdir -p output/${ARTICLE_ID}
          
          # 入力情報を保存
          TIMESTAMP=$(date -u +%Y-%m-%dT%H:%M:%SZ)
          echo '{' > "output/${ARTICLE_ID}/input_params.json"
          echo "  \"article_id\": \"${ARTICLE_ID}\"," >> "output/${ARTICLE_ID}/input_params.json"
          echo "  \"title\": \"${{ inputs.article_title }}\"," >> "output/${ARTICLE_ID}/input_params.json"
          echo "  \"target_persona\": \"${{ inputs.target_persona }}\"," >> "output/${ARTICLE_ID}/input_params.json"
          echo "  \"meta_keywords\": \"${{ inputs.meta_keywords }}\"," >> "output/${ARTICLE_ID}/input_params.json"
          echo "  \"word_count\": \"${{ inputs.word_count }}\"," >> "output/${ARTICLE_ID}/input_params.json"
          echo "  \"created_at\": \"${TIMESTAMP}\"" >> "output/${ARTICLE_ID}/input_params.json"
          echo '}' >> "output/${ARTICLE_ID}/input_params.json"

      - name: Upload initialization artifacts
        uses: actions/upload-artifact@v4
        with:
          name: init-${{ steps.init.outputs.article_id }}
          path: output/${{ steps.init.outputs.article_id }}
          retention-days: 30

  # ジョブ2: リクエスト分析
  analysis:
    needs: initialize
    runs-on: ubuntu-latest
    environment: GA
    timeout-minutes: 10
    outputs:
      main_keyword: ${{ steps.analyze.outputs.main_keyword }}
      
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Download initialization artifacts
        uses: actions/download-artifact@v4
        with:
          name: init-${{ needs.initialize.outputs.article_id }}
          path: output/${{ needs.initialize.outputs.article_id }}

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Install dependencies
        run: |
          cd github-actions
          pip install -r requirements.txt

      - name: Create analysis input
        run: |
          cd output/${{ needs.initialize.outputs.article_id }}
          # Phase1が期待する形式のJSONを作成
          echo '{' > request_params.json
          echo "  \"topic\": \"${{ inputs.article_title }}\"," >> request_params.json
          echo "  \"target_audience\": \"${{ inputs.target_persona }}\"," >> request_params.json
          echo "  \"keywords\": \"${{ inputs.meta_keywords }}\"" >> request_params.json
          echo '}' >> request_params.json

      - name: Run Phase 1 Analysis with Claude
        uses: anthropics/claude-code-base-action@beta
        with:
          anthropic_api_key: ${{ secrets.ANTHROPIC_API_KEY }}
          
          prompt: |
            記事リクエストを分析して、記事生成のための詳細パラメータを抽出してください。
            
            入力情報:
            - トピック: ${{ inputs.article_title }}  
            - ターゲット読者: ${{ inputs.target_persona }}
            - メタキーワード: ${{ inputs.meta_keywords }}
            
            タスク:
            1. output/${{ needs.initialize.outputs.article_id }}/request_params.json を読み込んで理解
            2. 以下の分析を実行:
               - メインキーワードの特定
               - 関連キーワードの抽出（5-8個）
               - 検索意図の分析
               - リサーチクエリの生成（15-25個）
            
            3. 分析結果を output/${{ needs.initialize.outputs.article_id }}/phase1_output.json ファイルに保存してください
            
            重要：以下の形式でanalysisオブジェクトを含むJSONを作成してください：
            {
              "analysis": {
                "main_keyword": "抽出したメインキーワード",
                "related_keywords": ["関連1", "関連2", "関連3", "関連4", "関連5"],
                "search_intent": "informational",
                "content_type": "how-to", 
                "tone": "friendly",
                "key_points": ["ポイント1", "ポイント2", "ポイント3"],
                "research_queries": ["クエリ1", "クエリ2", "クエリ3", "クエリ4", "クエリ5", "クエリ6", "クエリ7", "クエリ8", "クエリ9", "クエリ10", "クエリ11", "クエリ12", "クエリ13", "クエリ14", "クエリ15"],
                "competitor_analysis_needed": true,
                "local_seo_focus": false,
                "estimated_sections": 5
              },
              "topic": "${{ inputs.article_title }}",
              "target_audience": "${{ inputs.target_persona }}",
              "keywords": "${{ inputs.meta_keywords }}",
              "processed_at": "現在時刻",
              "workflow_version": "4.0.0"
            }
          
          allowed_tools: |
            Read,
            Write
          
          claude_env: |
            ARTICLE_ID=${{ needs.initialize.outputs.article_id }}
          
          max_turns: "5"
      
      - name: Verify and prepare analysis results
        run: |
          echo "🔍 Checking for analysis files..."
          echo "Current working directory: $(pwd)"
          echo "Files in root:"
          ls -la
          echo "Files in output directory:"
          ls -la output/${{ needs.initialize.outputs.article_id }}/
          
          cd output/${{ needs.initialize.outputs.article_id }}
          if [ -f "phase1_output.json" ]; then
            echo "✅ Phase 1 analysis file found"
            cat phase1_output.json
          else
            echo "⚠️ Phase 1 analysis file not found, creating default"
            # Check if file was created in root directory by mistake
            if [ -f "../../phase1_output.json" ]; then
              echo "📁 Found phase1_output.json in root, moving to correct location"
              mv ../../phase1_output.json ./phase1_output.json
            else
              echo "🔧 Creating fallback analysis file"
              # Create fallback analysis if Claude didn't create the file
              TIMESTAMP=$(date -u +%Y-%m-%dT%H:%M:%SZ)
              TITLE="${{ inputs.article_title }}"
              PERSONA="${{ inputs.target_persona }}"
              KEYWORDS="${{ inputs.meta_keywords }}"
              
              # 外部スクリプトを使用してJSONを作成
              TITLE="${TITLE}" PERSONA="${PERSONA}" KEYWORDS="${KEYWORDS}" TIMESTAMP="${TIMESTAMP}" OUTPUT_DIR="." python3 ../../github-actions/scripts/create_phase1_fallback.py
            fi
          fi
          
          echo "📋 Final verification - files in current directory:"
          ls -la

      - name: Split research queries into batches
        id: analyze
        run: |
          # クエリを5バッチに分割
          cd output/${{ needs.initialize.outputs.article_id }}
          python3 ../../github-actions/scripts/split_research_queries.py
          
          # メインキーワードを出力
          if [ -f "research_meta.json" ]; then
            MAIN_KW=$(python -c "import json; print(json.load(open('research_meta.json'))['main_keyword'])")
            echo "main_keyword=${MAIN_KW}" >> $GITHUB_OUTPUT
          fi
        env:
          ANTHROPIC_API_KEY: ${{ secrets.ANTHROPIC_API_KEY }}
          ENABLE_GEMINI_RESEARCH: "true"

      - name: Upload analysis artifacts
        uses: actions/upload-artifact@v4
        with:
          name: analysis-${{ needs.initialize.outputs.article_id }}
          path: output/${{ needs.initialize.outputs.article_id }}
          retention-days: 30

  # ジョブ3: リサーチ（Gemini使用 - 並列実行）
  research:
    needs: [initialize, analysis]
    runs-on: ubuntu-latest
    environment: GA
    timeout-minutes: 15
    strategy:
      matrix:
        batch: [0, 1, 2]  # Reduced to 3 batches to match max-parallel
      max-parallel: 3  # Balanced for rate limiting with gemini-2.5-flash
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Download initialization artifacts
        uses: actions/download-artifact@v4
        with:
          name: init-${{ needs.initialize.outputs.article_id }}
          path: output/${{ needs.initialize.outputs.article_id }}

      - name: Download analysis artifacts
        uses: actions/download-artifact@v4
        with:
          name: analysis-${{ needs.initialize.outputs.article_id }}
          path: output/${{ needs.initialize.outputs.article_id }}

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Install dependencies
        run: |
          cd github-actions
          pip install -r requirements.txt
          
      - name: Install Gemini API dependencies  
        run: |
          pip install google-genai

      - name: Research with Gemini (Batch ${{ matrix.batch }})
        run: |
          cd output/${{ needs.initialize.outputs.article_id }}
          
          # バッチ用の分析ファイルを作成
          BATCH_NUM=${{ matrix.batch }} python3 ../../github-actions/scripts/create_batch_analysis.py
          
          # バッチクエリを読み込んでGemini APIで直接検索（外部スクリプト使用）
          python3 ../../github-actions/scripts/research_batch_gemini.py ${{ matrix.batch }}
        env:
          GEMINI_API_KEY: ${{ secrets.GEMINI_API_KEY }}

      - name: Upload research batch artifacts
        uses: actions/upload-artifact@v4
        with:
          name: research-batch-${{ matrix.batch }}-${{ needs.initialize.outputs.article_id }}
          path: output/${{ needs.initialize.outputs.article_id }}/batch_${{ matrix.batch }}
          retention-days: 30

  # ジョブ4: リサーチ結果の統合
  research-merge:
    needs: [initialize, research]
    runs-on: ubuntu-latest
    environment: GA
    timeout-minutes: 10
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Create output directory
        run: mkdir -p output/${{ needs.initialize.outputs.article_id }}

      - name: Download all research batches
        uses: actions/download-artifact@v4
        with:
          pattern: research-batch-*-${{ needs.initialize.outputs.article_id }}
          path: output/${{ needs.initialize.outputs.article_id }}/batches

      - name: Download analysis artifacts
        uses: actions/download-artifact@v4
        with:
          name: analysis-${{ needs.initialize.outputs.article_id }}
          path: output/${{ needs.initialize.outputs.article_id }}

      - name: Merge research results
        run: |
          cd output/${{ needs.initialize.outputs.article_id }}
          
          # リサーチ結果を統合してV4出力形式にする
          python3 ../../github-actions/scripts/merge_research_results.py
          
          # V4用にファイル名を変更
          if [ -f "phase2_research.json" ]; then
            mv phase2_research.json research_results.json
            echo "✅ Created research_results.json for V4"
          fi

      - name: Upload merged research artifacts
        uses: actions/upload-artifact@v4
        with:
          name: research-${{ needs.initialize.outputs.article_id }}
          path: output/${{ needs.initialize.outputs.article_id }}
          retention-days: 30

  # ジョブ5: 記事構成の生成（SEO削除版）
  generate-structure:
    needs: [initialize, analysis, research-merge]
    runs-on: ubuntu-latest
    environment: GA
    timeout-minutes: 15
      
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Download artifacts
        uses: actions/download-artifact@v4
        with:
          pattern: '*-${{ needs.initialize.outputs.article_id }}'
          path: output/${{ needs.initialize.outputs.article_id }}
          merge-multiple: true

      - name: Generate article structure with Claude
        uses: anthropics/claude-code-base-action@beta
        with:
          anthropic_api_key: ${{ secrets.ANTHROPIC_API_KEY }}
          
          prompt: |
            健康・美容に関する記事の基本構成を作成してください。（SEO最適化は制作側で実施するため、純粋な記事構成のみ作成）
            
            入力情報:
            - 記事タイトル: ${{ inputs.article_title }}
            - ターゲットペルソナ: ${{ inputs.target_persona }}
            - メタキーワード: ${{ inputs.meta_keywords }}
            
            タスク:
            1. 以下のファイルを読み込んで理解:
               - input_params.json: 入力パラメータ
               - phase1_output.json: 分析結果
               - research_results.json: リサーチ結果
            2. 分析とリサーチ結果を踏まえてペルソナに最適化された記事構成を作成
            3. 以下のファイルを生成:
               - 01_article_structure.md: 詳細な記事構成
               - 02_content_plan.md: 各セクションの内容計画
            
            要件:
            - ペルソナの悩みや関心事に寄り添う構成
            - メタキーワードを自然に組み込む
            - 薬機法・景表法を考慮した表現計画
            - 読みやすく価値のある記事構成
            - SEO最適化は考慮しない（制作側で実施するため）
          
          allowed_tools: |
            Read,
            Write,
            Edit
          
          claude_env: |
            ARTICLE_ID=${{ needs.initialize.outputs.article_id }}
          
          max_turns: "10"

      - name: Upload structure artifacts
        uses: actions/upload-artifact@v4
        with:
          name: structure-${{ needs.initialize.outputs.article_id }}
          path: output/${{ needs.initialize.outputs.article_id }}
          retention-days: 30

  # ジョブ6: 記事本文の生成（MD専用）
  generate-content:
    needs: [initialize, generate-structure]
    runs-on: ubuntu-latest
    environment: GA
    timeout-minutes: 20
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Download artifacts
        uses: actions/download-artifact@v4
        with:
          pattern: '*-${{ needs.initialize.outputs.article_id }}'
          path: output/${{ needs.initialize.outputs.article_id }}
          merge-multiple: true

      - name: Generate article content with Claude
        uses: anthropics/claude-code-base-action@beta
        with:
          anthropic_api_key: ${{ secrets.ANTHROPIC_API_KEY }}
          prompt_file: prompts/04_writing_v4_html_updated.md
          
          allowed_tools: |
            Read,
            Write,
            Edit
          
          claude_env: |
            ARTICLE_ID=${{ needs.initialize.outputs.article_id }}
            TITLE=${{ inputs.article_title }}
            TARGET_PERSONA=${{ inputs.target_persona }}
            WORD_COUNT=${{ inputs.word_count }}
          
          max_turns: "15"

      - name: Verify article generation with fallback
        id: verify-article
        run: |
          ARTICLE_DIR="output/${{ needs.initialize.outputs.article_id }}"
          echo "🔍 Checking for generated article file..."
          
          if [ -f "$ARTICLE_DIR/final_article.html" ]; then
            echo "✅ Found final_article.html"
            echo "article_found=true" >> $GITHUB_OUTPUT
            echo "fallback_used=false" >> $GITHUB_OUTPUT
          else
            echo "⚠️ Primary generation failed, checking for fallback..."
            echo "📁 Contents of $ARTICLE_DIR:"
            ls -la "$ARTICLE_DIR/" || echo "Directory not found"
            
            # Check if any HTML file exists
            if [ -f "$ARTICLE_DIR/article.html" ]; then
              mv "$ARTICLE_DIR/article.html" "$ARTICLE_DIR/final_article.html"
              echo "✅ Found article.html, renamed to final_article.html"
              echo "article_found=true" >> $GITHUB_OUTPUT
              echo "fallback_used=false" >> $GITHUB_OUTPUT
            else
              echo "❌ ERROR: No HTML article generated!"
              echo "article_found=false" >> $GITHUB_OUTPUT
              exit 1
            fi
          fi

      - name: Upload content artifacts
        uses: actions/upload-artifact@v4
        with:
          name: content-${{ needs.initialize.outputs.article_id }}
          path: output/${{ needs.initialize.outputs.article_id }}
          retention-days: 30

  # ジョブ7: ファクトチェック（品質スコア付き）
  factcheck:
    needs: [initialize, generate-content]
    runs-on: ubuntu-latest
    environment: GA
    timeout-minutes: 15
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Download artifacts
        uses: actions/download-artifact@v4
        with:
          pattern: '*-${{ needs.initialize.outputs.article_id }}'
          path: output/${{ needs.initialize.outputs.article_id }}
          merge-multiple: true

      - name: Debug - Check files before factcheck
        run: |
          echo "📁 Files before factcheck:"
          ls -la output/${{ needs.initialize.outputs.article_id }}/
          echo ""
          echo "🔧 Environment variables:"
          echo "ARTICLE_ID: ${{ needs.initialize.outputs.article_id }}"
          echo "WORKSPACE: ${{ github.workspace }}"
          echo "Expected factcheck path: ${{ github.workspace }}/output/${{ needs.initialize.outputs.article_id }}/factcheck_report.json"
          echo ""
          echo "📄 Checking final_article.md:"
          if [ -f "output/${{ needs.initialize.outputs.article_id }}/final_article.md" ]; then
            echo "✅ final_article.md exists"
            wc -l output/${{ needs.initialize.outputs.article_id }}/final_article.md
          else
            echo "❌ final_article.md NOT found"
          fi
          echo ""
          echo "📄 Checking research_results.json:"
          if [ -f "output/${{ needs.initialize.outputs.article_id }}/research_results.json" ]; then
            echo "✅ research_results.json exists"
            wc -l output/${{ needs.initialize.outputs.article_id }}/research_results.json
          else
            echo "❌ research_results.json NOT found"
          fi

      - name: Fact-check article with Claude
        uses: anthropics/claude-code-base-action@beta
        with:
          anthropic_api_key: ${{ secrets.ANTHROPIC_API_KEY }}
          
          prompt: |
            記事のファクトチェックを行い、品質スコアを算出してください。
            
            タスク:
            1. 以下のファイルを読み込んで内容を確認:
               - output/${ARTICLE_ID}/final_article.html: 記事本文
               - output/${ARTICLE_ID}/research_results.json: リサーチ結果
            
            2. 以下の観点でチェック:
               - 事実の正確性（リサーチ結果との照合）
               - 薬機法・景表法の遵守
               - 数値や統計の正確性
               - 医学的・科学的主張の妥当性
            
            3. 修正が必要な場合:
               - final_article.html を直接編集
            
            4. 品質レポートを作成:
               - output/${ARTICLE_ID}/factcheck_report.json として以下の形式で保存:
               {
                 "overall_quality_score": 85,
                 "fact_accuracy_score": 90,
                 "legal_compliance_score": 95,
                 "scientific_validity_score": 80,
                 "source_reliability_score": 85,
                 "issues_found": [
                   {
                     "type": "fact_error",
                     "description": "問題の説明",
                     "location": "記事内の場所",
                     "severity": "high/medium/low",
                     "corrected": true/false
                   }
                 ],
                 "recommendations": ["改善提案1", "改善提案2"],
                 "timestamp": "現在時刻",
                 "total_issues": 3,
                 "corrected_issues": 2
               }
            
            5. ペルソナへの配慮:
               - ペルソナが誤解しやすい表現の修正
               - より分かりやすい説明への改善
            
            【重要】必ずWriteツールを使用して以下のファイルを作成してください:
            ファイルパス: ${WORKSPACE}/output/${ARTICLE_ID}/factcheck_report.json
            
            コマンド例:
            Writeツールで以下のパスにファイルを作成:
            ${WORKSPACE}/output/${ARTICLE_ID}/factcheck_report.json
          
          allowed_tools: |
            Read,
            Write,
            Edit
          
          claude_env: |
            ARTICLE_ID=${{ needs.initialize.outputs.article_id }}
            WORKSPACE=${{ github.workspace }}
          
          max_turns: "10"

      - name: Debug - Check Claude execution
        run: |
          echo "🔍 Post-Claude execution check:"
          echo "Working directory: $(pwd)"
          echo ""
          echo "📁 All files in output directory after Claude:"
          ls -la output/${{ needs.initialize.outputs.article_id }}/
          echo ""
          echo "🔍 Looking for any JSON files created:"
          find output/${{ needs.initialize.outputs.article_id }}/ -name "*.json" -type f

      - name: Verify factcheck output
        run: |
          echo "🔍 Checking factcheck output..."
          if [ -f "output/${{ needs.initialize.outputs.article_id }}/factcheck_report.json" ]; then
            echo "✅ factcheck_report.json created successfully"
            ls -la output/${{ needs.initialize.outputs.article_id }}/factcheck_report.json
          else
            echo "❌ factcheck_report.json NOT found!"
            echo "📁 Contents of output directory:"
            ls -la output/${{ needs.initialize.outputs.article_id }}/ || echo "Directory not found"
          fi

      - name: Upload factcheck artifacts
        uses: actions/upload-artifact@v4
        with:
          name: factcheck-${{ needs.initialize.outputs.article_id }}
          path: output/${{ needs.initialize.outputs.article_id }}
          retention-days: 30

  # ジョブ8: SEOメタ情報生成
  generate-seo-meta:
    needs: [initialize, analysis, generate-content]
    runs-on: ubuntu-latest
    environment: GA
    timeout-minutes: 10
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Download artifacts
        uses: actions/download-artifact@v4
        with:
          pattern: '*-${{ needs.initialize.outputs.article_id }}'
          path: output/${{ needs.initialize.outputs.article_id }}
          merge-multiple: true

      - name: Debug - Check files before SEO
        run: |
          echo "📁 Files before SEO metadata generation:"
          ls -la output/${{ needs.initialize.outputs.article_id }}/
          echo ""
          echo "🔧 Environment variables:"
          echo "ARTICLE_ID: ${{ needs.initialize.outputs.article_id }}"
          echo "WORKSPACE: ${{ github.workspace }}"
          echo "Expected SEO path: ${{ github.workspace }}/output/${{ needs.initialize.outputs.article_id }}/seo_metadata.json"
          echo ""
          echo "📄 Checking required files:"
          for file in final_article.md input_params.json phase1_output.json; do
            if [ -f "output/${{ needs.initialize.outputs.article_id }}/$file" ]; then
              echo "✅ $file exists"
            else
              echo "❌ $file NOT found"
            fi
          done

      - name: Generate SEO metadata with Claude
        uses: anthropics/claude-code-base-action@beta
        with:
          anthropic_api_key: ${{ secrets.ANTHROPIC_API_KEY }}
          
          prompt: |
            記事のSEOメタ情報を生成してください。
            
            タスク:
            1. 以下のファイルを読み込んで内容を理解:
               - output/${ARTICLE_ID}/final_article.html: 記事本文
               - output/${ARTICLE_ID}/input_params.json: 入力パラメータ（メタキーワード含む）
               - output/${ARTICLE_ID}/phase1_output.json: 分析結果
            
            2. output/${ARTICLE_ID}/seo_metadata.json として以下の形式で保存:
               {
                 "title": "記事タイトル（60文字以内）",
                 "meta_description": "記事の要約（120-160文字）",
                 "meta_keywords": ["キーワード1", "キーワード2", ...],
                 "og_title": "OGP用タイトル",
                 "og_description": "OGP用説明文",
                 "focus_keyword": "メインキーワード",
                 "secondary_keywords": ["サブキーワード1", "サブキーワード2"],
                 "keyword_density": {
                   "メインキーワード": 2.5,
                   "サブキーワード1": 1.2
                 },
                 "schema_type": "Article",
                 "estimated_reading_time": "5分",
                 "word_count": ${WORD_COUNT},
                 "created_at": "現在時刻"
               }
            
            3. SEO最適化のポイント:
               - メタディスクリプションは検索結果で表示される重要な要素
               - キーワードは自然に配置
               - ペルソナの検索意図を考慮
               - 競合と差別化できる表現
            
            【重要】必ずWriteツールを使用して以下のファイルを作成してください:
            ファイルパス: ${WORKSPACE}/output/${ARTICLE_ID}/seo_metadata.json
            
            コマンド例:
            Writeツールで以下のパスにファイルを作成:
            ${WORKSPACE}/output/${ARTICLE_ID}/seo_metadata.json
          
          allowed_tools: |
            Read,
            Write
          
          claude_env: |
            ARTICLE_ID=${{ needs.initialize.outputs.article_id }}
            WORD_COUNT=${{ inputs.word_count }}
            WORKSPACE=${{ github.workspace }}
          
          max_turns: "30"

      - name: Debug - Check Claude execution for SEO
        run: |
          echo "🔍 Post-Claude SEO execution check:"
          echo "Working directory: $(pwd)"
          echo ""
          echo "📁 All files in output directory after Claude SEO:"
          ls -la output/${{ needs.initialize.outputs.article_id }}/
          echo ""
          echo "🔍 Looking for any JSON files created:"
          find output/${{ needs.initialize.outputs.article_id }}/ -name "*.json" -type f

      - name: Verify SEO metadata output
        run: |
          echo "🔍 Checking SEO metadata output..."
          if [ -f "output/${{ needs.initialize.outputs.article_id }}/seo_metadata.json" ]; then
            echo "✅ seo_metadata.json created successfully"
            ls -la output/${{ needs.initialize.outputs.article_id }}/seo_metadata.json
          else
            echo "❌ seo_metadata.json NOT found!"
            echo "📁 Contents of output directory:"
            ls -la output/${{ needs.initialize.outputs.article_id }}/ || echo "Directory not found"
          fi

      - name: Upload SEO metadata artifacts
        uses: actions/upload-artifact@v4
        with:
          name: seo-meta-${{ needs.initialize.outputs.article_id }}
          path: output/${{ needs.initialize.outputs.article_id }}
          retention-days: 30

  # ジョブ9: 画像生成（MCP + Imagen4）
  generate-images:
    if: ${{ inputs.enable_image_generation }}
    needs: [initialize, generate-structure]
    runs-on: ubuntu-latest
    environment: GA
    timeout-minutes: 20
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Download artifacts
        uses: actions/download-artifact@v4
        with:
          pattern: '*-${{ needs.initialize.outputs.article_id }}'
          path: output/${{ needs.initialize.outputs.article_id }}
          merge-multiple: true

      - name: Generate Images with Claude + MCP Imagen4
        uses: anthropics/claude-code-base-action@beta
        with:
          anthropic_api_key: ${{ secrets.ANTHROPIC_API_KEY }}
          
          prompt: |
            記事に最適な画像を複数枚生成してください。合計4-5枚の画像を生成します。
            
            タスク:
            1. 記事内容を理解:
               - input_params.json でペルソナを確認
               - final_article.md で記事内容を把握（あれば）
               - 01_article_structure.md で構成を理解
            
            2. 以下の手順で個別に画像を生成:
               
               **ステップ1**: ヒーロー画像（16:9）を生成
               - mcp__gemini-imagen__generate_image を使用
               - プロンプト: "記事全体のイメージを表現する16:9のヒーロー画像"
               - ペルソナに合わせたメインビジュアル
               
               **ステップ2**: セクション画像1（4:3）を生成  
               - mcp__gemini-imagen__generate_image を使用
               - プロンプト: "記事の導入部分を表現する4:3の画像"
               
               **ステップ3**: セクション画像2（4:3）を生成
               - mcp__gemini-imagen__generate_image を使用  
               - プロンプト: "記事の方法・手順部分を表現する4:3の画像"
               
               **ステップ4**: セクション画像3（4:3）を生成
               - mcp__gemini-imagen__generate_image を使用
               - プロンプト: "記事の結果・効果部分を表現する4:3の画像"
               
               **ステップ5**: セクション画像4（4:3）を生成
               - mcp__gemini-imagen__generate_image を使用
               - プロンプト: "記事のまとめ部分を表現する4:3の画像"
            
            3. 画像生成の方針（全画像共通）:
               - ペルソナの年代・性別に合わせたビジュアル
               - 清潔感と信頼感のあるデザイン
               - 記事内容と調和したカラーパレット
               - テキストやロゴは含まない
               - imagen-4 または imagen-4-ultra を使用
            
            4. メタデータ作成:
               - images/metadata.json に生成情報を記録
               - 各画像のプロンプト、用途、サイズを記載
               
            重要: 必ず5回のmcp__gemini-imagen__generate_imageを実行して、複数枚の画像を生成してください。
          
          mcp_config: |
            {
              "mcpServers": {
                "gemini-imagen": {
                  "command": "npx",
                  "args": [
                    "-y", 
                    "gemini-imagen-mcp-server",
                    "--model", "imagen-4"
                  ],
                  "env": {
                    "GEMINI_API_KEY": "${{ secrets.GEMINI_API_KEY }}"
                  }
                }
              }
            }
          
          allowed_tools: |
            Read,
            Write,
            mcp__gemini-imagen__generate_image,
            mcp__gemini-imagen__list_models
          
          claude_env: |
            ARTICLE_ID=${{ needs.initialize.outputs.article_id }}
          
          max_turns: "30"

      - name: Process generated images
        run: |
          ARTICLE_DIR="output/${{ needs.initialize.outputs.article_id }}"
          IMAGE_DIR="${ARTICLE_DIR}/images"
          
          # MCPサーバーは imagen/ ディレクトリに保存する
          if [ -d "imagen" ] && [ "$(ls -A imagen 2>/dev/null)" ]; then
            echo "✅ Images found in imagen directory:"
            ls -la imagen/
            
            # 画像を記事ディレクトリにコピー
            mkdir -p $IMAGE_DIR
            cp imagen/*.png $IMAGE_DIR/ 2>/dev/null || true
            cp imagen/*.jpg $IMAGE_DIR/ 2>/dev/null || true
            
            # リネーム（オプション）
            cd $IMAGE_DIR
            i=1
            for img in *.png *.jpg; do
              if [ -f "$img" ]; then
                if [ $i -eq 1 ]; then
                  mv "$img" "hero_image.png" 2>/dev/null || true
                else
                  mv "$img" "section_$((i-1))_image.png" 2>/dev/null || true
                fi
                i=$((i+1))
              fi
            done
            cd -
            
            echo "Final images:"
            ls -la $IMAGE_DIR
          else
            echo "⚠️ No images generated"
          fi

      - name: Upload image artifacts
        uses: actions/upload-artifact@v4
        with:
          name: images-${{ needs.initialize.outputs.article_id }}
          path: |
            output/${{ needs.initialize.outputs.article_id }}/images
            imagen/
          retention-days: 30

  # ジョブ10: 最終処理（5つの成果物）
  finalize:
    needs: [initialize, analysis, research-merge, generate-structure, generate-content, factcheck, generate-seo-meta, generate-images]
    if: always()
    runs-on: ubuntu-latest
    environment: GA
    timeout-minutes: 10
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          pattern: '*-${{ needs.initialize.outputs.article_id }}'
          path: output/${{ needs.initialize.outputs.article_id }}
          merge-multiple: true

      - name: Create final package with Claude
        uses: anthropics/claude-code-base-action@beta
        with:
          anthropic_api_key: ${{ secrets.ANTHROPIC_API_KEY }}
          
          prompt: |
            V4の最終パッケージを作成してください。以下の5つの成果物を整理してください：
            
            V4最終成果物:
            1. research_results.json - リサーチ結果
            2. factcheck_report.json - ファクトチェック品質スコア
            3. seo_metadata.json - SEOメタ情報（キーワード、ディスクリプション等）
            4. images/ ディレクトリ - 生成画像群
            5. final_article.html - 最終記事（HTML形式、画像配置済み）
            
            タスク:
            1. 上記5つのファイル/ディレクトリが存在することを確認
            2. V4_deliverables.md を作成:
               - 5つの成果物の説明
               - ペルソナ最適化のポイント
               - 品質スコアのサマリー
               - SEOメタ情報のサマリー
               - 使用画像のリスト
               - HTML形式の特徴（指定テンプレート使用）
            3. 不要なファイルは削除しない（制作側で選択）
          
          allowed_tools: |
            Read,
            Write,
            Edit
          
          claude_env: |
            ARTICLE_ID=${{ needs.initialize.outputs.article_id }}
          
          max_turns: "10"

      # Google Drive upload removed - using GitHub Artifacts only

      - name: Create workflow summary
        if: always()
        run: |
          ARTICLE_DIR="output/${{ needs.initialize.outputs.article_id }}"
          
          echo "## 📝 Article Generation V4 Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### 📋 Input Parameters" >> $GITHUB_STEP_SUMMARY
          echo "- **Title**: ${{ inputs.article_title }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Persona**: ${{ inputs.target_persona }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Keywords**: ${{ inputs.meta_keywords }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          echo "### 🎯 V4 Deliverables" >> $GITHUB_STEP_SUMMARY
          echo "1. **research_results.json** - Research data with reliability scores" >> $GITHUB_STEP_SUMMARY
          echo "2. **factcheck_report.json** - Quality scores and fact-checking results" >> $GITHUB_STEP_SUMMARY
          echo "3. **seo_metadata.json** - SEO metadata (keywords, meta description, etc.)" >> $GITHUB_STEP_SUMMARY
          echo "4. **images/** - Generated images (hero + section images)" >> $GITHUB_STEP_SUMMARY  
          echo "5. **final_article.html** - HTML article with embedded images" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          if [ -f "$ARTICLE_DIR/V4_deliverables.md" ]; then
            echo "### 📊 Generation Summary" >> $GITHUB_STEP_SUMMARY
            cat "$ARTICLE_DIR/V4_deliverables.md" >> $GITHUB_STEP_SUMMARY
          fi
          
          if [ -d "$ARTICLE_DIR/images" ]; then
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "### 🖼️ Generated Images" >> $GITHUB_STEP_SUMMARY
            echo "- Image count: $(find $ARTICLE_DIR/images -name "*.png" -o -name "*.jpg" | wc -l)" >> $GITHUB_STEP_SUMMARY
          fi

      - name: Create organized final package
        run: |
          ARTICLE_DIR="output/${{ needs.initialize.outputs.article_id }}"
          FINAL_DIR="final_package"
          
          # 詳細デバッグ: アーティファクトとファイルの確認
          echo "====== FINAL PACKAGE CREATION DEBUG ======"
          echo "🔍 ARTICLE_DIR: $ARTICLE_DIR"
          echo "📁 Article directory check:"
          [ -d "$ARTICLE_DIR" ] && echo "✅ Directory exists" || echo "❌ Directory NOT found"
          
          echo ""
          echo "📋 All downloaded artifacts and files:"
          find . -name "*.json" -o -name "*.md" -o -name "*.png" -o -name "*.jpg" | head -20
          
          echo ""
          echo "🖼️ Specifically looking for images:"
          echo "PNG files:"
          find . -name "*.png" -type f 2>/dev/null | head -10
          echo "JPG files:"
          find . -name "*.jpg" -o -name "*.jpeg" -type f 2>/dev/null | head -10
          echo ""
          echo "Image directories:"
          find . -name "images" -type d 2>/dev/null
          find . -name "imagen" -type d 2>/dev/null
          
          echo ""
          echo "🔍 Current working directory contents:"
          ls -la
          
          echo ""
          echo "🔍 Specifically looking for factcheck and SEO files:"
          echo "Factcheck files:"
          find . -name "*factcheck*" -type f 2>/dev/null || echo "No factcheck files found"
          echo "SEO files:"
          find . -name "*seo*" -type f 2>/dev/null || echo "No SEO files found"
          
          echo ""
          echo "🔍 Output directory contents:"
          if [ -d "output/" ]; then
            find output/ -type f | head -20
          else
            echo "❌ No output directory found"
          fi
          
          echo "=============================================="
          
          # 最終パッケージ用のディレクトリを作成
          mkdir -p $FINAL_DIR
          
          # V4の4つの成果物を収集（アーティファクトから直接）
          echo ""
          echo "🔄 Collecting V4 deliverables from artifacts..."
          
          # 1. メイン記事 (HTML) - アーティファクトから検索
          ARTICLE_FOUND=false
          
          # 複数の場所から記事ファイルを検索
          POSSIBLE_ARTICLES=(
            "$ARTICLE_DIR/final_article.html"
            "$ARTICLE_DIR/article.html"
            "final_article.html"
            "article.html"
          )
          
          for article_path in "${POSSIBLE_ARTICLES[@]}"; do
            if [ -f "$article_path" ]; then
              cp "$article_path" "$FINAL_DIR/article.html"
              echo "✅ Found and copied article: $article_path ($(wc -c < "$article_path") bytes)"
              ARTICLE_FOUND=true
              break
            fi
          done
          
          # 記事が見つからない場合は.htmlファイルを検索
          if [ "$ARTICLE_FOUND" = false ]; then
            echo "⚠️ Standard article files not found, searching for any .html files..."
            HTML_FILE=$(find . -name "*.html" -type f ! -name "index.html" | head -1)
            if [ -n "$HTML_FILE" ]; then
              cp "$HTML_FILE" "$FINAL_DIR/article.html"
              echo "✅ Using fallback .html file: $HTML_FILE ($(wc -c < "$HTML_FILE") bytes)"
              ARTICLE_FOUND=true
            fi
          fi
          
          if [ "$ARTICLE_FOUND" = false ]; then
            echo "❌ ERROR: No article file found in any location!"
            echo "Creating minimal article as last resort..."
            echo '<div class="article-content"><h2>記事生成エラー</h2><p>記事ファイルが見つかりませんでした。ワークフローの実行ログを確認してください。</p></div>' > "$FINAL_DIR/article.html"
          fi
          
          # 2. リサーチ結果 - 複数の場所から検索
          RESEARCH_LOCATIONS=(
            "$ARTICLE_DIR/research_results.json"
            "research_results.json"
            "research-*.json"
          )
          
          RESEARCH_FOUND=false
          for loc in "${RESEARCH_LOCATIONS[@]}"; do
            if [ -f "$loc" ]; then
              cp "$loc" "$FINAL_DIR/research_results.json"
              echo "✅ Found research results: $loc"
              RESEARCH_FOUND=true
              break
            fi
          done
          
          if [ "$RESEARCH_FOUND" = false ]; then
            # 検索パターンを使用
            RESEARCH_FILE=$(find . -name "*research*.json" | head -1)
            if [ -n "$RESEARCH_FILE" ]; then
              cp "$RESEARCH_FILE" "$FINAL_DIR/research_results.json"
              echo "✅ Using research file: $RESEARCH_FILE"
            else
              echo "⚠️ No research results found"
            fi
          fi
          
          # 3. SEOメタデータ - 複数の場所から検索
          SEO_LOCATIONS=(
            "$ARTICLE_DIR/seo_metadata.json"
            "seo_metadata.json"
            "seo-*.json"
          )
          
          SEO_FOUND=false
          for loc in "${SEO_LOCATIONS[@]}"; do
            if [ -f "$loc" ]; then
              cp "$loc" "$FINAL_DIR/seo_metadata.json"
              echo "✅ Found SEO metadata: $loc"
              SEO_FOUND=true
              break
            fi
          done
          
          if [ "$SEO_FOUND" = false ]; then
            echo "⚠️ No SEO metadata found"
            echo "📁 Searching for SEO metadata files..."
            find . -name "*seo*.json" -type f 2>/dev/null | head -10
          fi
          
          # 4. ファクトチェック品質レポート - 複数の場所から検索
          FACTCHECK_LOCATIONS=(
            "$ARTICLE_DIR/factcheck_report.json"
            "factcheck_report.json"
            "factcheck-*.json"
          )
          
          FACTCHECK_FOUND=false
          for loc in "${FACTCHECK_LOCATIONS[@]}"; do
            if [ -f "$loc" ]; then
              cp "$loc" "$FINAL_DIR/factcheck_report.json"
              echo "✅ Found factcheck report: $loc"
              FACTCHECK_FOUND=true
              break
            fi
          done
          
          if [ "$FACTCHECK_FOUND" = false ]; then
            # 検索パターンを使用
            FACTCHECK_FILE=$(find . -name "*factcheck*.json" | head -1)
            if [ -n "$FACTCHECK_FILE" ]; then
              cp "$FACTCHECK_FILE" "$FINAL_DIR/factcheck_report.json"
              echo "✅ Using factcheck file: $FACTCHECK_FILE"
            else
              echo "⚠️ No factcheck report found"
              echo "📁 Searching for factcheck files..."
              find . -name "*factcheck*.json" -type f 2>/dev/null | head -10
            fi
          fi
          
          # 5. 画像フォルダ - 複数の場所から検索
          mkdir -p "$FINAL_DIR/images"
          IMAGES_FOUND=false
          
          # 標準的な画像フォルダの場所
          if [ -d "$ARTICLE_DIR/images" ]; then
            cp -r "$ARTICLE_DIR/images/"* "$FINAL_DIR/images/" 2>/dev/null || true
            echo "✅ Found images in $ARTICLE_DIR/images"
            IMAGES_FOUND=true
          fi
          
          # imagen/ フォルダから画像を検索（MCP画像生成の場所）
          if [ -d "imagen" ]; then
            echo "📁 Checking imagen/ directory for MCP generated images..."
            cp imagen/*.png "$FINAL_DIR/images/" 2>/dev/null || true
            cp imagen/*.jpg "$FINAL_DIR/images/" 2>/dev/null || true
            if [ "$(ls -A imagen/*.png 2>/dev/null)" ] || [ "$(ls -A imagen/*.jpg 2>/dev/null)" ]; then
              echo "✅ Found images in imagen/"
              IMAGES_FOUND=true
            fi
          fi
          
          # images-*/output/*/images/ から画像を検索（アーティファクトの構造）
          IMAGE_ARTIFACT_PATHS=$(find . -path "*/images-*/output/*/images" -type d 2>/dev/null)
          if [ -n "$IMAGE_ARTIFACT_PATHS" ]; then
            for img_path in $IMAGE_ARTIFACT_PATHS; do
              echo "📁 Found image artifact path: $img_path"
              cp "$img_path"/*.png "$FINAL_DIR/images/" 2>/dev/null || true
              cp "$img_path"/*.jpg "$FINAL_DIR/images/" 2>/dev/null || true
              IMAGES_FOUND=true
            done
          fi
          
          # 直接 output/*/images または output/*/imagen から検索
          if [ -d "$ARTICLE_DIR/images" ] || [ -d "$ARTICLE_DIR/imagen" ]; then
            echo "📁 Checking output artifact directories..."
            [ -d "$ARTICLE_DIR/images" ] && cp -r "$ARTICLE_DIR/images/"* "$FINAL_DIR/images/" 2>/dev/null || true
            [ -d "$ARTICLE_DIR/imagen" ] && cp -r "$ARTICLE_DIR/imagen/"* "$FINAL_DIR/images/" 2>/dev/null || true
            IMAGES_FOUND=true
          fi
          
          # その他の場所から画像を検索（最後の手段）
          if [ "$IMAGES_FOUND" = false ]; then
            echo "⚠️ Standard image locations not found, searching all directories..."
            find . -name "*.png" -o -name "*.jpg" -o -name "*.jpeg" | while read img; do
              if [[ "$img" != *"README"* ]] && [[ "$img" != *"node_modules"* ]]; then
                cp "$img" "$FINAL_DIR/images/" 2>/dev/null || true
                echo "✅ Found image: $img"
                IMAGES_FOUND=true
              fi
            done
          fi
          
          # 画像フォルダの内容を確認
          echo "📁 Final images directory contents:"
          ls -la "$FINAL_DIR/images/" 2>/dev/null || echo "No images directory created"
          
          
          # V4成果物説明
          if [ -f "$ARTICLE_DIR/V4_deliverables.md" ]; then
            cp "$ARTICLE_DIR/V4_deliverables.md" "$FINAL_DIR/deliverables.md"
          fi
          
          # 最終パッケージの内容確認
          echo ""
          echo "📦 Final package contents:"
          find "$FINAL_DIR" -type f -exec ls -la {} \;
          
          # README作成
          echo "# V4 記事生成完了パッケージ（制作向け簡易版）" > "$FINAL_DIR/README.md"
          echo "" >> "$FINAL_DIR/README.md"
          echo "**記事タイトル**: ${{ inputs.article_title }}" >> "$FINAL_DIR/README.md"
          echo "**生成日時**: $(date +%Y-%m-%d\ %H:%M:%S)" >> "$FINAL_DIR/README.md"
          echo "**記事ID**: ${{ needs.initialize.outputs.article_id }}" >> "$FINAL_DIR/README.md"
          echo "" >> "$FINAL_DIR/README.md"
          echo "## 📁 V4成果物（5点）" >> "$FINAL_DIR/README.md"
          echo "" >> "$FINAL_DIR/README.md"
          echo "1. **article.html** - 記事本文（HTML形式、画像配置済み）" >> "$FINAL_DIR/README.md"
          echo "2. **research_results.json** - リサーチ結果（信頼性スコア付き）" >> "$FINAL_DIR/README.md"
          echo "3. **factcheck_report.json** - ファクトチェック品質スコア（0-100点）" >> "$FINAL_DIR/README.md"
          echo "4. **seo_metadata.json** - SEOメタ情報（キーワード、メタディスクリプション等）" >> "$FINAL_DIR/README.md"
          echo "5. **images/** - 生成画像（各セクション用）" >> "$FINAL_DIR/README.md"
          echo "" >> "$FINAL_DIR/README.md"
          echo "## 🎯 ターゲット情報" >> "$FINAL_DIR/README.md"
          echo "" >> "$FINAL_DIR/README.md"
          echo "- **ペルソナ**: ${{ inputs.target_persona }}" >> "$FINAL_DIR/README.md"
          echo "- **キーワード**: ${{ inputs.meta_keywords }}" >> "$FINAL_DIR/README.md"
          echo "" >> "$FINAL_DIR/README.md"
          echo "## 📝 備考" >> "$FINAL_DIR/README.md"
          echo "" >> "$FINAL_DIR/README.md"
          echo "- **article.html**: 指定テンプレート形式のHTML（<div class=\"article-content\">で開始）" >> "$FINAL_DIR/README.md"
          echo "- 画像は各セクションに配置済み" >> "$FINAL_DIR/README.md"
          echo "- 追加のスタイルやSEO構造化が必要な場合は制作側で実施してください" >> "$FINAL_DIR/README.md"
          
          echo "📦 V4 final package created in: $FINAL_DIR"
          ls -la $FINAL_DIR/

      - name: Upload final package
        uses: actions/upload-artifact@v4
        with:
          name: FINAL_V4_ARTICLE_PACKAGE
          path: final_package
          retention-days: 30

