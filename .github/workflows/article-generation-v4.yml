name: Article Generation V4 (New Architecture)

on:
  workflow_dispatch:
    inputs:
      article_title:
        description: 'タイトル案（30〜32字）'
        required: true
        type: string
        default: ''
      
      main_keywords:
        description: '主要KW（最大3語、カンマ区切り）'
        required: true
        type: string
        default: ''
      
      approach_target:
        description: '切り口・ターゲット'
        required: true
        type: string
        default: ''
      
      eeat_elements:
        description: 'E-E-A-T要素（Experience, Expertise, Authoritativeness, Trustworthiness）'
        required: true
        type: string
        default: ''
      
      word_count:
        description: '目標文字数'
        required: false
        type: string
        default: '3200'
      
      profile:
        description: 'Strategy Profile'
        required: false
        type: choice
        options:
          - 'v2'
          - 'v3'
        default: 'v2'
      
      enable_image_generation:
        description: '画像生成を有効にする'
        required: false
        type: boolean
        default: true

env:
  PYTHON_VERSION: '3.11'

jobs:
  # ジョブ1: 初期化とセットアップ
  initialize:
    runs-on: ubuntu-latest
    environment: GA
    timeout-minutes: 5
    outputs:
      article_id: ${{ steps.init.outputs.article_id }}
      profile: ${{ steps.init.outputs.profile }}
      
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          
      - name: Install dependencies
        run: |
          pip install anthropic pyyaml pathlib
          # 必要に応じて他の依存関係も追加

      - name: Initialize article generation
        id: init
        run: |
          # 記事IDを生成
          CLEAN_TITLE=$(echo "${{ inputs.article_title }}" | sed 's/[^a-zA-Z0-9あ-んア-ン一-龯]/_/g' | cut -c1-30)
          ARTICLE_ID=$(date +%Y%m%d_%H%M%S)_${CLEAN_TITLE}
          PROFILE="${{ inputs.profile }}"
          
          echo "article_id=${ARTICLE_ID}" >> $GITHUB_OUTPUT
          echo "profile=${PROFILE}" >> $GITHUB_OUTPUT
          
          echo "Article ID: ${ARTICLE_ID}"
          echo "Profile: ${PROFILE}"
          
          # 出力ディレクトリ作成
          mkdir -p "output/${ARTICLE_ID}"
          
          # 入力パラメータファイル作成（CLIが読み込める形式）
          cat > "output/${ARTICLE_ID}/input_params.json" << EOF
          {
            "article_id": "${ARTICLE_ID}",
            "title": "${{ inputs.article_title }}",
            "main_keywords": "${{ inputs.main_keywords }}",
            "approach_target": "${{ inputs.approach_target }}",
            "eeat_elements": "${{ inputs.eeat_elements }}",
            "word_count": "${{ inputs.word_count }}",
            "profile": "${PROFILE}",
            "enable_image_generation": ${{ inputs.enable_image_generation }},
            "created_at": "$(date -u +%Y-%m-%dT%H:%M:%SZ)"
          }
          EOF

      - name: Validate inputs
        run: |
          # 新しいCLIでdry-runによる入力検証
          python -m article_flow.cli \
            --profile "${{ inputs.profile }}" \
            --title "${{ inputs.article_title }}" \
            --main-keywords "${{ inputs.main_keywords }}" \
            --approach-target "${{ inputs.approach_target }}" \
            --eeat-elements "${{ inputs.eeat_elements }}" \
            --word-count "${{ inputs.word_count }}" \
            --prompt-dir "Prompt_${{ inputs.profile }}" \
            --output-dir "output/${{ steps.init.outputs.article_id }}" \
            --config "article_flow/config/${{ inputs.profile }}.yaml" \
            --dry-run

      - name: Upload initialization artifacts
        uses: actions/upload-artifact@v4
        with:
          name: init-${{ steps.init.outputs.article_id }}
          path: output/${{ steps.init.outputs.article_id }}
          retention-days: 30

  # ジョブ2: 記事生成（新しいCLI使用）
  generate_article:
    needs: initialize
    runs-on: ubuntu-latest
    environment: GA
    timeout-minutes: 30
    outputs:
      generation_status: ${{ steps.generate.outputs.status }}
      
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          
      - name: Install dependencies
        run: |
          pip install anthropic pyyaml pathlib
          # MCP imagen関連の依存関係も必要に応じて追加

      - name: Download initialization artifacts
        uses: actions/download-artifact@v4
        with:
          name: init-${{ needs.initialize.outputs.article_id }}
          path: output/${{ needs.initialize.outputs.article_id }}

      - name: Generate article using new CLI
        id: generate
        env:
          ANTHROPIC_API_KEY: ${{ secrets.ANTHROPIC_API_KEY }}
          # MCP関連の環境変数も必要に応じて追加
        run: |
          echo "Starting article generation with profile: ${{ needs.initialize.outputs.profile }}"
          
          # 新しいCLIでフルパイプライン実行
          python -m article_flow.cli \
            --profile "${{ needs.initialize.outputs.profile }}" \
            --title "${{ inputs.article_title }}" \
            --main-keywords "${{ inputs.main_keywords }}" \
            --approach-target "${{ inputs.approach_target }}" \
            --eeat-elements "${{ inputs.eeat_elements }}" \
            --word-count "${{ inputs.word_count }}" \
            --prompt-dir "Prompt_${{ needs.initialize.outputs.profile }}" \
            --output-dir "output/${{ needs.initialize.outputs.article_id }}" \
            --config "article_flow/config/${{ needs.initialize.outputs.profile }}.yaml" \
            --enable-image-generation="${{ inputs.enable_image_generation }}" \
            --log-level "INFO" \
            --article-id "${{ needs.initialize.outputs.article_id }}"
          
          # 実行結果確認
          if [ -f "output/${{ needs.initialize.outputs.article_id }}/final_result.json" ]; then
            echo "status=success" >> $GITHUB_OUTPUT
            echo "Article generation completed successfully"
          else
            echo "status=failed" >> $GITHUB_OUTPUT
            echo "Article generation failed"
            exit 1
          fi

      - name: Validate output quality
        run: |
          # 出力品質をチェック
          RESULT_FILE="output/${{ needs.initialize.outputs.article_id }}/final_result.json"
          
          if [ -f "$RESULT_FILE" ]; then
            # JSONから品質スコアを抽出（例）
            echo "Checking article quality..."
            python -c "
            import json
            with open('$RESULT_FILE', 'r', encoding='utf-8') as f:
                result = json.load(f)
            
            phases = result.get('phases', {})
            
            # Phase 4 (factcheck) の結果を確認
            factcheck = phases.get('phase4', {})
            if factcheck:
                score = factcheck.get('overall_score', 0)
                print(f'Quality Score: {score}')
                if score < 85:
                    print('WARNING: Quality score below threshold')
                    exit(1)
            else:
                print('No factcheck results found')
            "
          else
            echo "Result file not found"
            exit 1

      - name: Generate summary report
        run: |
          # 結果サマリーを生成
          RESULT_FILE="output/${{ needs.initialize.outputs.article_id }}/final_result.json"
          SUMMARY_FILE="output/${{ needs.initialize.outputs.article_id }}/generation_summary.md"
          
          python -c "
          import json
          from datetime import datetime
          
          # 結果を読み込み
          with open('$RESULT_FILE', 'r', encoding='utf-8') as f:
              result = json.load(f)
          
          # サマリーを生成
          summary = []
          summary.append('# Article Generation Summary')
          summary.append('')
          summary.append(f'**Article ID:** {result.get(\"article_id\", \"Unknown\")}')
          summary.append(f'**Profile:** ${{ needs.initialize.outputs.profile }}')
          summary.append(f'**Status:** {result.get(\"status\", \"Unknown\")}')
          summary.append(f'**Completed At:** {result.get(\"completed_at\", \"Unknown\")}')
          summary.append('')
          
          # フェーズごとの結果
          phases = result.get('phases', {})
          summary.append('## Phase Results')
          summary.append('')
          
          for phase_name, phase_result in phases.items():
              if phase_result:
                  status = '✅' if not phase_result.get('error') else '❌'
                  summary.append(f'- {status} **{phase_name}**: {phase_result.get(\"status\", \"completed\")}')
          
          # 品質メトリクス
          factcheck = phases.get('phase4', {})
          if factcheck and 'factcheck_results' in factcheck:
              fc_results = factcheck['factcheck_results']
              summary.append('')
              summary.append('## Quality Metrics')
              summary.append('')
              summary.append(f'- Overall Score: {fc_results.get(\"overall_score\", \"N/A\")}')
              summary.append(f'- Factual Accuracy: {fc_results.get(\"factual_accuracy\", \"N/A\")}')
              summary.append(f'- Regulatory Compliance: {fc_results.get(\"regulatory_compliance\", \"N/A\")}')
          
          # ファイルに書き出し
          with open('$SUMMARY_FILE', 'w', encoding='utf-8') as f:
              f.write('\\n'.join(summary))
          
          print('Summary report generated')
          "

      - name: Upload generation results
        uses: actions/upload-artifact@v4
        with:
          name: article-${{ needs.initialize.outputs.article_id }}
          path: output/${{ needs.initialize.outputs.article_id }}
          retention-days: 30

  # ジョブ3: 結果通知とクリーンアップ
  finalize:
    needs: [initialize, generate_article]
    runs-on: ubuntu-latest
    if: always()
    timeout-minutes: 5
    
    steps:
      - name: Download generation results
        if: needs.generate_article.outputs.generation_status == 'success'
        uses: actions/download-artifact@v4
        with:
          name: article-${{ needs.initialize.outputs.article_id }}
          path: output/${{ needs.initialize.outputs.article_id }}

      - name: Display generation summary
        if: needs.generate_article.outputs.generation_status == 'success'
        run: |
          echo "## Article Generation Completed 🎉"
          echo ""
          echo "**Article ID:** ${{ needs.initialize.outputs.article_id }}"
          echo "**Profile:** ${{ needs.initialize.outputs.profile }}"
          echo "**Title:** ${{ inputs.article_title }}"
          echo "**Keywords:** ${{ inputs.main_keywords }}"
          echo "**Target:** ${{ inputs.approach_target }}"
          echo ""
          
          # サマリーファイルが存在する場合は表示
          if [ -f "output/${{ needs.initialize.outputs.article_id }}/generation_summary.md" ]; then
            echo "### Detailed Summary"
            cat "output/${{ needs.initialize.outputs.article_id }}/generation_summary.md"
          fi

      - name: Handle generation failure
        if: needs.generate_article.outputs.generation_status == 'failed'
        run: |
          echo "## Article Generation Failed ❌"
          echo ""
          echo "**Article ID:** ${{ needs.initialize.outputs.article_id }}"
          echo "**Profile:** ${{ needs.initialize.outputs.profile }}"
          echo ""
          echo "Please check the generation logs for details."
          exit 1

      - name: Workflow summary
        run: |
          echo "## Workflow Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "- **Profile Used:** ${{ needs.initialize.outputs.profile }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Article ID:** ${{ needs.initialize.outputs.article_id }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Generation Status:** ${{ needs.generate_article.outputs.generation_status }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Image Generation:** ${{ inputs.enable_image_generation }}" >> $GITHUB_STEP_SUMMARY