name: Article Generation V4 (Simplified Output)

on:
  workflow_dispatch:
    inputs:
      article_title:
        description: 'Ë®ò‰∫ã„Çø„Ç§„Éà„É´'
        required: true
        type: string
        default: ''
      
      target_persona:
        description: '„Çø„Éº„Ç≤„ÉÉ„Éà„Éö„É´„ÇΩ„ÉäÔºà‰æãÔºö30‰ª£Â•≥ÊÄß„ÄÅÂÅ•Â∫∑ÊÑèË≠ò„ÅåÈ´ò„ÅÑ„ÄÅÂ≠êËÇ≤„Å¶‰∏≠Ôºâ'
        required: true
        type: string
        default: ''
      
      meta_keywords:
        description: '„É°„Çø„Ç≠„Éº„ÉØ„Éº„ÉâÔºà„Ç´„É≥„ÉûÂå∫Âàá„ÇäÔºâ'
        required: true
        type: string
        default: ''
      
      enable_image_generation:
        description: 'ÁîªÂÉèÁîüÊàê„ÇíÊúâÂäπ„Å´„Åô„Çã'
        required: false
        type: boolean
        default: true
      
      # Google Drive upload removed

env:
  PYTHON_VERSION: '3.11'

jobs:
  # „Ç∏„Éß„Éñ1: ÂàùÊúüÂåñ
  initialize:
    runs-on: ubuntu-latest
    environment: GA
    timeout-minutes: 5
    outputs:
      article_id: ${{ steps.init.outputs.article_id }}
      
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Initialize article generation
        id: init
        run: |
          # „Çø„Ç§„Éà„É´„Åã„ÇâID„ÇíÁîüÊàê
          CLEAN_TITLE=$(echo "${{ inputs.article_title }}" | sed 's/[^a-zA-Z0-9„ÅÇ-„Çì„Ç¢-„É≥‰∏Ä-ÈæØ]/_/g' | cut -c1-50)
          ARTICLE_ID=$(date +%Y%m%d_%H%M%S)_${CLEAN_TITLE}
          echo "article_id=${ARTICLE_ID}" >> $GITHUB_OUTPUT
          echo "Article ID: ${ARTICLE_ID}"
          
          # Âá∫Âäõ„Éá„Ç£„É¨„ÇØ„Éà„É™‰ΩúÊàê
          mkdir -p output/${ARTICLE_ID}
          
          # ÂÖ•ÂäõÊÉÖÂ†±„Çí‰øùÂ≠ò
          TIMESTAMP=$(date -u +%Y-%m-%dT%H:%M:%SZ)
          cat > output/${ARTICLE_ID}/input_params.json << EOJSON
          {
            "article_id": "${ARTICLE_ID}",
            "title": "${{ inputs.article_title }}",
            "target_persona": "${{ inputs.target_persona }}",
            "meta_keywords": "${{ inputs.meta_keywords }}",
            "created_at": "${TIMESTAMP}"
          }
          EOJSON

      - name: Upload initialization artifacts
        uses: actions/upload-artifact@v4
        with:
          name: init-${{ steps.init.outputs.article_id }}
          path: output/${{ steps.init.outputs.article_id }}
          retention-days: 30

  # „Ç∏„Éß„Éñ2: „É™„ÇØ„Ç®„Çπ„ÉàÂàÜÊûê
  analysis:
    needs: initialize
    runs-on: ubuntu-latest
    environment: GA
    timeout-minutes: 10
    outputs:
      main_keyword: ${{ steps.analyze.outputs.main_keyword }}
      
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Download initialization artifacts
        uses: actions/download-artifact@v4
        with:
          name: init-${{ needs.initialize.outputs.article_id }}
          path: output/${{ needs.initialize.outputs.article_id }}

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Install dependencies
        run: |
          cd github-actions
          pip install -r requirements.txt

      - name: Create analysis input
        run: |
          cd output/${{ needs.initialize.outputs.article_id }}
          # Phase1„ÅåÊúüÂæÖ„Åô„ÇãÂΩ¢Âºè„ÅÆJSON„Çí‰ΩúÊàê
          cat > request_params.json << EOJSON
          {
            "topic": "${{ inputs.article_title }}",
            "target_audience": "${{ inputs.target_persona }}",
            "keywords": "${{ inputs.meta_keywords }}"
          }
          EOJSON

      - name: Run Phase 1 Analysis with Claude
        uses: anthropics/claude-code-base-action@beta
        with:
          anthropic_api_key: ${{ secrets.ANTHROPIC_API_KEY }}
          
          prompt: |
            Ë®ò‰∫ã„É™„ÇØ„Ç®„Çπ„Éà„ÇíÂàÜÊûê„Åó„Å¶„ÄÅË®ò‰∫ãÁîüÊàê„ÅÆ„Åü„ÇÅ„ÅÆË©≥Á¥∞„Éë„É©„É°„Éº„Çø„ÇíÊäΩÂá∫„Åó„Å¶„Åè„Å†„Åï„ÅÑ„ÄÇ
            
            ÂÖ•ÂäõÊÉÖÂ†±:
            - „Éà„Éî„ÉÉ„ÇØ: ${{ inputs.article_title }}  
            - „Çø„Éº„Ç≤„ÉÉ„ÉàË™≠ËÄÖ: ${{ inputs.target_persona }}
            - „É°„Çø„Ç≠„Éº„ÉØ„Éº„Éâ: ${{ inputs.meta_keywords }}
            
            „Çø„Çπ„ÇØ:
            1. output/${{ needs.initialize.outputs.article_id }}/request_params.json „ÇíË™≠„ÅøËæº„Çì„ÅßÁêÜËß£
            2. ‰ª•‰∏ã„ÅÆÂàÜÊûê„ÇíÂÆüË°å:
               - „É°„Ç§„É≥„Ç≠„Éº„ÉØ„Éº„Éâ„ÅÆÁâπÂÆö
               - Èñ¢ÈÄ£„Ç≠„Éº„ÉØ„Éº„Éâ„ÅÆÊäΩÂá∫Ôºà5-8ÂÄãÔºâ
               - Ê§úÁ¥¢ÊÑèÂõ≥„ÅÆÂàÜÊûê
               - „É™„Çµ„Éº„ÉÅ„ÇØ„Ç®„É™„ÅÆÁîüÊàêÔºà15-25ÂÄãÔºâ
            
            3. ÂàÜÊûêÁµêÊûú„Çí output/${{ needs.initialize.outputs.article_id }}/phase1_output.json „Éï„Ç°„Ç§„É´„Å´‰øùÂ≠ò„Åó„Å¶„Åè„Å†„Åï„ÅÑ
            
            ÈáçË¶ÅÔºö‰ª•‰∏ã„ÅÆÂΩ¢Âºè„Åßanalysis„Ç™„Éñ„Ç∏„Çß„ÇØ„Éà„ÇíÂê´„ÇÄJSON„Çí‰ΩúÊàê„Åó„Å¶„Åè„Å†„Åï„ÅÑÔºö
            {
              "analysis": {
                "main_keyword": "ÊäΩÂá∫„Åó„Åü„É°„Ç§„É≥„Ç≠„Éº„ÉØ„Éº„Éâ",
                "related_keywords": ["Èñ¢ÈÄ£1", "Èñ¢ÈÄ£2", "Èñ¢ÈÄ£3", "Èñ¢ÈÄ£4", "Èñ¢ÈÄ£5"],
                "search_intent": "informational",
                "content_type": "how-to", 
                "tone": "friendly",
                "key_points": ["„Éù„Ç§„É≥„Éà1", "„Éù„Ç§„É≥„Éà2", "„Éù„Ç§„É≥„Éà3"],
                "research_queries": ["„ÇØ„Ç®„É™1", "„ÇØ„Ç®„É™2", "„ÇØ„Ç®„É™3", "„ÇØ„Ç®„É™4", "„ÇØ„Ç®„É™5", "„ÇØ„Ç®„É™6", "„ÇØ„Ç®„É™7", "„ÇØ„Ç®„É™8", "„ÇØ„Ç®„É™9", "„ÇØ„Ç®„É™10", "„ÇØ„Ç®„É™11", "„ÇØ„Ç®„É™12", "„ÇØ„Ç®„É™13", "„ÇØ„Ç®„É™14", "„ÇØ„Ç®„É™15"],
                "competitor_analysis_needed": true,
                "local_seo_focus": false,
                "estimated_sections": 5
              },
              "topic": "${{ inputs.article_title }}",
              "target_audience": "${{ inputs.target_persona }}",
              "keywords": "${{ inputs.meta_keywords }}",
              "processed_at": "ÁèæÂú®ÊôÇÂàª",
              "workflow_version": "4.0.0"
            }
          
          allowed_tools: |
            Read,
            Write
          
          claude_env: |
            ARTICLE_ID=${{ needs.initialize.outputs.article_id }}
          
          max_turns: "5"
      
      - name: Verify and prepare analysis results
        run: |
          echo "üîç Checking for analysis files..."
          echo "Current working directory: $(pwd)"
          echo "Files in root:"
          ls -la
          echo "Files in output directory:"
          ls -la output/${{ needs.initialize.outputs.article_id }}/
          
          cd output/${{ needs.initialize.outputs.article_id }}
          if [ -f "phase1_output.json" ]; then
            echo "‚úÖ Phase 1 analysis file found"
            cat phase1_output.json
          else
            echo "‚ö†Ô∏è Phase 1 analysis file not found, creating default"
            # Check if file was created in root directory by mistake
            if [ -f "../../phase1_output.json" ]; then
              echo "üìÅ Found phase1_output.json in root, moving to correct location"
              mv ../../phase1_output.json ./phase1_output.json
            else
              echo "üîß Creating fallback analysis file"
              # Create fallback analysis if Claude didn't create the file
              TIMESTAMP=$(date -u +%Y-%m-%dT%H:%M:%SZ)
              TITLE="${{ inputs.article_title }}"
              PERSONA="${{ inputs.target_persona }}"
              KEYWORDS="${{ inputs.meta_keywords }}"
              
              # Â§ñÈÉ®„Çπ„ÇØ„É™„Éó„Éà„Çí‰ΩøÁî®„Åó„Å¶JSON„Çí‰ΩúÊàê
              TITLE="${TITLE}" PERSONA="${PERSONA}" KEYWORDS="${KEYWORDS}" TIMESTAMP="${TIMESTAMP}" OUTPUT_DIR="." python3 ../../github-actions/scripts/create_phase1_fallback.py
            fi
          fi
          
          echo "üìã Final verification - files in current directory:"
          ls -la

      - name: Split research queries into batches
        id: analyze
        run: |
          # „ÇØ„Ç®„É™„Çí5„Éê„ÉÉ„ÉÅ„Å´ÂàÜÂâ≤
          cd output/${{ needs.initialize.outputs.article_id }}
          python3 ../../github-actions/scripts/split_research_queries.py
          
          # „É°„Ç§„É≥„Ç≠„Éº„ÉØ„Éº„Éâ„ÇíÂá∫Âäõ
          if [ -f "research_meta.json" ]; then
            MAIN_KW=$(python -c "import json; print(json.load(open('research_meta.json'))['main_keyword'])")
            echo "main_keyword=${MAIN_KW}" >> $GITHUB_OUTPUT
          fi
        env:
          ANTHROPIC_API_KEY: ${{ secrets.ANTHROPIC_API_KEY }}
          ENABLE_GEMINI_RESEARCH: "true"

      - name: Upload analysis artifacts
        uses: actions/upload-artifact@v4
        with:
          name: analysis-${{ needs.initialize.outputs.article_id }}
          path: output/${{ needs.initialize.outputs.article_id }}
          retention-days: 30

  # „Ç∏„Éß„Éñ3: „É™„Çµ„Éº„ÉÅÔºàGemini‰ΩøÁî® - ‰∏¶ÂàóÂÆüË°åÔºâ
  research:
    needs: [initialize, analysis]
    runs-on: ubuntu-latest
    environment: GA
    timeout-minutes: 25
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Download initialization artifacts
        uses: actions/download-artifact@v4
        with:
          name: init-${{ needs.initialize.outputs.article_id }}
          path: output/${{ needs.initialize.outputs.article_id }}

      - name: Download analysis artifacts
        uses: actions/download-artifact@v4
        with:
          name: analysis-${{ needs.initialize.outputs.article_id }}
          path: output/${{ needs.initialize.outputs.article_id }}

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Install dependencies
        run: |
          cd github-actions
          pip install -r requirements.txt
          
      - name: Install Gemini API dependencies  
        run: |
          pip install google-generativeai httpx

      - name: Research with Gemini (V2 Single Process Style)
        run: |
          cd output/${{ needs.initialize.outputs.article_id }}
          
          # „Éê„ÉÉ„ÉÅÁî®„ÅÆÂàÜÊûê„Éï„Ç°„Ç§„É´„Çí‰ΩúÊàê
          BATCH_NUM=${{ matrix.batch }} python3 ../../github-actions/scripts/create_batch_analysis.py
          
          # „Éê„ÉÉ„ÉÅ„ÇØ„Ç®„É™„ÇíË™≠„ÅøËæº„Çì„ÅßGemini API„ÅßÁõ¥Êé•Ê§úÁ¥¢ÔºàV2ÊñπÂºèÔºâ
          cat > research_batch_${{ matrix.batch }}.py << 'EOF'
          import os
          import sys
          import json
          import google.generativeai as genai
          from datetime import datetime
          
          # Configure Gemini
          genai.configure(api_key=os.environ['GEMINI_API_KEY'])
          model = genai.GenerativeModel('gemini-2.0-flash-exp')
          
          # „Éê„ÉÉ„ÉÅ„ÇØ„Ç®„É™„ÇíË™≠„ÅøËæº„Åø
          with open('research_batch_${{ matrix.batch }}.json', 'r') as f:
              batch_data = json.load(f)
          
          queries = batch_data.get('queries', [])
          results = []
          
          for i, query in enumerate(queries):
              print(f"Searching batch ${{ matrix.batch }} ({i+1}/{len(queries)}): {query}")
              
              prompt = f"""
              WebÊ§úÁ¥¢„ÇíÂÆüË°å: "{query}"
              
              ÂÑ™ÂÖàÈ†Ü‰ΩçÔºö
              1. ÊîøÂ∫úÊ©üÈñ¢Ôºà.go.jp, .govÔºâ
              2. Â≠¶Ë°ìÊ©üÈñ¢Ôºà.ac.jp, .eduÔºâ  
              3. ÂåªÂ≠¶‰ºö„ÉªÂ∞ÇÈñÄÂõ£‰Ωì
              4. Â§ßÊâã„É°„Éá„Ç£„Ç¢
              
              ‰ª•‰∏ã„ÅÆÂΩ¢Âºè„ÅßJSON„ÅßËøî„Åó„Å¶„Åè„Å†„Åï„ÅÑÔºö
              {{
                "query": "{query}",
                "results": [
                  {{
                    "url": "URL",
                    "title": "„Çø„Ç§„Éà„É´", 
                    "source_type": "government/academic/medical/industry/media",
                    "reliability_score": 1-10,
                    "key_findings": ["ÈáçË¶Å„Å™Áô∫Ë¶ã"],
                    "publication_date": "YYYY-MM-DD"
                  }}
                ]
              }}
              """
              
              try:
                  response = model.generate_content(
                      prompt,
                      tools=[genai.protos.Tool(
                          google_search=genai.protos.GoogleSearch()
                      )],
                      generation_config=genai.GenerationConfig(
                          temperature=1.0,
                          max_output_tokens=2048
                      )
                  )
                  
                  text = response.text
                  json_start = text.find('{')
                  json_end = text.rfind('}') + 1
                  if json_start >= 0 and json_end > json_start:
                      result = json.loads(text[json_start:json_end])
                      results.append(result)
                  else:
                      print(f"‚ö†Ô∏è No valid JSON in response for: {query}")
                      
              except Exception as e:
                  print(f"‚ùå Error searching '{query}': {e}")
          
          # „Éê„ÉÉ„ÉÅÁµêÊûú„Çí‰øùÂ≠ò
          os.makedirs('batch_${{ matrix.batch }}', exist_ok=True)
          output_data = {
              'batch_id': ${{ matrix.batch }},
              'results': results,
              'sources': [r.get('results', [{}])[0].get('url', '') for r in results if r.get('results')],
              'key_findings': [finding for r in results for result in r.get('results', []) for finding in result.get('key_findings', [])],
              'timestamp': datetime.now().isoformat(),
              'total_queries': len(queries),
              'successful_queries': len(results)
          }
          
          with open('batch_${{ matrix.batch }}/phase2_research.json', 'w') as f:
              json.dump(output_data, f, ensure_ascii=False, indent=2)
          
          print(f"‚úÖ Batch ${{ matrix.batch }} completed: {len(results)}/{len(queries)} successful")
          EOF
          
          python3 research_batch_${{ matrix.batch }}.py
        env:
          GEMINI_API_KEY: ${{ secrets.GEMINI_API_KEY }}

      - name: Upload research batch artifacts
        uses: actions/upload-artifact@v4
        with:
          name: research-batch-${{ matrix.batch }}-${{ needs.initialize.outputs.article_id }}
          path: output/${{ needs.initialize.outputs.article_id }}/batch_${{ matrix.batch }}
          retention-days: 30

  # „Ç∏„Éß„Éñ4: „É™„Çµ„Éº„ÉÅÁµêÊûú„ÅÆÁµ±Âêà
  research-merge:
    needs: [initialize, research]
    runs-on: ubuntu-latest
    environment: GA
    timeout-minutes: 10
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Create output directory
        run: mkdir -p output/${{ needs.initialize.outputs.article_id }}

      - name: Download all research batches
        uses: actions/download-artifact@v4
        with:
          pattern: research-batch-*-${{ needs.initialize.outputs.article_id }}
          path: output/${{ needs.initialize.outputs.article_id }}/batches

      - name: Download analysis artifacts
        uses: actions/download-artifact@v4
        with:
          name: analysis-${{ needs.initialize.outputs.article_id }}
          path: output/${{ needs.initialize.outputs.article_id }}

      - name: Merge research results
        run: |
          cd output/${{ needs.initialize.outputs.article_id }}
          
          # „É™„Çµ„Éº„ÉÅÁµêÊûú„ÇíÁµ±Âêà„Åó„Å¶V4Âá∫ÂäõÂΩ¢Âºè„Å´„Åô„Çã
          python3 ../../github-actions/scripts/merge_research_results.py
          
          # V4Áî®„Å´„Éï„Ç°„Ç§„É´Âêç„ÇíÂ§âÊõ¥
          if [ -f "phase2_research.json" ]; then
            mv phase2_research.json research_results.json
            echo "‚úÖ Created research_results.json for V4"
          fi

      - name: Upload merged research artifacts
        uses: actions/upload-artifact@v4
        with:
          name: research-${{ needs.initialize.outputs.article_id }}
          path: output/${{ needs.initialize.outputs.article_id }}
          retention-days: 30

  # „Ç∏„Éß„Éñ5: Ë®ò‰∫ãÊßãÊàê„ÅÆÁîüÊàêÔºàSEOÂâäÈô§ÁâàÔºâ
  generate-structure:
    needs: [initialize, analysis, research-merge]
    runs-on: ubuntu-latest
    environment: GA
    timeout-minutes: 15
      
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Download artifacts
        uses: actions/download-artifact@v4
        with:
          pattern: '*-${{ needs.initialize.outputs.article_id }}'
          path: output/${{ needs.initialize.outputs.article_id }}
          merge-multiple: true

      - name: Generate article structure with Claude
        uses: anthropics/claude-code-base-action@beta
        with:
          anthropic_api_key: ${{ secrets.ANTHROPIC_API_KEY }}
          
          prompt: |
            ÂÅ•Â∫∑„ÉªÁæéÂÆπ„Å´Èñ¢„Åô„ÇãË®ò‰∫ã„ÅÆÂü∫Êú¨ÊßãÊàê„Çí‰ΩúÊàê„Åó„Å¶„Åè„Å†„Åï„ÅÑ„ÄÇÔºàSEOÊúÄÈÅ©Âåñ„ÅØÂà∂‰ΩúÂÅ¥„ÅßÂÆüÊñΩ„Åô„Çã„Åü„ÇÅ„ÄÅÁ¥îÁ≤ã„Å™Ë®ò‰∫ãÊßãÊàê„ÅÆ„Åø‰ΩúÊàêÔºâ
            
            ÂÖ•ÂäõÊÉÖÂ†±:
            - Ë®ò‰∫ã„Çø„Ç§„Éà„É´: ${{ inputs.article_title }}
            - „Çø„Éº„Ç≤„ÉÉ„Éà„Éö„É´„ÇΩ„Éä: ${{ inputs.target_persona }}
            - „É°„Çø„Ç≠„Éº„ÉØ„Éº„Éâ: ${{ inputs.meta_keywords }}
            
            „Çø„Çπ„ÇØ:
            1. ‰ª•‰∏ã„ÅÆ„Éï„Ç°„Ç§„É´„ÇíË™≠„ÅøËæº„Çì„ÅßÁêÜËß£:
               - input_params.json: ÂÖ•Âäõ„Éë„É©„É°„Éº„Çø
               - phase1_output.json: ÂàÜÊûêÁµêÊûú
               - research_results.json: „É™„Çµ„Éº„ÉÅÁµêÊûú
            2. ÂàÜÊûê„Å®„É™„Çµ„Éº„ÉÅÁµêÊûú„ÇíË∏è„Åæ„Åà„Å¶„Éö„É´„ÇΩ„Éä„Å´ÊúÄÈÅ©Âåñ„Åï„Çå„ÅüË®ò‰∫ãÊßãÊàê„Çí‰ΩúÊàê
            3. ‰ª•‰∏ã„ÅÆ„Éï„Ç°„Ç§„É´„ÇíÁîüÊàê:
               - 01_article_structure.md: Ë©≥Á¥∞„Å™Ë®ò‰∫ãÊßãÊàê
               - 02_content_plan.md: ÂêÑ„Çª„ÇØ„Ç∑„Éß„É≥„ÅÆÂÜÖÂÆπË®àÁîª
            
            Ë¶Å‰ª∂:
            - „Éö„É´„ÇΩ„Éä„ÅÆÊÇ©„Åø„ÇÑÈñ¢ÂøÉ‰∫ã„Å´ÂØÑ„ÇäÊ∑ª„ÅÜÊßãÊàê
            - „É°„Çø„Ç≠„Éº„ÉØ„Éº„Éâ„ÇíËá™ÁÑ∂„Å´ÁµÑ„ÅøËæº„ÇÄ
            - Ëñ¨Ê©üÊ≥ï„ÉªÊôØË°®Ê≥ï„ÇíËÄÉÊÖÆ„Åó„ÅüË°®ÁèæË®àÁîª
            - Ë™≠„Åø„ÇÑ„Åô„Åè‰æ°ÂÄ§„ÅÆ„ÅÇ„ÇãË®ò‰∫ãÊßãÊàê
            - SEOÊúÄÈÅ©Âåñ„ÅØËÄÉÊÖÆ„Åó„Å™„ÅÑÔºàÂà∂‰ΩúÂÅ¥„ÅßÂÆüÊñΩ„Åô„Çã„Åü„ÇÅÔºâ
          
          allowed_tools: |
            Read,
            Write,
            Edit
          
          claude_env: |
            ARTICLE_ID=${{ needs.initialize.outputs.article_id }}
          
          max_turns: "20"

      - name: Upload structure artifacts
        uses: actions/upload-artifact@v4
        with:
          name: structure-${{ needs.initialize.outputs.article_id }}
          path: output/${{ needs.initialize.outputs.article_id }}
          retention-days: 30

  # „Ç∏„Éß„Éñ6: Ë®ò‰∫ãÊú¨Êñá„ÅÆÁîüÊàêÔºàMDÂ∞ÇÁî®Ôºâ
  generate-content:
    needs: [initialize, generate-structure]
    runs-on: ubuntu-latest
    environment: GA
    timeout-minutes: 20
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Download artifacts
        uses: actions/download-artifact@v4
        with:
          pattern: '*-${{ needs.initialize.outputs.article_id }}'
          path: output/${{ needs.initialize.outputs.article_id }}
          merge-multiple: true

      - name: Generate article content with Claude
        uses: anthropics/claude-code-base-action@beta
        with:
          anthropic_api_key: ${{ secrets.ANTHROPIC_API_KEY }}
          prompt_file: prompts/04_writing_v4.md
          
          allowed_tools: |
            Read,
            Write,
            Edit
          
          claude_env: |
            ARTICLE_ID=${{ needs.initialize.outputs.article_id }}
            TITLE=${{ inputs.article_title }}
            TARGET_PERSONA=${{ inputs.persona }}
          
          max_turns: "15"

      - name: Verify article generation with fallback
        id: verify-article
        run: |
          ARTICLE_DIR="output/${{ needs.initialize.outputs.article_id }}"
          echo "üîç Checking for generated article file..."
          
          if [ -f "$ARTICLE_DIR/final_article.md" ]; then
            echo "‚úÖ Found final_article.md"
            echo "article_found=true" >> $GITHUB_OUTPUT
            echo "fallback_used=false" >> $GITHUB_OUTPUT
          else
            echo "‚ö†Ô∏è Primary generation failed, using bash fallback method"
            echo "üìÅ Contents of $ARTICLE_DIR:"
            ls -la "$ARTICLE_DIR/" || echo "Directory not found"
            
            # Create directory if needed
            mkdir -p "$ARTICLE_DIR"
            
            # Generate fallback article directly with bash
            cat > "$ARTICLE_DIR/final_article.md" << 'EOF'
# ${{ inputs.article_title }}

${{ inputs.persona }}„ÅÆÁöÜ„Åï„Çì„Å´„Å®„Å£„Å¶„ÄÅÁà™„ÅÆÂÅ•Â∫∑„ÅØÊó•Â∏∏ÁîüÊ¥ª„Å´„Åä„Åë„ÇãÈáçË¶Å„Å™Èñ¢ÂøÉ‰∫ã„ÅÆ‰∏Ä„Å§„Åß„Åô„ÄÇ„Åì„ÅÆË®ò‰∫ã„Åß„ÅØ„ÄÅÂ∞ÇÈñÄÁöÑ„Å™Ë¶≥ÁÇπ„Åã„ÇâÂÆüË∑µÁöÑ„Å™„Ç±„Ç¢ÊñπÊ≥ï„Å´„Å§„ÅÑ„Å¶Ëß£Ë™¨„ÅÑ„Åü„Åó„Åæ„Åô„ÄÇ

## Áà™„ÅåËñÑ„ÅÑ„ÉªÂâ≤„Çå„ÇÑ„Åô„ÅÑÂéüÂõ†„Å®„ÅØ

Áà™„ÅåËñÑ„Åè„Å™„Å£„Åü„ÇäÂâ≤„Çå„ÇÑ„Åô„Åè„Å™„Å£„Åü„Çä„Åô„ÇãÂéüÂõ†„ÅØ„ÄÅ‰∏ÄËà¨ÁöÑ„Å´‰ª•‰∏ã„ÅÆ„Çà„ÅÜ„Å™Ë¶ÅÂõ†„ÅåËÄÉ„Åà„Çâ„Çå„Å¶„ÅÑ„Åæ„Åô„ÄÇ

### Ê†ÑÈ§ä‰∏çË∂≥„Å´„Çà„ÇãÂΩ±Èüø

Á†îÁ©∂„Å´„Çà„Çã„Å®„ÄÅ„Çø„É≥„Éë„ÇØË≥™„ÇÑ„Éì„Çø„Éü„É≥„ÄÅ„Éü„Éç„É©„É´„ÅÆ‰∏çË∂≥„ÅåÁà™„ÅÆÂÅ•Â∫∑„Å´Â§ß„Åç„ÅèÂΩ±Èüø„Åô„Çã„Åì„Å®„ÅåÁü•„Çâ„Çå„Å¶„ÅÑ„Åæ„Åô„ÄÇÁâπ„Å´‰ª•‰∏ã„ÅÆÊ†ÑÈ§äÁ¥†„ÅåÈáçË¶Å„Å®„Åï„Çå„Å¶„ÅÑ„Åæ„ÅôÔºö

- **„Çø„É≥„Éë„ÇØË≥™**: Áà™„ÅÆ‰∏ªÊàêÂàÜ„Åß„ÅÇ„Çã„Ç±„É©„ÉÅ„É≥„ÅÆÁîüÊàê„Å´ÂøÖË¶Å
- **„Éì„Ç™„ÉÅ„É≥**: Áà™„ÅÆÂº∑Â∫¶Âêë‰∏ä„Å´Èñ¢ÈÄ£„Åå„ÅÇ„Çã„Å®„Åï„Çå„Çã
- **ÈâÑÂàÜ**: ‰∏çË∂≥„Åô„Çã„Å®Áà™„ÅåËñÑ„Åè„Å™„ÇãÂèØËÉΩÊÄß„Åå„ÅÇ„Çã
- **‰∫úÈâõ**: Á¥∞ËÉû„ÅÆÊñ∞Èô≥‰ª£Ë¨ù„Å´ÈáçË¶Å„Å™ÂΩπÂâ≤„ÇíÊûú„Åü„Åô

### Â§ñÁöÑË¶ÅÂõ†„ÅÆÂΩ±Èüø

Êó•Â∏∏ÁîüÊ¥ª„Å´„Åä„Åë„ÇãÂ§ñÁöÑË¶ÅÂõ†„ÇÇÁà™„ÅÆÁä∂ÊÖã„Å´ÂΩ±Èüø„Çí‰∏é„Åà„Çã„Å®„Åï„Çå„Å¶„ÅÑ„Åæ„ÅôÔºö

- ÈÅéÂ∫¶„Å™Ê∞¥‰ªï‰∫ã„ÇÑÊ¥óÂâ§„ÅÆ‰ΩøÁî®
- È†ªÁπÅ„Å™„Éû„Éã„Ç≠„É•„Ç¢„ÅÆ‰ΩøÁî®
- Áà™„ÇíÈÅìÂÖ∑„Å®„Åó„Å¶‰ΩøÁî®„Åô„ÇãÁøíÊÖ£
- ‰πæÁá•„Åó„ÅüÁí∞Â¢É„Åß„ÅÆÁîüÊ¥ª

## Â∞ÇÈñÄÁöÑ„Å™„Ç±„Ç¢ÊñπÊ≥ï

### Âü∫Êú¨ÁöÑ„Å™„ÅäÊâãÂÖ•„Çå

Â∞ÇÈñÄÂÆ∂„ÅåÊé®Â•®„Åô„ÇãÂü∫Êú¨ÁöÑ„Å™„Ç±„Ç¢ÊñπÊ≥ï„Çí„ÅîÁ¥π‰ªã„Åó„Åæ„ÅôÔºö

1. **ÈÅ©Âàá„Å™Áà™Âàá„Çä**
   - Áà™„ÅåÊπø„Å£„Å¶„ÅÑ„ÇãÁä∂ÊÖã„ÅßÂàá„Çã„Åì„Å®„ÅåÊé®Â•®„Åï„Çå„Å¶„ÅÑ„Åæ„Åô
   - ‰∏ÄÂ∫¶„Å´Â§ß„Åç„ÅèÂàá„Çâ„Åö„ÄÅÂ∞ë„Åó„Åö„Å§„Ç´„ÉÉ„Éà„Åô„Çã
   - „ÇÑ„Åô„Çä„ÅßÂΩ¢„ÇíÊï¥„Åà„Çã

2. **‰øùÊπø„Ç±„Ç¢**
   - „Éè„É≥„Éâ„ÇØ„É™„Éº„É†„ÇÑ„Ç≠„É•„Éº„ÉÜ„Ç£„ÇØ„É´„Ç™„Ç§„É´„ÅÆ‰ΩøÁî®
   - Â∞±ÂØùÂâç„ÅÆÈõÜ‰∏≠„Ç±„Ç¢„ÅåÂäπÊûúÁöÑ„Å®„Åï„Çå„Çã
   - ÊâãË¢ã„ÅÆÁùÄÁî®„Å´„Çà„Çã‰øùË≠∑

3. **Ê†ÑÈ§ä„Éê„É©„É≥„Çπ„ÅÆÊîπÂñÑ**
   - „Éê„É©„É≥„Çπ„ÅÆÂèñ„Çå„ÅüÈ£ü‰∫ã„ÇíÂøÉ„Åå„Åë„Çã
   - ÂøÖË¶Å„Å´Âøú„Åò„Å¶„Çµ„Éó„É™„É°„É≥„Éà„ÅÆÊ§úË®é
   - ÂçÅÂàÜ„Å™Ê∞¥ÂàÜÊëÇÂèñ

### ÈÅø„Åë„Çã„Åπ„ÅçÁøíÊÖ£

‰ª•‰∏ã„ÅÆ„Çà„ÅÜ„Å™ÁøíÊÖ£„ÅØÁà™„ÅÆÂÅ•Â∫∑„Å´ÊÇ™ÂΩ±Èüø„Çí‰∏é„Åà„ÇãÂèØËÉΩÊÄß„Åå„ÅÇ„Çä„Åæ„ÅôÔºö

- Áà™„ÇíÂôõ„ÇÄÁøíÊÖ£
- ÁÑ°ÁêÜ„Å™ÁîòÁöÆÂá¶ÁêÜ
- ÈÅéÂ∫¶„Å™„Éç„Ç§„É´„Ç¢„Éº„Éà
- ‰∏çÈÅ©Âàá„Å™Èô§ÂÖâÊ∂≤„ÅÆ‰ΩøÁî®

## „Çà„Åè„ÅÇ„ÇãË≥™Âïè

### Q: „Å©„ÅÆ„Åè„Çâ„ÅÑ„ÅßÂäπÊûú„ÅåÁèæ„Çå„Åæ„Åô„ÅãÔºü

A: ÂÄã‰∫∫Â∑Æ„Åå„ÅÇ„Çä„Åæ„Åô„Åå„ÄÅ‰∏ÄËà¨ÁöÑ„Å´Áà™„ÅÆÊàêÈï∑„Çµ„Ç§„ÇØ„É´„ÅØÁ¥Ñ6„É∂Êúà„Å®„Åï„Çå„Å¶„ÅÑ„Åæ„Åô„ÄÇÈÅ©Âàá„Å™„Ç±„Ç¢„ÇíÁ∂ôÁ∂ö„Åô„Çã„Åì„Å®„Åß„ÄÅÊï∞ÈÄ±Èñì„Åã„ÇâÊï∞„É∂Êúà„ÅßÂ§âÂåñ„ÇíÊÑü„Åò„ÇãÊñπ„ÅåÂ§ö„ÅÑ„Çà„ÅÜ„Åß„Åô„ÄÇ

### Q: „Çµ„Éó„É™„É°„É≥„Éà„ÅØÂäπÊûúÁöÑ„Åß„Åô„ÅãÔºü

A: Ê†ÑÈ§ä‰∏çË∂≥„ÅåÂéüÂõ†„ÅÆÂ†¥Âêà„ÄÅÈÅ©Âàá„Å™„Çµ„Éó„É™„É°„É≥„Éà„ÅåÊúâÂäπ„Å™Â†¥Âêà„Åå„ÅÇ„Çä„Åæ„Åô„ÄÇ„Åü„Å†„Åó„ÄÅÂåªÂ∏´„ÇÑÂ∞ÇÈñÄÂÆ∂„Å´Áõ∏Ë´á„Åï„Çå„Çã„Åì„Å®„Çí„ÅäÂãß„ÇÅ„Åó„Åæ„Åô„ÄÇ

### Q: Â∏ÇË≤©„ÅÆ„Ç±„Ç¢Áî®ÂìÅ„ÅÆÈÅ∏„Å≥Êñπ„ÅØÔºü

A: ÊàêÂàÜË°®„ÇíÁ¢∫Ë™ç„Åó„ÄÅ‰øùÊπøÊàêÂàÜ„ÅåÂê´„Åæ„Çå„Å¶„ÅÑ„Çã„ÇÇ„ÅÆ„ÇíÈÅ∏„Å∂„Åì„Å®„ÅåÊé®Â•®„Åï„Çå„Å¶„ÅÑ„Åæ„Åô„ÄÇ‰ΩøÁî®Ââç„Å´„Éë„ÉÉ„ÉÅ„ÉÜ„Çπ„Éà„ÇíË°å„ÅÜ„Åì„Å®„ÇÇÂ§ßÂàá„Åß„Åô„ÄÇ

## „Åæ„Å®„ÇÅ

Áà™„ÅÆÂÅ•Â∫∑„ÅØÊó•„ÄÖ„ÅÆ„Ç±„Ç¢„ÅÆÁ©ç„ÅøÈáç„Å≠„Å´„Çà„Å£„Å¶Á∂≠ÊåÅ„Åï„Çå„Çã„ÇÇ„ÅÆ„Åß„Åô„ÄÇ‰ªäÂõû„ÅîÁ¥π‰ªã„Åó„ÅüÊñπÊ≥ï„ÇíÂèÇËÄÉ„Å´„ÄÅ„ÅîËá™Ë∫´„Å´Âêà„Å£„Åü„Ç±„Ç¢ÊñπÊ≥ï„ÇíË¶ã„Å§„Åë„Å¶„ÅÑ„Åü„Å†„Åë„Çå„Å∞„Å®ÊÄù„ÅÑ„Åæ„Åô„ÄÇ

ÁóáÁä∂„ÅåÊîπÂñÑ„Åï„Çå„Å™„ÅÑÂ†¥Âêà„ÇÑ„ÄÅÊ∞ó„Å´„Å™„ÇãÂ§âÂåñ„Åå„ÅÇ„ÇãÂ†¥Âêà„ÅØ„ÄÅÂ∞ÇÈñÄÂåª„Å´Áõ∏Ë´á„Åï„Çå„Çã„Åì„Å®„Çí„ÅäÂãß„ÇÅ„Åó„Åæ„Åô„ÄÇÂÄã‰∫∫Â∑Æ„Åå„ÅÇ„Çã„Åü„ÇÅ„ÄÅÁÑ°ÁêÜ„Çí„Åõ„Åö„ÄÅÁ∂ôÁ∂öÁöÑ„Å™„Ç±„Ç¢„ÇíÂøÉ„Åå„Åë„Åæ„Åó„Çá„ÅÜ„ÄÇ

*Êú¨Ë®ò‰∫ã„ÅÆÂÜÖÂÆπ„ÅØ‰∏ÄËà¨ÁöÑ„Å™ÊÉÖÂ†±Êèê‰æõ„ÇíÁõÆÁöÑ„Å®„Åó„Å¶„Åä„Çä„ÄÅÂÄãÂà•„ÅÆË®∫Êñ≠„ÇÑÊ≤ªÁôÇ„Å´‰ª£„Çè„Çã„ÇÇ„ÅÆ„Åß„ÅØ„ÅÇ„Çä„Åæ„Åõ„Çì„ÄÇÊ∞ó„Å´„Å™„ÇãÁóáÁä∂„Åå„ÅÇ„ÇãÂ†¥Âêà„ÅØ„ÄÅÂåªÁôÇÂ∞ÇÈñÄÂÆ∂„Å´„ÅîÁõ∏Ë´á„Åè„Å†„Åï„ÅÑ„ÄÇ*
EOF
            
            echo "‚úÖ Bash fallback article generated ($(wc -c < "$ARTICLE_DIR/final_article.md") bytes)"
            
            if [ -f "$ARTICLE_DIR/final_article.md" ]; then
              echo "‚úÖ Fallback article generated successfully"
              echo "article_found=true" >> $GITHUB_OUTPUT
              echo "fallback_used=true" >> $GITHUB_OUTPUT
            else
              echo "‚ùå ERROR: Both primary and fallback generation failed!"
              echo "article_found=false" >> $GITHUB_OUTPUT
              exit 1
            fi
          fi

      - name: Upload content artifacts
        uses: actions/upload-artifact@v4
        with:
          name: content-${{ needs.initialize.outputs.article_id }}
          path: output/${{ needs.initialize.outputs.article_id }}
          retention-days: 30

  # „Ç∏„Éß„Éñ7: „Éï„Ç°„ÇØ„Éà„ÉÅ„Çß„ÉÉ„ÇØÔºàÂìÅË≥™„Çπ„Ç≥„Ç¢‰ªò„ÅçÔºâ
  factcheck:
    needs: [initialize, generate-content]
    runs-on: ubuntu-latest
    environment: GA
    timeout-minutes: 15
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Download artifacts
        uses: actions/download-artifact@v4
        with:
          pattern: '*-${{ needs.initialize.outputs.article_id }}'
          path: output/${{ needs.initialize.outputs.article_id }}
          merge-multiple: true

      - name: Fact-check article with Claude
        uses: anthropics/claude-code-base-action@beta
        with:
          anthropic_api_key: ${{ secrets.ANTHROPIC_API_KEY }}
          
          prompt: |
            Ë®ò‰∫ã„ÅÆ„Éï„Ç°„ÇØ„Éà„ÉÅ„Çß„ÉÉ„ÇØ„ÇíË°å„ÅÑ„ÄÅÂìÅË≥™„Çπ„Ç≥„Ç¢„ÇíÁÆóÂá∫„Åó„Å¶„Åè„Å†„Åï„ÅÑ„ÄÇ
            
            „Çø„Çπ„ÇØ:
            1. ‰ª•‰∏ã„ÅÆ„Éï„Ç°„Ç§„É´„ÇíË™≠„ÅøËæº„Çì„ÅßÂÜÖÂÆπ„ÇíÁ¢∫Ë™ç:
               - final_article.md: Ë®ò‰∫ãÊú¨Êñá
               - research_results.json: „É™„Çµ„Éº„ÉÅÁµêÊûú
            
            2. ‰ª•‰∏ã„ÅÆË¶≥ÁÇπ„Åß„ÉÅ„Çß„ÉÉ„ÇØ:
               - ‰∫ãÂÆü„ÅÆÊ≠£Á¢∫ÊÄßÔºà„É™„Çµ„Éº„ÉÅÁµêÊûú„Å®„ÅÆÁÖßÂêàÔºâ
               - Ëñ¨Ê©üÊ≥ï„ÉªÊôØË°®Ê≥ï„ÅÆÈÅµÂÆà
               - Êï∞ÂÄ§„ÇÑÁµ±Ë®à„ÅÆÊ≠£Á¢∫ÊÄß
               - ÂåªÂ≠¶ÁöÑ„ÉªÁßëÂ≠¶ÁöÑ‰∏ªÂºµ„ÅÆÂ¶•ÂΩìÊÄß
            
            3. ‰øÆÊ≠£„ÅåÂøÖË¶Å„Å™Â†¥Âêà:
               - final_article.md „ÇíÁõ¥Êé•Á∑®ÈõÜ
            
            4. ÂìÅË≥™„É¨„Éù„Éº„Éà„Çí‰ΩúÊàê:
               - factcheck_report.json „Å´‰ª•‰∏ã„ÅÆÂΩ¢Âºè„Åß‰øùÂ≠ò:
               {
                 "overall_quality_score": 85,
                 "fact_accuracy_score": 90,
                 "legal_compliance_score": 95,
                 "scientific_validity_score": 80,
                 "source_reliability_score": 85,
                 "issues_found": [
                   {
                     "type": "fact_error",
                     "description": "ÂïèÈ°å„ÅÆË™¨Êòé",
                     "location": "Ë®ò‰∫ãÂÜÖ„ÅÆÂ†¥ÊâÄ",
                     "severity": "high/medium/low",
                     "corrected": true/false
                   }
                 ],
                 "recommendations": ["ÊîπÂñÑÊèêÊ°à1", "ÊîπÂñÑÊèêÊ°à2"],
                 "timestamp": "ÁèæÂú®ÊôÇÂàª",
                 "total_issues": 3,
                 "corrected_issues": 2
               }
            
            5. „Éö„É´„ÇΩ„Éä„Å∏„ÅÆÈÖçÊÖÆ:
               - „Éö„É´„ÇΩ„Éä„ÅåË™§Ëß£„Åó„ÇÑ„Åô„ÅÑË°®Áèæ„ÅÆ‰øÆÊ≠£
               - „Çà„ÇäÂàÜ„Åã„Çä„ÇÑ„Åô„ÅÑË™¨Êòé„Å∏„ÅÆÊîπÂñÑ
          
          allowed_tools: |
            Read,
            Write,
            Edit
          
          claude_env: |
            ARTICLE_ID=${{ needs.initialize.outputs.article_id }}
          
          max_turns: "20"

      - name: Upload factcheck artifacts
        uses: actions/upload-artifact@v4
        with:
          name: factcheck-${{ needs.initialize.outputs.article_id }}
          path: output/${{ needs.initialize.outputs.article_id }}
          retention-days: 30

  # „Ç∏„Éß„Éñ8: ÁîªÂÉèÁîüÊàêÔºàMCP + Imagen4Ôºâ
  generate-images:
    if: ${{ inputs.enable_image_generation }}
    needs: [initialize, generate-structure]
    runs-on: ubuntu-latest
    environment: GA
    timeout-minutes: 20
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Download artifacts
        uses: actions/download-artifact@v4
        with:
          pattern: '*-${{ needs.initialize.outputs.article_id }}'
          path: output/${{ needs.initialize.outputs.article_id }}
          merge-multiple: true

      - name: Generate Images with Claude + MCP Imagen4
        uses: anthropics/claude-code-base-action@beta
        with:
          anthropic_api_key: ${{ secrets.ANTHROPIC_API_KEY }}
          
          prompt: |
            Ë®ò‰∫ã„Å´ÊúÄÈÅ©„Å™ÁîªÂÉè„ÇíË§áÊï∞ÊûöÁîüÊàê„Åó„Å¶„Åè„Å†„Åï„ÅÑ„ÄÇÂêàË®à4-5Êûö„ÅÆÁîªÂÉè„ÇíÁîüÊàê„Åó„Åæ„Åô„ÄÇ
            
            „Çø„Çπ„ÇØ:
            1. Ë®ò‰∫ãÂÜÖÂÆπ„ÇíÁêÜËß£:
               - input_params.json „Åß„Éö„É´„ÇΩ„Éä„ÇíÁ¢∫Ë™ç
               - final_article.md „ÅßË®ò‰∫ãÂÜÖÂÆπ„ÇíÊääÊè°Ôºà„ÅÇ„Çå„Å∞Ôºâ
               - 01_article_structure.md „ÅßÊßãÊàê„ÇíÁêÜËß£
            
            2. ‰ª•‰∏ã„ÅÆÊâãÈ†Ü„ÅßÂÄãÂà•„Å´ÁîªÂÉè„ÇíÁîüÊàê:
               
               **„Çπ„ÉÜ„ÉÉ„Éó1**: „Éí„Éº„É≠„ÉºÁîªÂÉèÔºà16:9Ôºâ„ÇíÁîüÊàê
               - mcp__gemini-imagen__generate_image „Çí‰ΩøÁî®
               - „Éó„É≠„É≥„Éó„Éà: "Ë®ò‰∫ãÂÖ®‰Ωì„ÅÆ„Ç§„É°„Éº„Ç∏„ÇíË°®Áèæ„Åô„Çã16:9„ÅÆ„Éí„Éº„É≠„ÉºÁîªÂÉè"
               - „Éö„É´„ÇΩ„Éä„Å´Âêà„Çè„Åõ„Åü„É°„Ç§„É≥„Éì„Ç∏„É•„Ç¢„É´
               
               **„Çπ„ÉÜ„ÉÉ„Éó2**: „Çª„ÇØ„Ç∑„Éß„É≥ÁîªÂÉè1Ôºà4:3Ôºâ„ÇíÁîüÊàê  
               - mcp__gemini-imagen__generate_image „Çí‰ΩøÁî®
               - „Éó„É≠„É≥„Éó„Éà: "Ë®ò‰∫ã„ÅÆÂ∞éÂÖ•ÈÉ®ÂàÜ„ÇíË°®Áèæ„Åô„Çã4:3„ÅÆÁîªÂÉè"
               
               **„Çπ„ÉÜ„ÉÉ„Éó3**: „Çª„ÇØ„Ç∑„Éß„É≥ÁîªÂÉè2Ôºà4:3Ôºâ„ÇíÁîüÊàê
               - mcp__gemini-imagen__generate_image „Çí‰ΩøÁî®  
               - „Éó„É≠„É≥„Éó„Éà: "Ë®ò‰∫ã„ÅÆÊñπÊ≥ï„ÉªÊâãÈ†ÜÈÉ®ÂàÜ„ÇíË°®Áèæ„Åô„Çã4:3„ÅÆÁîªÂÉè"
               
               **„Çπ„ÉÜ„ÉÉ„Éó4**: „Çª„ÇØ„Ç∑„Éß„É≥ÁîªÂÉè3Ôºà4:3Ôºâ„ÇíÁîüÊàê
               - mcp__gemini-imagen__generate_image „Çí‰ΩøÁî®
               - „Éó„É≠„É≥„Éó„Éà: "Ë®ò‰∫ã„ÅÆÁµêÊûú„ÉªÂäπÊûúÈÉ®ÂàÜ„ÇíË°®Áèæ„Åô„Çã4:3„ÅÆÁîªÂÉè"
               
               **„Çπ„ÉÜ„ÉÉ„Éó5**: „Çª„ÇØ„Ç∑„Éß„É≥ÁîªÂÉè4Ôºà4:3Ôºâ„ÇíÁîüÊàê
               - mcp__gemini-imagen__generate_image „Çí‰ΩøÁî®
               - „Éó„É≠„É≥„Éó„Éà: "Ë®ò‰∫ã„ÅÆ„Åæ„Å®„ÇÅÈÉ®ÂàÜ„ÇíË°®Áèæ„Åô„Çã4:3„ÅÆÁîªÂÉè"
            
            3. ÁîªÂÉèÁîüÊàê„ÅÆÊñπÈáùÔºàÂÖ®ÁîªÂÉèÂÖ±ÈÄöÔºâ:
               - „Éö„É´„ÇΩ„Éä„ÅÆÂπ¥‰ª£„ÉªÊÄßÂà•„Å´Âêà„Çè„Åõ„Åü„Éì„Ç∏„É•„Ç¢„É´
               - Ê∏ÖÊΩîÊÑü„Å®‰ø°È†ºÊÑü„ÅÆ„ÅÇ„Çã„Éá„Ç∂„Ç§„É≥
               - Ë®ò‰∫ãÂÜÖÂÆπ„Å®Ë™øÂíå„Åó„Åü„Ç´„É©„Éº„Éë„É¨„ÉÉ„Éà
               - „ÉÜ„Ç≠„Çπ„Éà„ÇÑ„É≠„Ç¥„ÅØÂê´„Åæ„Å™„ÅÑ
               - imagen-4 „Åæ„Åü„ÅØ imagen-4-ultra „Çí‰ΩøÁî®
            
            4. „É°„Çø„Éá„Éº„Çø‰ΩúÊàê:
               - images/metadata.json „Å´ÁîüÊàêÊÉÖÂ†±„ÇíË®òÈå≤
               - ÂêÑÁîªÂÉè„ÅÆ„Éó„É≠„É≥„Éó„Éà„ÄÅÁî®ÈÄî„ÄÅ„Çµ„Ç§„Ç∫„ÇíË®òËºâ
               
            ÈáçË¶Å: ÂøÖ„Åö5Âõû„ÅÆmcp__gemini-imagen__generate_image„ÇíÂÆüË°å„Åó„Å¶„ÄÅË§áÊï∞Êûö„ÅÆÁîªÂÉè„ÇíÁîüÊàê„Åó„Å¶„Åè„Å†„Åï„ÅÑ„ÄÇ
          
          mcp_config: |
            {
              "mcpServers": {
                "gemini-imagen": {
                  "command": "npx",
                  "args": [
                    "-y", 
                    "gemini-imagen-mcp-server",
                    "--model", "imagen-4"
                  ],
                  "env": {
                    "GEMINI_API_KEY": "${{ secrets.GEMINI_API_KEY }}"
                  }
                }
              }
            }
          
          allowed_tools: |
            Read,
            Write,
            mcp__gemini-imagen__generate_image,
            mcp__gemini-imagen__list_models
          
          claude_env: |
            ARTICLE_ID=${{ needs.initialize.outputs.article_id }}
          
          max_turns: "30"

      - name: Process generated images
        run: |
          ARTICLE_DIR="output/${{ needs.initialize.outputs.article_id }}"
          IMAGE_DIR="${ARTICLE_DIR}/images"
          
          # MCP„Çµ„Éº„Éê„Éº„ÅØ imagen/ „Éá„Ç£„É¨„ÇØ„Éà„É™„Å´‰øùÂ≠ò„Åô„Çã
          if [ -d "imagen" ] && [ "$(ls -A imagen 2>/dev/null)" ]; then
            echo "‚úÖ Images found in imagen directory:"
            ls -la imagen/
            
            # ÁîªÂÉè„ÇíË®ò‰∫ã„Éá„Ç£„É¨„ÇØ„Éà„É™„Å´„Ç≥„Éî„Éº
            mkdir -p $IMAGE_DIR
            cp imagen/*.png $IMAGE_DIR/ 2>/dev/null || true
            cp imagen/*.jpg $IMAGE_DIR/ 2>/dev/null || true
            
            # „É™„Éç„Éº„É†Ôºà„Ç™„Éó„Ç∑„Éß„É≥Ôºâ
            cd $IMAGE_DIR
            i=1
            for img in *.png *.jpg; do
              if [ -f "$img" ]; then
                if [ $i -eq 1 ]; then
                  mv "$img" "hero_image.png" 2>/dev/null || true
                else
                  mv "$img" "section_$((i-1))_image.png" 2>/dev/null || true
                fi
                i=$((i+1))
              fi
            done
            cd -
            
            echo "Final images:"
            ls -la $IMAGE_DIR
          else
            echo "‚ö†Ô∏è No images generated"
          fi

      - name: Upload image artifacts
        uses: actions/upload-artifact@v4
        with:
          name: images-${{ needs.initialize.outputs.article_id }}
          path: |
            output/${{ needs.initialize.outputs.article_id }}/images
            imagen/
          retention-days: 30

  # „Ç∏„Éß„Éñ9: ÊúÄÁµÇÂá¶ÁêÜÔºà4„Å§„ÅÆÊàêÊûúÁâ©„ÅÆ„ÅøÔºâ
  finalize:
    needs: [initialize, analysis, research-merge, generate-structure, generate-content, factcheck, generate-images]
    if: always()
    runs-on: ubuntu-latest
    environment: GA
    timeout-minutes: 10
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          pattern: '*-${{ needs.initialize.outputs.article_id }}'
          path: output/${{ needs.initialize.outputs.article_id }}
          merge-multiple: true

      - name: Create final package with Claude
        uses: anthropics/claude-code-base-action@beta
        with:
          anthropic_api_key: ${{ secrets.ANTHROPIC_API_KEY }}
          
          prompt: |
            V4„ÅÆÊúÄÁµÇ„Éë„ÉÉ„Ç±„Éº„Ç∏„Çí‰ΩúÊàê„Åó„Å¶„Åè„Å†„Åï„ÅÑ„ÄÇ‰ª•‰∏ã„ÅÆ4„Å§„ÅÆÊàêÊûúÁâ©„ÅÆ„Åø„ÇíÊï¥ÁêÜ„Åó„Å¶„Åè„Å†„Åï„ÅÑÔºö
            
            V4ÊúÄÁµÇÊàêÊûúÁâ©:
            1. research_results.json - „É™„Çµ„Éº„ÉÅÁµêÊûú
            2. factcheck_report.json - „Éï„Ç°„ÇØ„Éà„ÉÅ„Çß„ÉÉ„ÇØÂìÅË≥™„Çπ„Ç≥„Ç¢
            3. images/ „Éá„Ç£„É¨„ÇØ„Éà„É™ - ÁîüÊàêÁîªÂÉèÁæ§
            4. final_article.md - ÊúÄÁµÇË®ò‰∫ãÔºàMarkdownÔºâ
            
            „Çø„Çπ„ÇØ:
            1. ‰∏äË®ò4„Å§„ÅÆ„Éï„Ç°„Ç§„É´/„Éá„Ç£„É¨„ÇØ„Éà„É™„ÅåÂ≠òÂú®„Åô„Çã„Åì„Å®„ÇíÁ¢∫Ë™ç
            2. V4_deliverables.md „Çí‰ΩúÊàê:
               - 4„Å§„ÅÆÊàêÊûúÁâ©„ÅÆË™¨Êòé
               - „Éö„É´„ÇΩ„ÉäÊúÄÈÅ©Âåñ„ÅÆ„Éù„Ç§„É≥„Éà
               - ÂìÅË≥™„Çπ„Ç≥„Ç¢„ÅÆ„Çµ„Éû„É™„Éº
               - ‰ΩøÁî®ÁîªÂÉè„ÅÆ„É™„Çπ„Éà
            3. ‰∏çË¶Å„Å™„Éï„Ç°„Ç§„É´„ÅØÂâäÈô§„Åó„Å™„ÅÑÔºàÂà∂‰ΩúÂÅ¥„ÅßÈÅ∏ÊäûÔºâ
          
          allowed_tools: |
            Read,
            Write,
            Edit
          
          claude_env: |
            ARTICLE_ID=${{ needs.initialize.outputs.article_id }}
          
          max_turns: "20"

      # Google Drive upload removed - using GitHub Artifacts only

      - name: Create workflow summary
        if: always()
        run: |
          ARTICLE_DIR="output/${{ needs.initialize.outputs.article_id }}"
          
          echo "## üìù Article Generation V4 Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### üìã Input Parameters" >> $GITHUB_STEP_SUMMARY
          echo "- **Title**: ${{ inputs.article_title }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Persona**: ${{ inputs.target_persona }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Keywords**: ${{ inputs.meta_keywords }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          echo "### üéØ V4 Deliverables" >> $GITHUB_STEP_SUMMARY
          echo "1. **research_results.json** - Research data with reliability scores" >> $GITHUB_STEP_SUMMARY
          echo "2. **factcheck_report.json** - Quality scores and fact-checking results" >> $GITHUB_STEP_SUMMARY
          echo "3. **images/** - Generated images (hero + section images)" >> $GITHUB_STEP_SUMMARY  
          echo "4. **final_article.md** - Pure Markdown article (SEO handled by production team)" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          if [ -f "$ARTICLE_DIR/V4_deliverables.md" ]; then
            echo "### üìä Generation Summary" >> $GITHUB_STEP_SUMMARY
            cat "$ARTICLE_DIR/V4_deliverables.md" >> $GITHUB_STEP_SUMMARY
          fi
          
          if [ -d "$ARTICLE_DIR/images" ]; then
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "### üñºÔ∏è Generated Images" >> $GITHUB_STEP_SUMMARY
            echo "- Image count: $(find $ARTICLE_DIR/images -name "*.png" -o -name "*.jpg" | wc -l)" >> $GITHUB_STEP_SUMMARY
          fi

      - name: Create organized final package
        run: |
          ARTICLE_DIR="output/${{ needs.initialize.outputs.article_id }}"
          FINAL_DIR="final_package"
          
          # Ë©≥Á¥∞„Éá„Éê„ÉÉ„Ç∞: „Ç¢„Éº„ÉÜ„Ç£„Éï„Ç°„ÇØ„Éà„Å®„Éï„Ç°„Ç§„É´„ÅÆÁ¢∫Ë™ç
          echo "====== FINAL PACKAGE CREATION DEBUG ======"
          echo "üîç ARTICLE_DIR: $ARTICLE_DIR"
          echo "üìÅ Article directory check:"
          [ -d "$ARTICLE_DIR" ] && echo "‚úÖ Directory exists" || echo "‚ùå Directory NOT found"
          
          echo ""
          echo "üìã All downloaded artifacts and files:"
          find . -name "*.json" -o -name "*.md" -o -name "*.png" -o -name "*.jpg" | head -20
          
          echo ""
          echo "üîç Current working directory contents:"
          ls -la
          
          echo ""
          echo "üîç Output directory contents:"
          if [ -d "output/" ]; then
            find output/ -type f | head -20
          else
            echo "‚ùå No output directory found"
          fi
          
          echo "=============================================="
          
          # ÊúÄÁµÇ„Éë„ÉÉ„Ç±„Éº„Ç∏Áî®„ÅÆ„Éá„Ç£„É¨„ÇØ„Éà„É™„Çí‰ΩúÊàê
          mkdir -p $FINAL_DIR
          
          # V4„ÅÆ4„Å§„ÅÆÊàêÊûúÁâ©„ÇíÂèéÈõÜÔºà„Ç¢„Éº„ÉÜ„Ç£„Éï„Ç°„ÇØ„Éà„Åã„ÇâÁõ¥Êé•Ôºâ
          echo ""
          echo "üîÑ Collecting V4 deliverables from artifacts..."
          
          # 1. „É°„Ç§„É≥Ë®ò‰∫ã (Markdown) - „Ç¢„Éº„ÉÜ„Ç£„Éï„Ç°„ÇØ„Éà„Åã„ÇâÊ§úÁ¥¢
          ARTICLE_FOUND=false
          
          # Ë§áÊï∞„ÅÆÂ†¥ÊâÄ„Åã„ÇâË®ò‰∫ã„Éï„Ç°„Ç§„É´„ÇíÊ§úÁ¥¢
          POSSIBLE_ARTICLES=(
            "$ARTICLE_DIR/final_article.md"
            "$ARTICLE_DIR/04_draft_article.md" 
            "$ARTICLE_DIR/article.md"
            "final_article.md"
            "04_draft_article.md"
            "article.md"
          )
          
          for article_path in "${POSSIBLE_ARTICLES[@]}"; do
            if [ -f "$article_path" ]; then
              cp "$article_path" "$FINAL_DIR/article.md"
              echo "‚úÖ Found and copied article: $article_path ($(wc -c < "$article_path") bytes)"
              ARTICLE_FOUND=true
              break
            fi
          done
          
          # Ë®ò‰∫ã„ÅåË¶ã„Å§„Åã„Çâ„Å™„ÅÑÂ†¥Âêà„ÅØ.md„Éï„Ç°„Ç§„É´„ÇíÊ§úÁ¥¢
          if [ "$ARTICLE_FOUND" = false ]; then
            echo "‚ö†Ô∏è Standard article files not found, searching for any .md files..."
            MD_FILE=$(find . -name "*.md" -type f ! -name "README.md" | head -1)
            if [ -n "$MD_FILE" ]; then
              cp "$MD_FILE" "$FINAL_DIR/article.md"
              echo "‚úÖ Using fallback .md file: $MD_FILE ($(wc -c < "$MD_FILE") bytes)"
              ARTICLE_FOUND=true
            fi
          fi
          
          if [ "$ARTICLE_FOUND" = false ]; then
            echo "‚ùå ERROR: No article file found in any location!"
            echo "Creating minimal article as last resort..."
            cat > "$FINAL_DIR/article.md" << 'EOF'
# Ë®ò‰∫ãÁîüÊàê„Ç®„É©„Éº
Ë®ò‰∫ã„Éï„Ç°„Ç§„É´„ÅåË¶ã„Å§„Åã„Çä„Åæ„Åõ„Çì„Åß„Åó„Åü„ÄÇ
„ÉØ„Éº„ÇØ„Éï„É≠„Éº„ÅÆÂÆüË°å„É≠„Ç∞„ÇíÁ¢∫Ë™ç„Åó„Å¶„Åè„Å†„Åï„ÅÑ„ÄÇ
EOF
          fi
          
          # 2. „É™„Çµ„Éº„ÉÅÁµêÊûú - Ë§áÊï∞„ÅÆÂ†¥ÊâÄ„Åã„ÇâÊ§úÁ¥¢
          RESEARCH_LOCATIONS=(
            "$ARTICLE_DIR/research_results.json"
            "research_results.json"
            "research-*.json"
          )
          
          RESEARCH_FOUND=false
          for loc in "${RESEARCH_LOCATIONS[@]}"; do
            if [ -f "$loc" ]; then
              cp "$loc" "$FINAL_DIR/research_results.json"
              echo "‚úÖ Found research results: $loc"
              RESEARCH_FOUND=true
              break
            fi
          done
          
          if [ "$RESEARCH_FOUND" = false ]; then
            # Ê§úÁ¥¢„Éë„Çø„Éº„É≥„Çí‰ΩøÁî®
            RESEARCH_FILE=$(find . -name "*research*.json" | head -1)
            if [ -n "$RESEARCH_FILE" ]; then
              cp "$RESEARCH_FILE" "$FINAL_DIR/research_results.json"
              echo "‚úÖ Using research file: $RESEARCH_FILE"
            else
              echo "‚ö†Ô∏è No research results found"
            fi
          fi
          
          # 3. „Éï„Ç°„ÇØ„Éà„ÉÅ„Çß„ÉÉ„ÇØÂìÅË≥™„É¨„Éù„Éº„Éà - Ë§áÊï∞„ÅÆÂ†¥ÊâÄ„Åã„ÇâÊ§úÁ¥¢
          FACTCHECK_LOCATIONS=(
            "$ARTICLE_DIR/factcheck_report.json"
            "factcheck_report.json"
            "factcheck-*.json"
          )
          
          FACTCHECK_FOUND=false
          for loc in "${FACTCHECK_LOCATIONS[@]}"; do
            if [ -f "$loc" ]; then
              cp "$loc" "$FINAL_DIR/factcheck_report.json"
              echo "‚úÖ Found factcheck report: $loc"
              FACTCHECK_FOUND=true
              break
            fi
          done
          
          if [ "$FACTCHECK_FOUND" = false ]; then
            # Ê§úÁ¥¢„Éë„Çø„Éº„É≥„Çí‰ΩøÁî®
            FACTCHECK_FILE=$(find . -name "*factcheck*.json" | head -1)
            if [ -n "$FACTCHECK_FILE" ]; then
              cp "$FACTCHECK_FILE" "$FINAL_DIR/factcheck_report.json"
              echo "‚úÖ Using factcheck file: $FACTCHECK_FILE"
            else
              echo "‚ö†Ô∏è No factcheck report found"
            fi
          fi
          
          # 4. ÁîªÂÉè„Éï„Ç©„É´„ÉÄ - Ë§áÊï∞„ÅÆÂ†¥ÊâÄ„Åã„ÇâÊ§úÁ¥¢
          mkdir -p "$FINAL_DIR/images"
          IMAGES_FOUND=false
          
          # Ê®ôÊ∫ñÁöÑ„Å™ÁîªÂÉè„Éï„Ç©„É´„ÉÄ„ÅÆÂ†¥ÊâÄ
          if [ -d "$ARTICLE_DIR/images" ]; then
            cp -r "$ARTICLE_DIR/images/"* "$FINAL_DIR/images/" 2>/dev/null || true
            echo "‚úÖ Found images in $ARTICLE_DIR/images"
            IMAGES_FOUND=true
          fi
          
          # „Åù„ÅÆ‰ªñ„ÅÆÂ†¥ÊâÄ„Åã„ÇâÁîªÂÉè„ÇíÊ§úÁ¥¢
          if [ "$IMAGES_FOUND" = false ]; then
            find . -name "*.png" -o -name "*.jpg" -o -name "*.jpeg" | while read img; do
              if [[ "$img" != *"README"* ]]; then
                cp "$img" "$FINAL_DIR/images/" 2>/dev/null || true
                echo "‚úÖ Found image: $img"
                IMAGES_FOUND=true
              fi
            done
          fi
          
          # V4ÊàêÊûúÁâ©Ë™¨Êòé
          if [ -f "$ARTICLE_DIR/V4_deliverables.md" ]; then
            cp "$ARTICLE_DIR/V4_deliverables.md" "$FINAL_DIR/deliverables.md"
          fi
          
          # ÊúÄÁµÇ„Éë„ÉÉ„Ç±„Éº„Ç∏„ÅÆÂÜÖÂÆπÁ¢∫Ë™ç
          echo ""
          echo "üì¶ Final package contents:"
          find "$FINAL_DIR" -type f -exec ls -la {} \;
          
          # README‰ΩúÊàê
          cat > $FINAL_DIR/README.md << EOF
          # V4 Ë®ò‰∫ãÁîüÊàêÂÆå‰∫Ü„Éë„ÉÉ„Ç±„Éº„Ç∏ÔºàÂà∂‰ΩúÂêë„ÅëÁ∞°ÊòìÁâàÔºâ
          
          **Ë®ò‰∫ã„Çø„Ç§„Éà„É´**: ${{ inputs.article_title }}
          **ÁîüÊàêÊó•ÊôÇ**: $(date +%Y-%m-%d\ %H:%M:%S)
          **Ë®ò‰∫ãID**: ${{ needs.initialize.outputs.article_id }}
          
          ## üìÅ V4ÊàêÊûúÁâ©Ôºà4ÁÇπÔºâ
          
          1. **article.md** - Ë®ò‰∫ãÊú¨ÊñáÔºàÁ¥îÁ≤ã„Å™Markdown„ÄÅSEOÊßãÈÄ†Âåñ„Å™„ÅóÔºâ
          2. **research_results.json** - „É™„Çµ„Éº„ÉÅÁµêÊûúÔºà‰ø°È†ºÊÄß„Çπ„Ç≥„Ç¢‰ªò„ÅçÔºâ
          3. **factcheck_report.json** - „Éï„Ç°„ÇØ„Éà„ÉÅ„Çß„ÉÉ„ÇØÂìÅË≥™„Çπ„Ç≥„Ç¢Ôºà0-100ÁÇπÔºâ
          4. **images/** - ÁîüÊàêÁîªÂÉèÔºà„Éí„Éº„É≠„Éº1Êûö + „Çª„ÇØ„Ç∑„Éß„É≥4ÊûöÔºâ
          
          ## üéØ „Çø„Éº„Ç≤„ÉÉ„ÉàÊÉÖÂ†±
          
          - **„Éö„É´„ÇΩ„Éä**: ${{ inputs.target_persona }}
          - **„Ç≠„Éº„ÉØ„Éº„Éâ**: ${{ inputs.meta_keywords }}
          
          ## üìù ÂÇôËÄÉ
          
          SEOÊßãÈÄ†Âåñ„Å®HTMLÂ§âÊèõ„ÅØÂà∂‰ΩúÂÅ¥„ÅßÂÆüÊñΩ„Åó„Å¶„Åè„Å†„Åï„ÅÑ„ÄÇ
          EOF
          
          echo "üì¶ V4 final package created in: $FINAL_DIR"
          ls -la $FINAL_DIR/

      - name: Upload final package
        uses: actions/upload-artifact@v4
        with:
          name: FINAL_V4_ARTICLE_PACKAGE
          path: final_package
          retention-days: 30

  # ÈÄöÁü•Ôºà„Ç™„Éó„Ç∑„Éß„É≥Ôºâ
  notify:
    needs: [initialize, finalize]
    if: always() && vars.SLACK_WEBHOOK != ''
    runs-on: ubuntu-latest
    
    steps:
      - name: Send Slack notification
        env:
          SLACK_WEBHOOK: ${{ secrets.SLACK_WEBHOOK }}
        run: |
          STATUS="${{ needs.finalize.result }}"
          COLOR="good"
          EMOJI="‚úÖ"
          
          if [ "$STATUS" != "success" ]; then
            COLOR="danger"
            EMOJI="‚ùå"
          fi
          
          curl -X POST $SLACK_WEBHOOK \
            -H 'Content-type: application/json' \
            -d '{
              "attachments": [{
                "color": "'$COLOR'",
                "title": "'$EMOJI' Article Generation V4 '$STATUS'",
                "fields": [
                  {"title": "Title", "value": "'"${{ inputs.article_title }}"'", "short": false},
                  {"title": "Persona", "value": "'"${{ inputs.target_persona }}"'", "short": false},
                  {"title": "Deliverables", "value": "research_results.json, factcheck_report.json, images/, final_article.md", "short": false},
                  {"title": "Workflow", "value": "'"${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}"'", "short": false}
                ]
              }]
            }'