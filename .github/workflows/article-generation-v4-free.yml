name: Article Generation V4 Free (New Architecture - Prompt_v3)

on:
  workflow_dispatch:
    inputs:
      article_title:
        description: '„Çø„Ç§„Éà„É´Ê°àÔºà30„Äú32Â≠óÔºâ'
        required: true
        type: string
        default: ''
      
      main_keywords:
        description: '‰∏ªË¶ÅKWÔºàÊúÄÂ§ß3Ë™û„ÄÅ„Ç´„É≥„ÉûÂå∫Âàá„ÇäÔºâ'
        required: true
        type: string
        default: ''
      
      approach_target:
        description: 'Âàá„ÇäÂè£„Éª„Çø„Éº„Ç≤„ÉÉ„Éà'
        required: true
        type: string
        default: ''
      
      eeat_elements:
        description: 'E-E-A-TË¶ÅÁ¥†ÔºàExperience, Expertise, Authoritativeness, TrustworthinessÔºâ'
        required: true
        type: string
        default: ''
      
      word_count:
        description: 'ÁõÆÊ®ôÊñáÂ≠óÊï∞'
        required: false
        type: string
        default: '3200'
      
      enable_image_generation:
        description: 'ÁîªÂÉèÁîüÊàê„ÇíÊúâÂäπ„Å´„Åô„Çã'
        required: false
        type: boolean
        default: true

env:
  PYTHON_VERSION: '3.11'

jobs:
  # „Ç∏„Éß„Éñ1: ÂàùÊúüÂåñ„Å®„Çª„ÉÉ„Éà„Ç¢„ÉÉ„ÉóÔºàv3Â∞ÇÁî®Ôºâ
  initialize:
    runs-on: ubuntu-latest
    environment: GA
    timeout-minutes: 5
    outputs:
      article_id: ${{ steps.init.outputs.article_id }}
      profile: 'v3'
      
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          
      - name: Install dependencies
        run: |
          pip install anthropic pyyaml pathlib
          # v3Â∞ÇÁî®„ÅÆ‰æùÂ≠òÈñ¢‰øÇ„Åå„ÅÇ„Çå„Å∞ËøΩÂä†

      - name: Initialize article generation (v3 strict mode)
        id: init
        run: |
          # Ë®ò‰∫ãID„ÇíÁîüÊàêÔºàv3Ë≠òÂà•Â≠ê‰ªò„ÅçÔºâ
          CLEAN_TITLE=$(echo "${{ inputs.article_title }}" | sed 's/[^a-zA-Z0-9„ÅÇ-„Çì„Ç¢-„É≥‰∏Ä-ÈæØ]/_/g' | cut -c1-30)
          ARTICLE_ID=$(date +%Y%m%d_%H%M%S)_v3_${CLEAN_TITLE}
          
          echo "article_id=${ARTICLE_ID}" >> $GITHUB_OUTPUT
          
          echo "Article ID: ${ARTICLE_ID}"
          echo "Profile: v3 (Strict Template Compliance)"
          
          # Âá∫Âäõ„Éá„Ç£„É¨„ÇØ„Éà„É™‰ΩúÊàê
          mkdir -p "output/${ARTICLE_ID}"
          
          # v3Áî®„ÅÆÂé≥ÂØÜ„Å™ÂÖ•Âäõ„Éë„É©„É°„Éº„ÇøÊ§úË®º
          TITLE_LENGTH=$(echo -n "${{ inputs.article_title }}" | wc -m)
          KEYWORDS_COUNT=$(echo "${{ inputs.main_keywords }}" | tr ',' '\n' | wc -l)
          
          echo "Title length: ${TITLE_LENGTH} characters"
          echo "Keywords count: ${KEYWORDS_COUNT}"
          
          # v3ÂìÅË≥™„ÉÅ„Çß„ÉÉ„ÇØ
          if [ ${TITLE_LENGTH} -lt 30 ] || [ ${TITLE_LENGTH} -gt 32 ]; then
            echo "WARNING: Title length ${TITLE_LENGTH} is outside optimal range (30-32 characters)"
          fi
          
          if [ ${KEYWORDS_COUNT} -gt 3 ]; then
            echo "WARNING: Too many keywords (${KEYWORDS_COUNT}), maximum 3 recommended"
          fi
          
          # ÂÖ•Âäõ„Éë„É©„É°„Éº„Çø„Éï„Ç°„Ç§„É´‰ΩúÊàêÔºàv3ÂØæÂøúÔºâ
          cat > "output/${ARTICLE_ID}/input_params.json" << EOF
          {
            "article_id": "${ARTICLE_ID}",
            "title": "${{ inputs.article_title }}",
            "main_keywords": "${{ inputs.main_keywords }}",
            "approach_target": "${{ inputs.approach_target }}",
            "eeat_elements": "${{ inputs.eeat_elements }}",
            "word_count": "${{ inputs.word_count }}",
            "profile": "v3",
            "template_compliance_mode": "strict",
            "enable_image_generation": ${{ inputs.enable_image_generation }},
            "quality_threshold": 90,
            "created_at": "$(date -u +%Y-%m-%dT%H:%M:%SZ)"
          }
          EOF

      - name: Validate inputs (v3 strict mode)
        run: |
          # v3„ÅÆÂé≥ÂØÜ„Å™ÂÖ•ÂäõÊ§úË®º
          python -m article_flow.cli \
            --profile "v3" \
            --title "${{ inputs.article_title }}" \
            --main-keywords "${{ inputs.main_keywords }}" \
            --approach-target "${{ inputs.approach_target }}" \
            --eeat-elements "${{ inputs.eeat_elements }}" \
            --word-count "${{ inputs.word_count }}" \
            --prompt-dir "Prompt_v3" \
            --output-dir "output/${{ steps.init.outputs.article_id }}" \
            --config "article_flow/config/v3.yaml" \
            --dry-run \
            --log-level "INFO"
          
          echo "v3 strict validation completed ‚úÖ"

      - name: Upload initialization artifacts
        uses: actions/upload-artifact@v4
        with:
          name: init-v3-${{ steps.init.outputs.article_id }}
          path: output/${{ steps.init.outputs.article_id }}
          retention-days: 30

  # „Ç∏„Éß„Éñ2: Ë®ò‰∫ãÁîüÊàêÔºàv3Âé≥ÂØÜ„É¢„Éº„ÉâÔºâ
  generate_article:
    needs: initialize
    runs-on: ubuntu-latest
    environment: GA
    timeout-minutes: 45  # v3„ÅØÂìÅË≥™ÈáçË¶ñ„ÅßÈï∑„ÇÅ„ÅÆ„Çø„Ç§„É†„Ç¢„Ç¶„Éà
    outputs:
      generation_status: ${{ steps.generate.outputs.status }}
      quality_score: ${{ steps.generate.outputs.quality_score }}
      
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          
      - name: Install dependencies
        run: |
          pip install anthropic pyyaml pathlib
          # v3„ÅßÂøÖË¶Å„Å™ËøΩÂä†‰æùÂ≠òÈñ¢‰øÇ

      - name: Download initialization artifacts
        uses: actions/download-artifact@v4
        with:
          name: init-v3-${{ needs.initialize.outputs.article_id }}
          path: output/${{ needs.initialize.outputs.article_id }}

      - name: Generate article using v3 strategy
        id: generate
        env:
          ANTHROPIC_API_KEY: ${{ secrets.ANTHROPIC_API_KEY }}
          # v3Âõ∫Êúâ„ÅÆÁí∞Â¢ÉÂ§âÊï∞„ÇÇË®≠ÂÆö
        run: |
          echo "üöÄ Starting v3 strict article generation"
          echo "Template: ARTICLE-TEMPLATE-README.md compliance required"
          echo "Quality threshold: 90+ points"
          echo ""
          
          # v3 Strategy „Åß„Éï„É´„Éë„Ç§„Éó„É©„Ç§„É≥ÂÆüË°å
          python -m article_flow.cli \
            --profile "v3" \
            --title "${{ inputs.article_title }}" \
            --main-keywords "${{ inputs.main_keywords }}" \
            --approach-target "${{ inputs.approach_target }}" \
            --eeat-elements "${{ inputs.eeat_elements }}" \
            --word-count "${{ inputs.word_count }}" \
            --prompt-dir "Prompt_v3" \
            --output-dir "output/${{ needs.initialize.outputs.article_id }}" \
            --config "article_flow/config/v3.yaml" \
            --enable-image-generation="${{ inputs.enable_image_generation }}" \
            --log-level "INFO" \
            --article-id "${{ needs.initialize.outputs.article_id }}"
          
          # ÂÆüË°åÁµêÊûú„Å®ÂìÅË≥™„ÉÅ„Çß„ÉÉ„ÇØ
          RESULT_FILE="output/${{ needs.initialize.outputs.article_id }}/final_result.json"
          
          if [ -f "$RESULT_FILE" ]; then
            # v3ÂìÅË≥™„Çπ„Ç≥„Ç¢„ÇíÊäΩÂá∫
            QUALITY_SCORE=$(python -c "
            import json
            try:
                with open('$RESULT_FILE', 'r', encoding='utf-8') as f:
                    result = json.load(f)
                phases = result.get('phases', {})
                factcheck = phases.get('phase4', {})
                if factcheck:
                    score = factcheck.get('overall_score', 0)
                    template_score = factcheck.get('template_compliance_score', 0)
                    print(f'{score}')
                else:
                    print('0')
            except:
                print('0')
            ")
            
            echo "quality_score=${QUALITY_SCORE}" >> $GITHUB_OUTPUT
            echo "Quality Score: ${QUALITY_SCORE}"
            
            # v3ÂìÅË≥™Âü∫Ê∫ñ„ÉÅ„Çß„ÉÉ„ÇØÔºà90ÁÇπ‰ª•‰∏äÔºâ
            if [ "$QUALITY_SCORE" -ge 90 ]; then
              echo "status=success" >> $GITHUB_OUTPUT
              echo "‚úÖ v3 Article generation completed with high quality (${QUALITY_SCORE}/100)"
            else
              echo "status=failed" >> $GITHUB_OUTPUT
              echo "‚ùå v3 Quality score ${QUALITY_SCORE} below v3 threshold (90+)"
              exit 1
            fi
          else
            echo "status=failed" >> $GITHUB_OUTPUT
            echo "‚ùå v3 Article generation failed - no result file"
            exit 1
          fi

      - name: Validate v3 template compliance
        run: |
          # v3ÁâπÊúâ„ÅÆ„ÉÜ„É≥„Éó„É¨„Éº„ÉàÊ∫ñÊã†Ê§úË®º
          RESULT_FILE="output/${{ needs.initialize.outputs.article_id }}/final_result.json"
          
          echo "üîç Validating ARTICLE-TEMPLATE-README.md compliance..."
          
          python -c "
          import json
          
          with open('$RESULT_FILE', 'r', encoding='utf-8') as f:
              result = json.load(f)
          
          phases = result.get('phases', {})
          
          # Phase 3 (content) „ÅÆ„ÉÜ„É≥„Éó„É¨„Éº„ÉàÊ∫ñÊã†„ÉÅ„Çß„ÉÉ„ÇØ
          content_phase = phases.get('phase3', {})
          if content_phase:
              template_score = content_phase.get('template_adherence_score', 0)
              html_quality = content_phase.get('html_quality_score', 0)
              
              print(f'Template Adherence Score: {template_score}')
              print(f'HTML Quality Score: {html_quality}')
              
              if template_score >= 90 and html_quality >= 90:
                  print('‚úÖ v3 Template compliance verified')
              else:
                  print('‚ùå v3 Template compliance failed')
                  print(f'Required: Template‚â•90, HTML‚â•90')
                  print(f'Actual: Template={template_score}, HTML={html_quality}')
                  exit(1)
          else:
              print('‚ùå Content phase results not found')
              exit(1)
          "

      - name: Generate v3 quality report
        run: |
          # v3Â∞ÇÁî®„ÅÆË©≥Á¥∞ÂìÅË≥™„É¨„Éù„Éº„ÉàÁîüÊàê
          RESULT_FILE="output/${{ needs.initialize.outputs.article_id }}/final_result.json"
          REPORT_FILE="output/${{ needs.initialize.outputs.article_id }}/v3_quality_report.md"
          
          python -c "
          import json
          from datetime import datetime
          
          with open('$RESULT_FILE', 'r', encoding='utf-8') as f:
              result = json.load(f)
          
          phases = result.get('phases', {})
          
          # v3ÂìÅË≥™„É¨„Éù„Éº„Éà‰ΩúÊàê
          report = []
          report.append('# V3 Article Generation Quality Report')
          report.append('')
          report.append(f'**Generated:** {datetime.now().strftime(\"%Y-%m-%d %H:%M:%S\")}')
          report.append(f'**Article ID:** {result.get(\"article_id\", \"Unknown\")}')
          report.append(f'**Strategy:** v3 (Strict Template Compliance)')
          report.append('')
          
          # ÂìÅË≥™„É°„Éà„É™„ÇØ„ÇπË©≥Á¥∞
          factcheck = phases.get('phase4', {})
          if factcheck and 'factcheck_results' in factcheck:
              fc = factcheck['factcheck_results']
              report.append('## Quality Metrics')
              report.append('')
              report.append(f'| Metric | Score | Status |')
              report.append(f'|--------|-------|--------|')
              report.append(f'| Overall Score | {fc.get(\"overall_score\", \"N/A\")} | {'‚úÖ' if fc.get(\"overall_score\", 0) >= 90 else '‚ùå'} |')
              report.append(f'| Factual Accuracy | {fc.get(\"factual_accuracy\", \"N/A\")} | {'‚úÖ' if fc.get(\"factual_accuracy\", 0) >= 90 else '‚ùå'} |')
              report.append(f'| Regulatory Compliance | {fc.get(\"regulatory_compliance\", \"N/A\")} | {'‚úÖ' if fc.get(\"regulatory_compliance\", 0) >= 95 else '‚ùå'} |')
              report.append(f'| Template Compliance | {fc.get(\"template_compliance\", \"N/A\")} | {'‚úÖ' if fc.get(\"template_compliance\", 0) >= 90 else '‚ùå'} |')
              report.append('')
          
          # „ÉÜ„É≥„Éó„É¨„Éº„ÉàÊ∫ñÊã†Ë©≥Á¥∞
          content_phase = phases.get('phase3', {})
          if content_phase:
              report.append('## Template Compliance Details')
              report.append('')
              report.append(f'- **HTML Quality Score:** {content_phase.get(\"html_quality_score\", \"N/A\")}')
              report.append(f'- **Template Adherence Score:** {content_phase.get(\"template_adherence_score\", \"N/A\")}')
              report.append(f'- **Quality Status:** {'‚úÖ Passed' if content_phase.get(\"quality_passed\", False) else '‚ùå Failed'}')
              report.append('')
          
          # v3Ë™çÂÆö
          overall_quality = factcheck.get('factcheck_results', {}).get('overall_score', 0) if factcheck else 0
          template_quality = content_phase.get('template_adherence_score', 0) if content_phase else 0
          
          if overall_quality >= 90 and template_quality >= 90:
              report.append('## ‚úÖ V3 CERTIFICATION ACHIEVED')
              report.append('')
              report.append('This article meets v3 strict quality standards:')
              report.append('- ‚úÖ Overall Quality ‚â• 90 points')
              report.append('- ‚úÖ Template Compliance ‚â• 90 points') 
              report.append('- ‚úÖ ARTICLE-TEMPLATE-README.md adherence')
          else:
              report.append('## ‚ùå V3 CERTIFICATION FAILED')
              report.append('')
              report.append('Article did not meet v3 quality requirements.')
          
          with open('$REPORT_FILE', 'w', encoding='utf-8') as f:
              f.write('\\n'.join(report))
          
          print('V3 Quality Report generated')
          "

      - name: Upload v3 generation results
        uses: actions/upload-artifact@v4
        with:
          name: article-v3-${{ needs.initialize.outputs.article_id }}
          path: output/${{ needs.initialize.outputs.article_id }}
          retention-days: 30

  # „Ç∏„Éß„Éñ3: v3ÁµêÊûúÂàÜÊûê„Å®ÈÄöÁü•
  finalize:
    needs: [initialize, generate_article]
    runs-on: ubuntu-latest
    if: always()
    timeout-minutes: 5
    
    steps:
      - name: Download v3 generation results
        if: needs.generate_article.outputs.generation_status == 'success'
        uses: actions/download-artifact@v4
        with:
          name: article-v3-${{ needs.initialize.outputs.article_id }}
          path: output/${{ needs.initialize.outputs.article_id }}

      - name: Display v3 generation summary
        if: needs.generate_article.outputs.generation_status == 'success'
        run: |
          echo "## ‚úÖ V3 Article Generation Completed"
          echo ""
          echo "**Strategy:** v3 (Strict Template Compliance)"
          echo "**Article ID:** ${{ needs.initialize.outputs.article_id }}"
          echo "**Title:** ${{ inputs.article_title }}"
          echo "**Keywords:** ${{ inputs.main_keywords }}"
          echo "**Target:** ${{ inputs.approach_target }}"
          echo "**Quality Score:** ${{ needs.generate_article.outputs.quality_score }}/100"
          echo ""
          
          # v3ÂìÅË≥™„É¨„Éù„Éº„ÉàË°®Á§∫
          if [ -f "output/${{ needs.initialize.outputs.article_id }}/v3_quality_report.md" ]; then
            echo "### V3 Quality Report"
            cat "output/${{ needs.initialize.outputs.article_id }}/v3_quality_report.md"
          fi

      - name: Handle v3 generation failure
        if: needs.generate_article.outputs.generation_status == 'failed'
        run: |
          echo "## ‚ùå V3 Article Generation Failed"
          echo ""
          echo "**Strategy:** v3 (Strict Template Compliance)"
          echo "**Article ID:** ${{ needs.initialize.outputs.article_id }}"
          echo "**Quality Score:** ${{ needs.generate_article.outputs.quality_score }}/100"
          echo ""
          echo "**Failure Reason:** Quality score below v3 threshold (90+ required)"
          echo ""
          echo "Please review the generation logs and consider:"
          echo "- Adjusting input parameters"
          echo "- Using v2 profile for more flexible requirements"
          echo "- Reviewing ARTICLE-TEMPLATE-README.md compliance"
          exit 1

      - name: V3 workflow summary
        run: |
          echo "## V3 Workflow Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "- **Strategy:** v3 (Strict Template Compliance)" >> $GITHUB_STEP_SUMMARY
          echo "- **Article ID:** ${{ needs.initialize.outputs.article_id }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Generation Status:** ${{ needs.generate_article.outputs.generation_status }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Quality Score:** ${{ needs.generate_article.outputs.quality_score }}/100" >> $GITHUB_STEP_SUMMARY
          echo "- **Image Generation:** ${{ inputs.enable_image_generation }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Template Compliance:** ARTICLE-TEMPLATE-README.md" >> $GITHUB_STEP_SUMMARY