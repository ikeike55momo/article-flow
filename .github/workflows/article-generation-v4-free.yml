name: Article Generation V4 Free (Simplified Output)

on:
  workflow_dispatch:
    inputs:
      article_title:
        description: 'タイトル案（30〜32字）'
        required: true
        type: string
        default: ''
      
      main_keywords:
        description: '主要KW（最大3語、カンマ区切り）'
        required: true
        type: string
        default: ''
      
      approach_target:
        description: '切り口・ターゲット'
        required: true
        type: string
        default: ''
      
      eeat_elements:
        description: 'E-E-A-T要素（Experience, Expertise, Authoritativeness, Trustworthiness）'
        required: true
        type: string
        default: ''
      
      word_count:
        description: '目標文字数'
        required: false
        type: string
        default: '3200'
      
      enable_image_generation:
        description: '画像生成を有効にする'
        required: false
        type: boolean
        default: true
      
      # Google Drive upload removed

env:
  PYTHON_VERSION: '3.11'

jobs:
  # ジョブ1: 初期化
  initialize:
    runs-on: ubuntu-latest
    environment: GA
    timeout-minutes: 5
    outputs:
      article_id: ${{ steps.init.outputs.article_id }}
      
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Initialize article generation
        id: init
        run: |
          # タイトルからIDを生成
          CLEAN_TITLE=$(echo "${{ inputs.article_title }}" | sed 's/[^a-zA-Z0-9あ-んア-ン一-龯]/_/g' | cut -c1-50)
          ARTICLE_ID=$(date +%Y%m%d_%H%M%S)_${CLEAN_TITLE}
          echo "article_id=${ARTICLE_ID}" >> $GITHUB_OUTPUT
          echo "Article ID: ${ARTICLE_ID}"
          
          # 出力ディレクトリ作成
          mkdir -p output/${ARTICLE_ID}
          
          # 入力情報を保存
          TIMESTAMP=$(date -u +%Y-%m-%dT%H:%M:%SZ)
          echo '{' > "output/${ARTICLE_ID}/input_params.json"
          echo "  \"article_id\": \"${ARTICLE_ID}\"," >> "output/${ARTICLE_ID}/input_params.json"
          echo "  \"title\": \"${{ inputs.article_title }}\"," >> "output/${ARTICLE_ID}/input_params.json"
          echo "  \"approach_target\": \"${{ inputs.approach_target }}\"," >> "output/${ARTICLE_ID}/input_params.json"
          echo "  \"main_keywords\": \"${{ inputs.main_keywords }}\"," >> "output/${ARTICLE_ID}/input_params.json"
          echo "  \"eeat_elements\": \"${{ inputs.eeat_elements }}\"," >> "output/${ARTICLE_ID}/input_params.json"
          echo "  \"word_count\": \"${{ inputs.word_count }}\"," >> "output/${ARTICLE_ID}/input_params.json"
          echo "  \"created_at\": \"${TIMESTAMP}\"" >> "output/${ARTICLE_ID}/input_params.json"
          echo '}' >> "output/${ARTICLE_ID}/input_params.json"

      - name: Upload initialization artifacts
        uses: actions/upload-artifact@v4
        with:
          name: init-${{ steps.init.outputs.article_id }}
          path: output/${{ steps.init.outputs.article_id }}
          retention-days: 30

  # ジョブ2: リクエスト分析
  analysis:
    needs: initialize
    runs-on: ubuntu-latest
    environment: GA
    timeout-minutes: 10
    outputs:
      main_keyword: ${{ steps.analyze.outputs.main_keyword }}
      
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Download initialization artifacts
        uses: actions/download-artifact@v4
        with:
          name: init-${{ needs.initialize.outputs.article_id }}
          path: output/${{ needs.initialize.outputs.article_id }}

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Install dependencies
        run: |
          cd github-actions
          pip install -r requirements.txt

      - name: Create analysis input
        run: |
          cd output/${{ needs.initialize.outputs.article_id }}
          # Phase1が期待する形式のJSONを作成
          echo '{' > request_params.json
          echo "  \"topic\": \"${{ inputs.article_title }}\"," >> request_params.json
          echo "  \"target_audience\": \"${{ inputs.approach_target }}\"," >> request_params.json
          echo "  \"keywords\": \"${{ inputs.main_keywords }}\"" >> request_params.json
          echo '}' >> request_params.json

      - name: Run Phase 1 Analysis with Claude
        uses: anthropics/claude-code-base-action@beta
        with:
          anthropic_api_key: ${{ secrets.ANTHROPIC_API_KEY }}
          
          prompt: |
            # 目的: 記事生成のための分析結果をphase1_output.jsonファイルに必ず作成する（ARTICLE-TEMPLATE-README.md準拠）
            
            このタスクはphase1_output.jsonファイルの作成で完了とします。分析だけして終わるのは禁止です。
            **注意：最終的にARTICLE-TEMPLATE-README.mdのCSSクラス仕様に完全準拠したHTMLを生成することを前提に分析してください。**
            
            ## 納品物（必須）
            - **ファイルパス**: output/${{ needs.initialize.outputs.article_id }}/phase1_output.json
            - **形式**: UTF-8エンコードの厳密なJSON（コメント・末尾カンマ無し）
            - **絶対条件**: このファイルが存在しないと後続ジョブが全て失敗します
            
            ## 手順（この順序で実行してください）
            1. まず output/${{ needs.initialize.outputs.article_id }}/phase1_output.json を空のJSONで作成
            2. output/${{ needs.initialize.outputs.article_id }}/request_params.json を読み込む
            3. 以下の分析を実行
            4. 分析結果でphase1_output.jsonを上書き保存
            5. ファイルを読み直してJSONが正しいことを検証
            6. ファイルサイズと最初の100文字を出力して作成を確認
            
            ## 分析タスク
            ### 入力情報
            - 記事タイトル: ${{ inputs.article_title }}
            - ターゲットペルソナ: ${{ inputs.approach_target }}
            - メタキーワード: ${{ inputs.main_keywords }}
            - 目標文字数: ${{ inputs.word_count }}
            
            ### 分析内容
            1. メインキーワードの特定（タイトルから最重要語を1つ）
            2. 関連キーワードの抽出（5-8個）
            3. 検索意図の分析（informational/navigational/transactional/commercial）
            4. コンテンツタイプの決定（how-to/guide/comparison/review/tips）
            5. トーンの設定（friendly/professional/casual/authoritative）
            6. キーポイントの抽出（ペルソナが知りたい3-5個）
            7. リサーチクエリの生成（必ず15個以上、理想は20個）
            
            ## 必須JSONスキーマ
            {
              "analysis": {
                "main_keyword": "string（必須）",
                "related_keywords": ["array（5個以上必須）"],
                "search_intent": "informational（必須）",
                "content_type": "how-to（必須）",
                "tone": "friendly（必須）",
                "key_points": ["array（3個以上必須）"],
                "research_queries": ["array（15個以上必須）"],
                "competitor_analysis_needed": true,
                "local_seo_focus": false,
                "estimated_sections": 5
              },
              "topic": "${{ inputs.article_title }}",
              "target_audience": "${{ inputs.approach_target }}",
              "keywords": "${{ inputs.main_keywords }}",
              "processed_at": "ISO8601形式の現在時刻",
              "workflow_version": "4.0.0"
            }
            
            ## 制約事項
            - チャットにJSONを出力しない（ファイルに直接書き込む）
            - 分析が不完全でも必ずファイルを作成（最低限の構造で）
            - research_queriesは最低15個必須（後続処理のため）
            - 他のファイルは作成・変更しない
            - 健康・美容分野では薬機法・景表法への配慮
            
            ## 失敗時の処理
            何らかの理由で分析が失敗した場合でも、以下の最小構造でファイルを作成：
            - main_keyword: タイトルの最初の単語
            - research_queries: タイトルを元に機械的に15個生成
            - その他: デフォルト値を設定
            
            ## 完了条件（必須確認項目）
            1. output/${{ needs.initialize.outputs.article_id }}/phase1_output.json が存在する
            2. JSONとして有効である（パース可能）
            3. analysis.research_queries が15個以上含まれる
            4. ファイルサイズが1KB以上ある
          
          allowed_tools: |
            Read,
            Write
          
          claude_env: |
            ARTICLE_ID=${{ needs.initialize.outputs.article_id }}
          
          max_turns: "5"
      
      - name: Verify and prepare analysis results
        run: |
          echo "🔍 Checking for analysis files..."
          echo "Current working directory: $(pwd)"
          echo "Files in root:"
          ls -la
          echo "Files in output directory:"
          ls -la output/${{ needs.initialize.outputs.article_id }}/
          
          cd output/${{ needs.initialize.outputs.article_id }}
          if [ -f "phase1_output.json" ]; then
            echo "✅ Phase 1 analysis file found"
            cat phase1_output.json
          else
            echo "⚠️ Phase 1 analysis file not found, creating default"
            # Check if file was created in root directory by mistake
            if [ -f "../../phase1_output.json" ]; then
              echo "📁 Found phase1_output.json in root, moving to correct location"
              mv ../../phase1_output.json ./phase1_output.json
            else
              echo "🔧 Creating fallback analysis file"
              # Create fallback analysis if Claude didn't create the file
              TIMESTAMP=$(date -u +%Y-%m-%dT%H:%M:%SZ)
              TITLE="${{ inputs.article_title }}"
              PERSONA="${{ inputs.approach_target }}"
              KEYWORDS="${{ inputs.main_keywords }}"
              EEAT_ELEMENTS="${{ inputs.eeat_elements }}"
              
              # 外部スクリプトを使用してJSONを作成
              TITLE="${TITLE}" PERSONA="${PERSONA}" KEYWORDS="${KEYWORDS}" EEAT_ELEMENTS="${EEAT_ELEMENTS}" TIMESTAMP="${TIMESTAMP}" OUTPUT_DIR="." python3 ../../github-actions/scripts/create_phase1_fallback.py
            fi
          fi
          
          echo "📋 Final verification - files in current directory:"
          ls -la

      - name: Split research queries into batches
        id: analyze
        run: |
          # クエリを5バッチに分割
          cd output/${{ needs.initialize.outputs.article_id }}
          python3 ../../github-actions/scripts/split_research_queries.py
          
          # メインキーワードを出力
          if [ -f "research_meta.json" ]; then
            MAIN_KW=$(python -c "import json; print(json.load(open('research_meta.json'))['main_keyword'])")
            echo "main_keyword=${MAIN_KW}" >> $GITHUB_OUTPUT
          fi
        env:
          ANTHROPIC_API_KEY: ${{ secrets.ANTHROPIC_API_KEY }}
          ENABLE_GEMINI_RESEARCH: "true"

      - name: Upload analysis artifacts
        uses: actions/upload-artifact@v4
        with:
          name: analysis-${{ needs.initialize.outputs.article_id }}
          path: output/${{ needs.initialize.outputs.article_id }}
          retention-days: 30

  # ジョブ3: リサーチ（Gemini使用 - 並列実行）
  research:
    needs: [initialize, analysis]
    runs-on: ubuntu-latest
    environment: GA
    timeout-minutes: 15
    strategy:
      matrix:
        batch: [0, 1, 2]  # Reduced to 3 batches to match max-parallel
      max-parallel: 3  # Balanced for rate limiting with gemini-2.5-flash
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Download initialization artifacts
        uses: actions/download-artifact@v4
        with:
          name: init-${{ needs.initialize.outputs.article_id }}
          path: output/${{ needs.initialize.outputs.article_id }}

      - name: Download analysis artifacts
        uses: actions/download-artifact@v4
        with:
          name: analysis-${{ needs.initialize.outputs.article_id }}
          path: output/${{ needs.initialize.outputs.article_id }}

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Install dependencies
        run: |
          cd github-actions
          pip install -r requirements.txt
          
      - name: Install Gemini API dependencies  
        run: |
          pip install google-genai

      - name: Research with Gemini (Batch ${{ matrix.batch }})
        run: |
          cd output/${{ needs.initialize.outputs.article_id }}
          
          # バッチ用の分析ファイルを作成
          BATCH_NUM=${{ matrix.batch }} python3 ../../github-actions/scripts/create_batch_analysis.py
          
          # バッチクエリを読み込んでGemini APIで直接検索（外部スクリプト使用）
          python3 ../../github-actions/scripts/research_batch_gemini.py ${{ matrix.batch }}
        env:
          GEMINI_API_KEY: ${{ secrets.GEMINI_API_KEY }}

      - name: Upload research batch artifacts
        uses: actions/upload-artifact@v4
        with:
          name: research-batch-${{ matrix.batch }}-${{ needs.initialize.outputs.article_id }}
          path: output/${{ needs.initialize.outputs.article_id }}/batch_${{ matrix.batch }}
          retention-days: 30

  # ジョブ4: リサーチ結果の統合
  research-merge:
    needs: [initialize, research]
    runs-on: ubuntu-latest
    environment: GA
    timeout-minutes: 10
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Create output directory
        run: mkdir -p output/${{ needs.initialize.outputs.article_id }}

      - name: Download all research batches
        uses: actions/download-artifact@v4
        with:
          pattern: research-batch-*-${{ needs.initialize.outputs.article_id }}
          path: output/${{ needs.initialize.outputs.article_id }}/batches

      - name: Download analysis artifacts
        uses: actions/download-artifact@v4
        with:
          name: analysis-${{ needs.initialize.outputs.article_id }}
          path: output/${{ needs.initialize.outputs.article_id }}

      - name: Merge research results
        run: |
          cd output/${{ needs.initialize.outputs.article_id }}
          
          # リサーチ結果を統合してV4出力形式にする
          python3 ../../github-actions/scripts/merge_research_results.py
          
          # V4用にファイル名を変更
          if [ -f "phase2_research.json" ]; then
            mv phase2_research.json research_results.json
            echo "✅ Created research_results.json for V4"
          fi

      - name: Upload merged research artifacts
        uses: actions/upload-artifact@v4
        with:
          name: research-${{ needs.initialize.outputs.article_id }}
          path: output/${{ needs.initialize.outputs.article_id }}
          retention-days: 30

  # ジョブ5: 記事構成の生成（SEO削除版）
  generate-structure:
    needs: [initialize, analysis, research-merge]
    runs-on: ubuntu-latest
    environment: GA
    timeout-minutes: 15
      
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Download artifacts
        uses: actions/download-artifact@v4
        with:
          pattern: '*-${{ needs.initialize.outputs.article_id }}'
          path: output/${{ needs.initialize.outputs.article_id }}
          merge-multiple: true

      - name: Generate article structure with Claude
        uses: anthropics/claude-code-base-action@beta
        with:
          anthropic_api_key: ${{ secrets.ANTHROPIC_API_KEY }}
          
          prompt: |
            # 記事構成生成
            
            健康・美容に関する記事の基本構成を作成してください。（SEO最適化は後の工程で実施するため、読者に価値のある構成に重点を置く）
            
            ## 入力情報
            
            ### 基本情報
            - **記事タイトル**: ${{ inputs.article_title }}
            - **ターゲットペルソナ**: ${{ inputs.approach_target }}
            - **メタキーワード**: ${{ inputs.main_keywords }}
            - **目標文字数**: ${{ inputs.word_count }}
            
            ## タスク
            
            まず、以下のファイルを読み込んで理解してください：
            - output/${{ needs.initialize.outputs.article_id }}/input_params.json: 入力パラメータ
            - output/${{ needs.initialize.outputs.article_id }}/phase1_output.json: 分析結果
            - output/${{ needs.initialize.outputs.article_id }}/research_results.json: リサーチ結果
            
            分析とリサーチ結果を踏まえて、ペルソナに最適化された記事構成を作成してください。
            
            ### 1. 記事構成（01_article_structure.md）を作成
            
            output/${{ needs.initialize.outputs.article_id }}/01_article_structure.md として以下の要素を含む詳細な構成を作成：
            
            - 導入部（リード文）：ペルソナの悩みに共感し、記事の価値を明確にする（300-500文字）
            - 目次：H2レベルの見出し5-7個
            - メインセクション：各セクションの目的、含める内容、文字数目安（400-600文字）
            - FAQ部分：ペルソナがよく持つ疑問3-5個
            - まとめ：記事の要点と次のアクション
            
            ### 2. コンテンツ計画（02_content_plan.md）を作成
            
            output/${{ needs.initialize.outputs.article_id }}/02_content_plan.md として各セクションの詳細な内容計画を作成：
            
            - セクション別詳細計画：キーメッセージ、使用するリサーチ情報、含めるキーワード
            - ペルソナ最適化のポイント：ペルソナの特性に合わせた表現方法
            - 薬機法・景表法配慮事項：注意すべき表現、代替表現の提案
            
            ## 出力要件
            
            - <strong>読者ファースト</strong>: SEOよりもペルソナの価値を重視
            - <strong>論理的な流れ</strong>: 読者の疑問が自然に解決される構成
            - <strong>実用性</strong>: 具体的で実践しやすい内容
            - <strong>信頼性</strong>: リサーチ結果に基づいた正確な情報
            - <strong>法規制対応</strong>: 薬機法・景表法に配慮した表現計画
          
          allowed_tools: |
            Read,
            Write,
            Edit
          
          claude_env: |
            ARTICLE_ID=${{ needs.initialize.outputs.article_id }}
          
          max_turns: "10"

      - name: Upload structure artifacts
        uses: actions/upload-artifact@v4
        with:
          name: structure-${{ needs.initialize.outputs.article_id }}
          path: output/${{ needs.initialize.outputs.article_id }}
          retention-days: 30

  # ジョブ6: 記事本文の生成（MD専用）
  generate-content:
    needs: [initialize, generate-structure]
    runs-on: ubuntu-latest
    environment: GA
    timeout-minutes: 20
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Download artifacts
        uses: actions/download-artifact@v4
        with:
          pattern: '*-${{ needs.initialize.outputs.article_id }}'
          path: output/${{ needs.initialize.outputs.article_id }}
          merge-multiple: true

      - name: Generate article content with Claude
        uses: anthropics/claude-code-base-action@beta
        with:
          anthropic_api_key: ${{ secrets.ANTHROPIC_API_KEY }}
          prompt: |
            # 記事本文生成（HTML形式）
            
            プロフェッショナルなコンテンツライターとして、Phase 2の構成に従って高品質な記事を生成してください。
            **ARTICLE-TEMPLATE-README.mdのCSSクラス仕様を完全に遵守してください。**
            
            ## 入力情報
            
            ### 基本情報
            - <strong>記事タイトル</strong>: ${{ inputs.article_title }}
            - <strong>ターゲットペルソナ</strong>: ${{ inputs.approach_target }}
            - <strong>目標文字数</strong>: ${{ inputs.word_count }}
            
            ## タスク
            
            まず、以下のファイルを読み込んで内容を理解してください：
            - output/${{ needs.initialize.outputs.article_id }}/phase1_output.json: Phase 1の分析結果
            - output/${{ needs.initialize.outputs.article_id }}/01_article_structure.md: Phase 2の記事構成
            - output/${{ needs.initialize.outputs.article_id }}/02_content_plan.md: Phase 2のコンテンツ計画
            - output/${{ needs.initialize.outputs.article_id }}/research_results.json: リサーチ結果（出典URL含む）
            
            ## 記事生成ルール（ARTICLE-TEMPLATE-README.md完全準拠）
            
            ### 1. 基本方針
            - **Phase 2の構成を忠実に実装**してください
            - WordPressのHTMLブロックに貼り付けることを前提
            - セマンティックで読みやすいHTMLを生成
            - **重要：これはCSSクラス名の仕様書です。記事構成ではなくHTMLパーツ集です**
            - **超重要：Markdown記法は一切使用せず、すべて純粋なHTMLタグで記述すること**
            
            ### 1.1 HTML記法の厳守（絶対遵守）
            
            **絶対に使用禁止（Markdown記法）→ 必ず使用すべきHTMLタグ：**
            - `###` 見出し → `<h3>見出し</h3>` を使用
            - `##` 見出し → `<h2>見出し</h2>` を使用  
            - `**太字**` → `<strong>太字</strong>` を使用
            - `*斜体*` → `<em>斜体</em>` を使用
            - `1. リスト項目` → `<ol><li>リスト項目</li></ol>` を使用
            - `- リスト項目` → `<ul><li>リスト項目</li></ul>` を使用
            - `` `コード` `` → `<code>コード</code>` を使用
            
            **すべての文章、見出し、リストは必ずHTMLタグで記述してください。**
            Markdown記法が1箇所でも含まれていた場合は生成失敗とみなします。
            記事内のH2、H3見出しはすべて`<h2>` `<h3>`タグを使用すること。
            
            ### 2. HTML構造の要件
            
            基本構造（必須）：
            ```html
            <div class="article-content">
              <!-- 記事全体をこのコンテナで囲む（1記事に1つのみ） -->
              <!-- 以下、Phase 2の構成に従って記事を展開 -->
            </div>
            ```
            
            標準パーツ：
            
            <strong>導入部分：</strong>
            - 信頼性バッジ: `<div class="article-expert-badge">`
            - リードテキスト: `<p class="article-lead-text">`
            - 目次: `<div class="article-toc">` （アンカーリンクを正しく設定）
            
            <strong>本文パーツ：</strong>
            - ハイライトボックス（**重要：1セクション1個まで厳守**）: `<div class="article-highlight-box">`
            - ステップリスト: `<ol class="article-steps-list">`
            - 比較テーブル: `<table class="article-comparison-table">`
            - 引用ブロック: `<div class="article-quote">`
            - 引用元注記: `<span class="quote-source">`
            
            <strong>レビューカード（お客様の声）：</strong>
            - レビューカード全体: `<div class="review-cards-section">`
            - 個別レビューカード: `<div class="review-card">`
            - アバター画像: `<div class="review-avatar">`
            - レビュー内容部分: `<div class="review-content">`
            - 投稿者情報: `<h3 class="review-author">`
            - レビューテキスト: `<p class="review-text">`
            
            <strong>画像・メディア：</strong>
            - 画像コンテナ: `<div class="article-content-image">`
            - 画像本体: `<img>` （article-content-image内）
            - 画像キャプション: `<figcaption>`
            
            <strong>セクション要素：</strong>
            - まとめセクション: `<section class="article-summary-section">`
            - CTAセクション: `<section class="article-cta-section">`
            - CTAボタン: `<a class="article-cta-button">`
            - 関連記事セクション: `<section class="article-related-section">`
            - 参考資料セクション: `<section class="article-reference-section">`
            - 信頼性情報: `<div class="article-reliability-info">`
            
            ### 3. FAQ部分（重要：構造を正確に・ID重複エラー防止）
            
            ```html
            <div class="article-faq-section">
              <h2>よくある質問</h2>
              
              <div class="article-faq-item">
                <input type="checkbox" id="faq1">  <!-- 必ず一意のID -->
                <label for="faq1" class="article-faq-question">  <!-- IDと完全一致 -->
                  <span>Q1: 質問内容</span>  <!-- 必ずspan要素で囲む -->
                </label>
                <div class="article-faq-answer">A1: 回答内容</div>
              </div>
              <!-- faq2, faq3... と連番で続ける -->
            </div>
            ```
            
            **FAQエラー防止チェック：**
            - 各FAQ項目で**ページ内で一意のID**を設定（faq1, faq2, faq3...）
            - inputのidとlabelのforを完全一致させる
            - 同じidを複数回使用しない（**1ページ内でのID重複は絶対禁止**）
            - 質問文は必ず`<span>`要素で囲む
            - 他の要素（見出し等）のIDとも重複しないよう注意
            
            ### 4. 出典・引用の扱い方
            
            本文中で統計データや専門的主張を述べる際は必ず出典を付けてください：
            
            ```html
            <!-- 本文中の脚注リンク -->
            <p>研究結果によると<a class="article-cite" href="#fn-1" id="fnref-1">[1]</a>、〇〇ということが明らかになっています。</p>
            
            <!-- 引用ブロック（よくあるスタイル） -->
            <div class="article-quote">
              <p>引用したい内容をここに記載します<a class="article-cite" href="#fn-2">[2]</a>。</p>
              <span class="quote-source">参考: 関連機関の見解</span>
            </div>
            
            <!-- 記事末尾の出典リスト -->
            <div class="article-reliability-info">
              <h3>この記事の信頼性について</h3>
              <ol class="article-citations">
                <li id="fn-1">
                  <a href="実際のURL" target="_blank" rel="noopener">出典名</a>
                  <a href="#fnref-1" class="fn-back">↩</a>
                </li>
              </ol>
            </div>
            ```
            
            **引用関連クラスの使い方：**
            - `article-cite`: 本文中の脚注リンク（例: [1]）
            - `article-citations`: 末尾の出典リスト（番号付き）
            - `fn-back`: 出典から本文へ戻るリンク（↩）
            - `article-quote`: 引用用の強調ブロック
            - `quote-source`: 引用元の短い注記
            
            リサーチ結果から5つ以上の出典を引用してください。
            
            ### 5. strongタグの使用ガイドライン（重要：適切な使用箇所の厳守）
            
            <strong>使用する場所（文章内の重要ポイントのみ）：</strong>
            - 文章内の重要なポイント
            - 注意点、推奨事項
            - 成功のコツ
            - 読者の理解を助ける強調
            
            <strong>絶対に使用しない場所：</strong>
            - ラベル（「住所：」「電話番号：」など）
            - 項目名・見出し
            - 短い単語やラベル
            - 専門家バッジ内
            - CTAセクション内の定型文
            
            ### 6. ハイライトボックスの使用制限（重要：使用数の厳守）
            
            - <strong>導入部分（リードテキスト周辺）</strong>: キャッチーさを演出するため積極的に使用推奨
            - <strong>メインセクション内</strong>: **h2見出し単位で1個まで厳守**、本当に重要な情報のみ
            - <strong>過度な使用は絶対に避ける</strong>: 基本はh3+p構造を使用
            - <strong>料金・重要情報セクション</strong>: 複雑な情報を整理する場合は使用可
            - **基本構成：h3見出し + pテキストを基本とし、シンプルな構造を心がける**
            - **セクション定義：h2タグで区切られた範囲を1セクションとする**
            
            ### 7. ブログカード機能（ショートコードによる自動生成）
            
            記事内の任意の場所にブログカードを挿入できます。URLから自動でタイトル、画像、説明文を取得してブログカードを生成：
            
            ```html
            <p>詳しい手順については、こちらの記事も参考にしてください。</p>
            
            <!-- 記事内にブログカードを挿入 -->
            [blog_card url="https://example.com/related-article"]
            
            <p>上記の方法を試した後で、次のステップに進みます。</p>
            ```
            
            **ショートコードのパラメータ：**
            - `url`: ブログカードを生成したいページのURL（必須）
            
            **使用上の注意：**
            - WordPressが自動的にURLからメタ情報を取得してカード化
            - 関連記事への内部リンクや参考資料への外部リンクに活用
            - 記事の流れを妨げない適切な位置に配置
            
            ### 8. 画像の使用例（alt属性必須）・画像挿入の要件（重要）
            
            **各セクションに適切な位置で画像を挿入してください。特に以下の箇所では必須：**
            - ヒーロー画像：記事の冒頭部分（リード文の後）
            - 各主要セクション（H2見出し）：内容の理解を助ける説明画像
            
            ```html
            <figure class="article-content-image">
              <img src="[画像生成予定位置]" alt="[画像の詳細な説明]" loading="lazy" decoding="async" width="800" height="600">
              <figcaption>[画像のキャプション]</figcaption>
            </figure>
            ```
            
            **画像の配置ルール**：
            - 最低4-5箇所に画像プレースホルダーを配置
            - src属性には `[ヒーロー画像]` `[セクション1画像]` `[セクション2画像]` など、どの位置の画像かわかる仮テキストを入れる
            - alt属性にはその画像で表現すべき内容を詳細に記述
            - キャプションは画像の補足説明を記載
            
            **画像の必須属性：**
            - `alt`: 画像の代替テキスト（必須・空でも設定）
            - `width`/`height`: 画像サイズ（レイアウトシフト防止）
            - `loading="lazy"`: 遅延読み込み（パフォーマンス向上）
            - `decoding="async"`: 非同期デコード（パフォーマンス向上）
            
            ### 9. レビューカードの使用例
            
            ```html
            <div class="review-cards-section">
              <div class="review-card">
                <div class="review-avatar">
                  <img src="avatar.jpg" alt="30代/会社員">
                </div>
                <div class="review-content">
                  <h3 class="review-author">30代/会社員</h3>
                  <p class="review-text">とても満足しています。スタッフの対応も丁寧で、また利用したいと思います。</p>
                </div>
              </div>
            </div>
            ```
            
            ### 10. CTAセクション
            
            ```html
            <section class="article-cta-section">
              <h2>【記事テーマに合わせた行動喚起タイトル】</h2>
              <p>【記事内容を踏まえた誘導文】</p>
              <a href="https://beauty.hotpepper.jp/kr/slnH000618948/" class="article-cta-button">ご予約はこちら</a>
            </section>
            ```
            
            ## 生成の指示
            
            以下の手順で記事を生成してください：
            
            1. <strong>必ずWriteツールを使用して</strong> `output/${{ needs.initialize.outputs.article_id }}/final_article.html` というファイルパスで新規ファイルを作成
            2. そのファイルに、`<div class="article-content">` で開始し `</div>` で終了する完全なHTMLコードを書き込む
            3. インラインスタイル（`<style>`タグ）は含めない
            
            <strong>重要</strong>: ファイル名は必ず `final_article.html` とし、パスは `output/${{ needs.initialize.outputs.article_id }}/` 配下に配置してください。
            
            **画像挿入の必須要件**：
            1. 画像プレースホルダー（`<figure class="article-content-image">`）を最低4-5箇所配置
            2. ヒーロー画像は記事冒頭に必須
            3. 各主要セクション（H2）に最低1つの画像を配置
            4. 画像のalt属性とキャプションは具体的で意味のある内容にする
            5. src属性には `[ヒーロー画像]` `[セクション1画像]` など位置がわかる仮テキストを記載
            
            文字数はPhase 2で決定した配分に従い、総文字数: ${{ inputs.word_count }}±300文字を遵守してください。
            
            ## 品質チェックリスト（エラー防止重点項目）
            
            ### 必須チェック項目：
            - <strong>ARTICLE-TEMPLATE-README.md仕様に完全準拠</strong>
            - Phase 2の構成通りのセクション構成
            - セマンティックなHTML構造
            - <strong>画像プレースホルダーが最低4-5箇所に配置されている</strong>
            - <strong>ヒーロー画像が記事冒頭に配置されている</strong>
            - <strong>各主要セクション（H2）に画像が配置されている</strong>
            
            ### HTMLタグの整合性（エラー防止）：
            - **一意のID設定**: すべてのinputタグに一意のIDを設定（faq1, faq2, faq3...）
            - **ID対応確認**: labelのfor属性とinputのidを完全一致させる
            - **タグの開始・終了**: divタグやsectionタグの開始・終了を正確に対応させる
            - **ID重複禁止**: 同じidを複数回使用しない
            - **メインコンテナ**: `<div class="article-content">`が1つの記事に1つのみ
            
            ### スタイル仕様の遵守：
            - strongタグの適切な使用（文章内の重要ポイントのみ、ラベルには使用禁止）
            - ハイライトボックスの制限遵守（**1セクション1個まで厳守**）
            - FAQの構造が標準仕様通り（checkbox + label + span、ID重複なし）
            - 基本構成はh3見出し + pテキストのシンプルな構造
            
            ### コンテンツ品質：
            - アンカーリンクが正しく機能する目次
            - リサーチ結果から5つ以上の出典を引用
            - 出典リンクの形式が正しい（fn-1, fnref-1等）
            - CTAが記事内容に最適化されている
            - 指定文字数を遵守
            - ペルソナに最適化された表現
            - 薬機法・景表法に配慮した表現
          
          allowed_tools: |
            Read,
            Write,
            Edit
          
          claude_env: |
            ARTICLE_ID=${{ needs.initialize.outputs.article_id }}
            TITLE=${{ inputs.article_title }}
            APPROACH_TARGET=${{ inputs.approach_target }}
            MAIN_KEYWORDS=${{ inputs.main_keywords }}
            WORD_COUNT=${{ inputs.word_count }}
          
          max_turns: "15"

      - name: Verify article generation with fallback
        id: verify-article
        run: |
          ARTICLE_DIR="output/${{ needs.initialize.outputs.article_id }}"
          echo "🔍 Checking for generated article file..."
          
          if [ -f "$ARTICLE_DIR/final_article.html" ]; then
            echo "✅ Found final_article.html"
            echo "article_found=true" >> $GITHUB_OUTPUT
            echo "fallback_used=false" >> $GITHUB_OUTPUT
          else
            echo "⚠️ Primary generation failed, checking for fallback..."
            echo "📁 Contents of $ARTICLE_DIR:"
            ls -la "$ARTICLE_DIR/" || echo "Directory not found"
            
            # Check if any HTML file exists
            if [ -f "$ARTICLE_DIR/article.html" ]; then
              mv "$ARTICLE_DIR/article.html" "$ARTICLE_DIR/final_article.html"
              echo "✅ Found article.html, renamed to final_article.html"
              echo "article_found=true" >> $GITHUB_OUTPUT
              echo "fallback_used=false" >> $GITHUB_OUTPUT
            else
              echo "❌ ERROR: No HTML article generated!"
              echo "article_found=false" >> $GITHUB_OUTPUT
              exit 1
            fi
          fi

      - name: Upload content artifacts
        uses: actions/upload-artifact@v4
        with:
          name: content-${{ needs.initialize.outputs.article_id }}
          path: output/${{ needs.initialize.outputs.article_id }}
          retention-days: 30

  # ジョブ7: ファクトチェック（品質スコア付き）
  factcheck:
    needs: [initialize, generate-content]
    runs-on: ubuntu-latest
    environment: GA
    timeout-minutes: 15
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Download artifacts
        uses: actions/download-artifact@v4
        with:
          pattern: '*-${{ needs.initialize.outputs.article_id }}'
          path: output/${{ needs.initialize.outputs.article_id }}
          merge-multiple: true

      - name: Debug - Check files before factcheck
        run: |
          echo "📁 Files before factcheck:"
          ls -la output/${{ needs.initialize.outputs.article_id }}/
          echo ""
          echo "🔧 Environment variables:"
          echo "ARTICLE_ID: ${{ needs.initialize.outputs.article_id }}"
          echo "WORKSPACE: ${{ github.workspace }}"
          echo "Expected factcheck path: ${{ github.workspace }}/output/${{ needs.initialize.outputs.article_id }}/factcheck_report.json"
          echo ""
          echo "📄 Checking final_article.md:"
          if [ -f "output/${{ needs.initialize.outputs.article_id }}/final_article.md" ]; then
            echo "✅ final_article.md exists"
            wc -l output/${{ needs.initialize.outputs.article_id }}/final_article.md
          else
            echo "❌ final_article.md NOT found"
          fi
          echo ""
          echo "📄 Checking research_results.json:"
          if [ -f "output/${{ needs.initialize.outputs.article_id }}/research_results.json" ]; then
            echo "✅ research_results.json exists"
            wc -l output/${{ needs.initialize.outputs.article_id }}/research_results.json
          else
            echo "❌ research_results.json NOT found"
          fi

      - name: Fact-check article with Claude
        uses: anthropics/claude-code-base-action@beta
        with:
          anthropic_api_key: ${{ secrets.ANTHROPIC_API_KEY }}
          
          prompt: |
            # 記事ファクトチェック・品質スコア算出
            
            記事のファクトチェックを行い、品質スコアを算出してください。
            
            ## タスク
            
            まず、以下のファイルを読み込んで内容を確認してください：
            - output/${{ needs.initialize.outputs.article_id }}/final_article.html: 記事本文
            - output/${{ needs.initialize.outputs.article_id }}/research_results.json: リサーチ結果
            
            ## チェック観点
            
            ### 1. 事実の正確性
            - 記載されている数値・統計データの正確性
            - リサーチ結果との整合性
            - 出典の信頼性
            
            ### 2. 薬機法・景表法の遵守
            - 効果・効能の過度な表現がないか
            - 「必ず」「絶対」などの断定的表現の確認
            - 医学的根拠のない主張がないか
            
            ### 3. 科学的・医学的妥当性
            - 専門的主張の根拠の有無
            - 最新の研究結果との整合性
            - 誤解を招く表現がないか
            
            ### 4. ペルソナへの配慮
            - ペルソナが誤解しやすい表現はないか
            - より分かりやすい説明が必要な箇所はないか
            
            ### 5. ARTICLE-TEMPLATE-README.md仕様準拠（完全チェック）
            
            **HTMLタグの整合性チェック：**
            - すべてのinputタグに一意のIDが設定されているか（faq1, faq2, faq3...）
            - labelのfor属性とinputのidが完全一致しているか
            - 同じidが複数回使用されていないか（ID重複エラーチェック）
            - divタグやsectionタグの開始・終了が正しく対応しているか
            - `<div class="article-content">`が1つの記事に1つのみか
            
            **スタイル仕様チェック：**
            - CSSクラス名が仕様通りか
            - strongタグの使用が適切か（文章内の重要ポイントのみ、ラベルには不使用）
            - ハイライトボックスが**1セクション1個以内を厳守**しているか
            - FAQの構造が正しいか（checkbox + label + span、質問文がspan要素で囲まれているか）
            - 出典リンクの形式が正しいか（fn-1, fnref-1等の相互リンク）
            - 基本構成がh3見出し + pテキストのシンプルな構造になっているか
            
            ## 出力形式
            
            ### 1. 記事の内容をチェック
            上記5つの観点で詳細に確認し、問題箇所があれば具体的に指摘してください。
            
            ### 2. 修正が必要な場合
            output/${{ needs.initialize.outputs.article_id }}/final_article.html を直接編集し、修正理由を明記してください。
            
            ### 3. 品質レポートを作成
            output/${{ needs.initialize.outputs.article_id }}/factcheck_report.json として以下のJSON形式で保存：
            
            ```json
            {
              "overall_quality_score": 85,
              "fact_accuracy_score": 90,
              "legal_compliance_score": 95,
              "scientific_validity_score": 80,
              "source_reliability_score": 85,
              "issues_found": [
                {
                  "type": "fact_error|legal_compliance|scientific_validity|clarity",
                  "description": "具体的な問題の説明",
                  "location": "記事内の該当箇所（見出しやキーワード）",
                  "severity": "high|medium|low",
                  "corrected": true,
                  "correction_detail": "どのように修正したかの説明"
                }
              ],
              "recommendations": [
                "より具体的な統計データの追加を推奨",
                "専門用語の説明をもう少し詳しく"
              ],
              "strengths": [
                "信頼できる出典を5つ以上引用",
                "ペルソナに合わせた分かりやすい表現"
              ],
              "timestamp": "現在時刻",
              "total_issues": 3,
              "corrected_issues": 2,
              "factcheck_summary": "記事全体の品質についての総合コメント"
            }
            ```
            
            ## スコア基準
            - **overall_quality_score** (0-100): 総合品質スコア
            - **fact_accuracy_score** (0-100): 事実の正確性
            - **legal_compliance_score** (0-100): 薬機法・景表法遵守度
            - **scientific_validity_score** (0-100): 科学的・医学的妥当性
            - **source_reliability_score** (0-100): 情報源の信頼性
            
            ## 注意点
            - **客観的な評価**: 感情的な判断ではなく、事実に基づいて評価
            - **建設的なフィードバック**: 問題点だけでなく改善案も提示
            - **ペルソナ視点**: 読者（ペルソナ）の理解しやすさを重視
            - **法規制の理解**: 健康・美容分野の表現規制を正しく適用
          
          allowed_tools: |
            Read,
            Write,
            Edit
          
          claude_env: |
            ARTICLE_ID=${{ needs.initialize.outputs.article_id }}
            WORKSPACE=${{ github.workspace }}
          
          max_turns: "10"

      - name: Debug - Check Claude execution
        run: |
          echo "🔍 Post-Claude execution check:"
          echo "Working directory: $(pwd)"
          echo ""
          echo "📁 All files in output directory after Claude:"
          ls -la output/${{ needs.initialize.outputs.article_id }}/
          echo ""
          echo "🔍 Looking for any JSON files created:"
          find output/${{ needs.initialize.outputs.article_id }}/ -name "*.json" -type f

      - name: Verify factcheck output
        run: |
          echo "🔍 Checking factcheck output..."
          if [ -f "output/${{ needs.initialize.outputs.article_id }}/factcheck_report.json" ]; then
            echo "✅ factcheck_report.json created successfully"
            ls -la output/${{ needs.initialize.outputs.article_id }}/factcheck_report.json
          else
            echo "❌ factcheck_report.json NOT found!"
            echo "📁 Contents of output directory:"
            ls -la output/${{ needs.initialize.outputs.article_id }}/ || echo "Directory not found"
          fi

      - name: Upload factcheck artifacts
        uses: actions/upload-artifact@v4
        with:
          name: factcheck-${{ needs.initialize.outputs.article_id }}
          path: output/${{ needs.initialize.outputs.article_id }}
          retention-days: 30

  # ジョブ8: SEOメタ情報生成
  generate-seo-meta:
    needs: [initialize, analysis, generate-content]
    runs-on: ubuntu-latest
    environment: GA
    timeout-minutes: 10
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Download artifacts
        uses: actions/download-artifact@v4
        with:
          pattern: '*-${{ needs.initialize.outputs.article_id }}'
          path: output/${{ needs.initialize.outputs.article_id }}
          merge-multiple: true

      - name: Debug - Check files before SEO
        run: |
          echo "📁 Files before SEO metadata generation:"
          ls -la output/${{ needs.initialize.outputs.article_id }}/
          echo ""
          echo "🔧 Environment variables:"
          echo "ARTICLE_ID: ${{ needs.initialize.outputs.article_id }}"
          echo "WORKSPACE: ${{ github.workspace }}"
          echo "Expected SEO path: ${{ github.workspace }}/output/${{ needs.initialize.outputs.article_id }}/seo_metadata.json"
          echo ""
          echo "📄 Checking required files:"
          for file in final_article.md input_params.json phase1_output.json; do
            if [ -f "output/${{ needs.initialize.outputs.article_id }}/$file" ]; then
              echo "✅ $file exists"
            else
              echo "❌ $file NOT found"
            fi
          done

      - name: Generate SEO metadata with Claude
        uses: anthropics/claude-code-base-action@beta
        with:
          anthropic_api_key: ${{ secrets.ANTHROPIC_API_KEY }}
          
          prompt: |
            # SEOメタ情報生成
            
            記事のSEOメタ情報を生成してください。
            
            ## 入力情報
            
            ### 完成記事
            output/${{ needs.initialize.outputs.article_id }}/final_article.html を読み込んでください（Phase 4でファクトチェック済みの最終HTML記事）
            
            ### 基本情報
            - **記事タイトル**: ${{ inputs.article_title }}
            - **ターゲットペルソナ**: ${{ inputs.approach_target }}
            - **目標文字数**: ${{ inputs.word_count }}
            
            ### Phase 1の分析結果
            output/${{ needs.initialize.outputs.article_id }}/phase1_output.json から以下の項目を参照：
            - **メインキーワード**: main_keyword
            - **関連キーワード**: related_keywords
            - **検索意図**: search_intent
            - **メタキーワード**: ${{ inputs.main_keywords }}
            
            ## タスク
            
            まず、以下のファイルを読み込んで内容を理解してください：
            - output/${{ needs.initialize.outputs.article_id }}/final_article.html: 記事本文
            - output/${{ needs.initialize.outputs.article_id }}/phase1_output.json: 分析結果
            
            記事内容を分析し、SEOに最適化されたメタ情報を生成してください。
            
            ### 1. 記事内容の分析
            - 実際の文字数カウント
            - キーワード出現頻度の確認
            - 主要なポイントの抽出
            - 読了時間の推定
            
            ### 2. SEOメタ情報の生成
            output/${{ needs.initialize.outputs.article_id }}/seo_metadata.json として以下のJSON形式で保存：
            
            ```json
            {
              "title": "記事タイトル（60文字以内、検索エンジン表示用）",
              "meta_description": "記事の要約（120-160文字、検索結果に表示される説明文）",
              "meta_keywords": ["キーワード1", "キーワード2", "キーワード3", "キーワード4", "キーワード5"],
              "og_title": "SNS用タイトル（記事タイトルと同じか、より魅力的に調整）",
              "og_description": "SNS用説明文（meta_descriptionと同じか調整版）",
              "focus_keyword": "最も重要なメインキーワード",
              "secondary_keywords": ["サブキーワード1", "サブキーワード2", "サブキーワード3"],
              "keyword_density": {
                "メインキーワード": 2.8,
                "サブキーワード1": 1.5,
                "サブキーワード2": 1.2
              },
              "schema_type": "Article",
              "estimated_reading_time": "5分",
              "actual_word_count": 3150,
              "seo_analysis": {
                "title_optimization": "検索意図に合致、文字数適切",
                "keyword_distribution": "自然な配置、過度な詰め込みなし",
                "content_quality": "高品質、E-E-A-T原則に準拠"
              },
              "created_at": "現在時刻"
            }
            ```
            
            ### 3. SEO最適化のポイント
            
            <strong>メタタイトル（title）：</strong>
            - 60文字以内
            - メインキーワードを前半に配置
            - クリックしたくなる魅力的な表現
            - ペルソナの検索意図に合致
            
            <strong>メタディスクリプション：</strong>
            - 120-160文字
            - 記事の価値を明確に伝える
            - 行動を促す表現（「〇〇の方法を解説」など）
            - 自然にキーワードを含める
            
            <strong>キーワード戦略：</strong>
            - メインキーワードの密度: 2-4%
            - 関連キーワードの自然な配置
            - LSIキーワード（関連語）の活用
            
            <strong>OGP設定：</strong>
            - SNSでの見栄えを考慮
            - 視覚的にインパクトのある表現
            
            ### 4. キーワード密度計算方法
            ```
            キーワード密度(%) = (キーワード出現回数 / 総単語数) × 100
            ```
            
            ## 注意点
            
            1. **自然な日本語**: キーワードを無理に詰め込まない
            2. **ユーザー視点**: 検索者が求める情報を明確に示す
            3. **競合差別化**: 他記事との差別化ポイントを強調
            4. **E-E-A-T**: 専門性・権威性・信頼性を意識
            5. **ペルソナ最適化**: ターゲット層に響く表現を選択
          
          allowed_tools: |
            Read,
            Write
          
          claude_env: |
            ARTICLE_ID=${{ needs.initialize.outputs.article_id }}
            WORD_COUNT=${{ inputs.word_count }}
            WORKSPACE=${{ github.workspace }}
          
          max_turns: "30"

      - name: Debug - Check Claude execution for SEO
        run: |
          echo "🔍 Post-Claude SEO execution check:"
          echo "Working directory: $(pwd)"
          echo ""
          echo "📁 All files in output directory after Claude SEO:"
          ls -la output/${{ needs.initialize.outputs.article_id }}/
          echo ""
          echo "🔍 Looking for any JSON files created:"
          find output/${{ needs.initialize.outputs.article_id }}/ -name "*.json" -type f

      - name: Verify SEO metadata output
        run: |
          echo "🔍 Checking SEO metadata output..."
          if [ -f "output/${{ needs.initialize.outputs.article_id }}/seo_metadata.json" ]; then
            echo "✅ seo_metadata.json created successfully"
            ls -la output/${{ needs.initialize.outputs.article_id }}/seo_metadata.json
          else
            echo "❌ seo_metadata.json NOT found!"
            echo "📁 Contents of output directory:"
            ls -la output/${{ needs.initialize.outputs.article_id }}/ || echo "Directory not found"
          fi

      - name: Upload SEO metadata artifacts
        uses: actions/upload-artifact@v4
        with:
          name: seo-meta-${{ needs.initialize.outputs.article_id }}
          path: output/${{ needs.initialize.outputs.article_id }}
          retention-days: 30

  # ジョブ9: 画像生成（MCP + Imagen4）
  generate-images:
    if: ${{ inputs.enable_image_generation }}
    needs: [initialize, generate-structure]
    runs-on: ubuntu-latest
    environment: GA
    timeout-minutes: 20
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Download artifacts
        uses: actions/download-artifact@v4
        with:
          pattern: '*-${{ needs.initialize.outputs.article_id }}'
          path: output/${{ needs.initialize.outputs.article_id }}
          merge-multiple: true

      - name: Generate Images with Claude + MCP Imagen4
        uses: anthropics/claude-code-base-action@beta
        with:
          anthropic_api_key: ${{ secrets.ANTHROPIC_API_KEY }}
          
          prompt: |
            記事に最適な画像を複数枚生成してください。合計4-5枚の画像を生成します。
            
            タスク:
            1. 記事内容を理解:
               - input_params.json でペルソナを確認
               - final_article.md で記事内容を把握（あれば）
               - 01_article_structure.md で構成を理解
            
            2. 以下の手順で個別に画像を生成:
               
               **ステップ1**: ヒーロー画像（16:9）を生成
               - mcp__gemini-imagen__generate_image を使用
               - プロンプト: "記事全体のイメージを表現する16:9のヒーロー画像"
               - ペルソナに合わせたメインビジュアル
               
               **ステップ2**: セクション画像1（4:3）を生成  
               - mcp__gemini-imagen__generate_image を使用
               - プロンプト: "記事の導入部分を表現する4:3の画像"
               
               **ステップ3**: セクション画像2（4:3）を生成
               - mcp__gemini-imagen__generate_image を使用  
               - プロンプト: "記事の方法・手順部分を表現する4:3の画像"
               
               **ステップ4**: セクション画像3（4:3）を生成
               - mcp__gemini-imagen__generate_image を使用
               - プロンプト: "記事の結果・効果部分を表現する4:3の画像"
               
               **ステップ5**: セクション画像4（4:3）を生成
               - mcp__gemini-imagen__generate_image を使用
               - プロンプト: "記事のまとめ部分を表現する4:3の画像"
            
            3. 画像生成の方針（全画像共通）:
               - ペルソナの年代・性別に合わせたビジュアル
               - 清潔感と信頼感のあるデザイン
               - 記事内容と調和したカラーパレット
               - テキストやロゴは含まない
               - imagen-4 または imagen-4-ultra を使用
            
            4. メタデータ作成:
               - images/metadata.json に生成情報を記録
               - 各画像のプロンプト、用途、サイズを記載
               
            重要: 必ず5回のmcp__gemini-imagen__generate_imageを実行して、複数枚の画像を生成してください。
          
          mcp_config: |
            {
              "mcpServers": {
                "gemini-imagen": {
                  "command": "npx",
                  "args": [
                    "-y", 
                    "gemini-imagen-mcp-server",
                    "--model", "imagen-4"
                  ],
                  "env": {
                    "GEMINI_API_KEY": "${{ secrets.GEMINI_API_KEY }}"
                  }
                }
              }
            }
          
          allowed_tools: |
            Read,
            Write,
            mcp__gemini-imagen__generate_image,
            mcp__gemini-imagen__list_models
          
          claude_env: |
            ARTICLE_ID=${{ needs.initialize.outputs.article_id }}
          
          max_turns: "30"

      - name: Process generated images
        run: |
          ARTICLE_DIR="output/${{ needs.initialize.outputs.article_id }}"
          IMAGE_DIR="${ARTICLE_DIR}/images"
          
          # MCPサーバーは imagen/ ディレクトリに保存する
          if [ -d "imagen" ] && [ "$(ls -A imagen 2>/dev/null)" ]; then
            echo "✅ Images found in imagen directory:"
            ls -la imagen/
            
            # 画像を記事ディレクトリにコピー
            mkdir -p $IMAGE_DIR
            cp imagen/*.png $IMAGE_DIR/ 2>/dev/null || true
            cp imagen/*.jpg $IMAGE_DIR/ 2>/dev/null || true
            
            # リネーム（オプション）
            cd $IMAGE_DIR
            i=1
            for img in *.png *.jpg; do
              if [ -f "$img" ]; then
                if [ $i -eq 1 ]; then
                  mv "$img" "hero_image.png" 2>/dev/null || true
                else
                  mv "$img" "section_$((i-1))_image.png" 2>/dev/null || true
                fi
                i=$((i+1))
              fi
            done
            cd -
            
            echo "Final images:"
            ls -la $IMAGE_DIR
          else
            echo "⚠️ No images generated"
          fi

      - name: Upload image artifacts
        uses: actions/upload-artifact@v4
        with:
          name: images-${{ needs.initialize.outputs.article_id }}
          path: |
            output/${{ needs.initialize.outputs.article_id }}/images
            imagen/
          retention-days: 30

  # ジョブ10: 最終処理（5つの成果物）
  finalize:
    needs: [initialize, analysis, research-merge, generate-structure, generate-content, factcheck, generate-seo-meta, generate-images]
    if: always()
    runs-on: ubuntu-latest
    environment: GA
    timeout-minutes: 10
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          pattern: '*-${{ needs.initialize.outputs.article_id }}'
          path: output/${{ needs.initialize.outputs.article_id }}
          merge-multiple: true

      - name: Create final package with Claude
        uses: anthropics/claude-code-base-action@beta
        with:
          anthropic_api_key: ${{ secrets.ANTHROPIC_API_KEY }}
          
          prompt: |
            # 最終まとめ・成果物整理
            
            V4記事生成ワークフローの最終パッケージを作成し、5つの主要成果物を整理してください。
            
            ## 入力情報
            
            ### Phase 1の成果物
            output/${{ needs.initialize.outputs.article_id }}/phase1_output.json を読み込んでください
            
            ### Phase 2の成果物
            以下のファイルを読み込んでください：
            - output/${{ needs.initialize.outputs.article_id }}/01_article_structure.md: 記事構成
            - output/${{ needs.initialize.outputs.article_id }}/02_content_plan.md: コンテンツ計画
            
            ### Phase 3の成果物
            output/${{ needs.initialize.outputs.article_id }}/final_article.html を読み込んでください
            
            ### Phase 4の成果物
            output/${{ needs.initialize.outputs.article_id }}/factcheck_report.json を読み込んでください
            
            ### Phase 5の成果物
            output/${{ needs.initialize.outputs.article_id }}/seo_metadata.json を読み込んでください
            
            ### リサーチ情報（まとめ用）
            output/${{ needs.initialize.outputs.article_id }}/research_results.json を読み込んでください
            
            ## タスク
            
            ワークフローの出力と同等のクオリティで、以下の成果物を整理・まとめてください。
            
            ### 1. 最終成果物リスト（V4準拠）
            
            <strong>5つの主要成果物:</strong>
            1. <strong>research_results.json</strong> - リサーチ結果（信頼性スコア付き）
            2. <strong>factcheck_report.json</strong> - ファクトチェック品質スコア
            3. <strong>seo_metadata.json</strong> - SEOメタ情報
            4. <strong>final_article.html</strong> - 最終記事（HTML形式）
            5. <strong>deliverables_summary.md</strong> - 成果物説明書
            
            ### 2. research_results.json の確認と整理
            既存のresearch_results.jsonが適切な形式になっているか確認し、必要に応じて以下の形式に整理：
            
            ```json
            {
              "research_data": [
                {
                  "query": "リサーチクエリ",
                  "results": [
                    {
                      "title": "情報源のタイトル",
                      "url": "https://example.com",
                      "summary": "要約された内容",
                      "reliability_score": 85,
                      "source_type": "academic|news|official|blog",
                      "publication_date": "2024-01-01",
                      "relevance_score": 90
                    }
                  ]
                }
              ],
              "research_summary": {
                "total_sources": 15,
                "average_reliability": 82,
                "key_findings": [
                  "重要な発見1",
                  "重要な発見2",
                  "重要な発見3"
                ],
                "research_gaps": [
                  "更なる調査が必要な点"
                ]
              },
              "created_at": "現在時刻"
            }
            ```
            
            ### 3. deliverables_summary.md の作成
            
            output/${{ needs.initialize.outputs.article_id }}/deliverables_summary.md として以下の形式で作成：
            
            ```markdown
            # V4記事生成完了レポート
            
            ## 基本情報
            - <strong>記事タイトル</strong>: ${{ inputs.article_title }}
            - <strong>ターゲットペルソナ</strong>: ${{ inputs.approach_target }}
            - <strong>生成日時</strong>: [現在日時]
            - <strong>総文字数</strong>: [実際の文字数]文字
            
            ## 成果物概要
            
            ### 1. final_article.html - 最終記事
            - <strong>形式</strong>: HTML（<div class="article-content">形式）
            - <strong>特徴</strong>: 
              - ペルソナ最適化済み
              - 出典リンク付き（5つ以上）
              - 薬機法・景表法対応
              - CTA最適化済み
            
            ### 2. research_results.json - リサーチ結果
            - <strong>収集ソース数</strong>: [実際の数]件
            - <strong>平均信頼性スコア</strong>: [実際のスコア]点
            - <strong>主要発見</strong>: 
              - [実際の発見をリストアップ]
            
            ### 3. factcheck_report.json - 品質スコア
            - <strong>総合品質スコア</strong>: [実際のスコア]点/100点
            - <strong>事実正確性</strong>: [実際のスコア]点/100点
            - <strong>法規制遵守</strong>: [実際のスコア]点/100点
            - <strong>科学的妥当性</strong>: [実際のスコア]点/100点
            - <strong>修正箇所</strong>: [実際の数]件（全て対応済み）
            
            ### 4. seo_metadata.json - SEO情報
            - <strong>メインキーワード</strong>: [実際のキーワード]
            - <strong>キーワード密度</strong>: [実際の密度]%（適正範囲）
            - <strong>メタディスクリプション</strong>: 最適化済み（[実際の文字数]文字）
            - <strong>推定読了時間</strong>: [実際の時間]分
            
            ### 5. 画像配置情報
            - <strong>ヒーロー画像</strong>: セクション導入用
            - <strong>セクション画像</strong>: 各主要セクションに配置
            - <strong>説明画像</strong>: 手順・方法の視覚的説明用
            - <strong>総画像数</strong>: [実際の数]枚（記事内配置済み）
            
            ## 品質評価サマリー
            
            ### 強み
            - [Phase 4で評価された実際の強みをリストアップ]
            
            ### 改善対応
            - [実際に修正された問題点をリストアップ]
            
            ## ペルソナ最適化のポイント
            - **言葉遣い**: [ペルソナに合わせた表現レベル]
            - **内容深度**: [ペルソナの知識レベルに適合]
            - **関心領域**: [ペルソナの興味・悩みに対応]
            - **行動喚起**: [ペルソナの行動パターンに最適化]
            
            ## SEO最適化サマリー
            - **検索意図**: [検索意図] に最適化
            - **競合優位性**: [他記事との差別化ポイント]
            - **E-E-A-T対応**: 専門性・権威性・信頼性を確保
            
            ## 法規制対応
            - **薬機法**: 効果効能の適切な表現
            - **景表法**: 優良誤認の防止
            - **表現調整**: [具体的な調整内容]
            
            ## 次のアクション（推奨）
            1. **公開前確認**: 最終的な校正・確認
            2. **画像最適化**: alt属性とファイル名の最適化
            3. **内部リンク**: 関連記事との連携
            4. **効果測定**: 公開後のパフォーマンス分析
            
            ## 制作ノート
            - **制作時間**: 約[X]時間（6フェーズ）
            - **修正回数**: [実際の回数]回
            - **特記事項**: [特別な配慮事項があれば記載]
            ```
            
            ## 品質保証チェック
            
            ### 成果物の完全性確認
            - 5つの主要成果物が全て揃っていることを確認
            - JSONファイルの構文が正しいことを確認
            - HTMLの構造が正しいことを確認
            - リンクが正しく機能することを確認
            - 文字数が要件を満たしていることを確認
            
            ### 内容の一貫性確認
            - 全フェーズの内容が整合していることを確認
            - キーワードが一貫して使用されていることを確認
            - ペルソナ設定が全体で統一されていることを確認
            - 品質基準を満たしていることを確認
            
            ## 注意点
            - 全てのファイルが存在することを確認
            - スコアや統計は実際のデータから抽出して記載
            - プレースホルダー（[実際の〜]）は実際の値に置き換える
            - 不要なファイルは削除しない（制作側で選択）
          
          allowed_tools: |
            Read,
            Write,
            Edit
          
          claude_env: |
            ARTICLE_ID=${{ needs.initialize.outputs.article_id }}
          
          max_turns: "10"

      # Google Drive upload removed - using GitHub Artifacts only

      - name: Create workflow summary
        if: always()
        run: |
          ARTICLE_DIR="output/${{ needs.initialize.outputs.article_id }}"
          
          echo "## 📝 Article Generation V4 Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### 📋 Input Parameters" >> $GITHUB_STEP_SUMMARY
          echo "- <strong>Title</strong>: ${{ inputs.article_title }}" >> $GITHUB_STEP_SUMMARY
          echo "- <strong>切り口・ターゲット</strong>: ${{ inputs.approach_target }}" >> $GITHUB_STEP_SUMMARY
          echo "- <strong>主要KW</strong>: ${{ inputs.main_keywords }}" >> $GITHUB_STEP_SUMMARY
          echo "- <strong>E-E-A-T要素</strong>: ${{ inputs.eeat_elements }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          echo "### 🎯 V4 Deliverables" >> $GITHUB_STEP_SUMMARY
          echo "1. <strong>research_results.json</strong> - Research data with reliability scores" >> $GITHUB_STEP_SUMMARY
          echo "2. <strong>factcheck_report.json</strong> - Quality scores and fact-checking results" >> $GITHUB_STEP_SUMMARY
          echo "3. <strong>seo_metadata.json</strong> - SEO metadata (keywords, meta description, etc.)" >> $GITHUB_STEP_SUMMARY
          echo "4. <strong>images/</strong> - Generated images (hero + section images)" >> $GITHUB_STEP_SUMMARY  
          echo "5. <strong>final_article.html</strong> - HTML article with embedded images" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          if [ -f "$ARTICLE_DIR/V4_deliverables.md" ]; then
            echo "### 📊 Generation Summary" >> $GITHUB_STEP_SUMMARY
            cat "$ARTICLE_DIR/V4_deliverables.md" >> $GITHUB_STEP_SUMMARY
          fi
          
          if [ -d "$ARTICLE_DIR/images" ]; then
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "### 🖼️ Generated Images" >> $GITHUB_STEP_SUMMARY
            echo "- Image count: $(find $ARTICLE_DIR/images -name "*.png" -o -name "*.jpg" | wc -l)" >> $GITHUB_STEP_SUMMARY
          fi

      - name: Create organized final package
        run: |
          ARTICLE_DIR="output/${{ needs.initialize.outputs.article_id }}"
          FINAL_DIR="final_package"
          
          # 詳細デバッグ: アーティファクトとファイルの確認
          echo "====== FINAL PACKAGE CREATION DEBUG ======"
          echo "🔍 ARTICLE_DIR: $ARTICLE_DIR"
          echo "📁 Article directory check:"
          [ -d "$ARTICLE_DIR" ] && echo "✅ Directory exists" || echo "❌ Directory NOT found"
          
          echo ""
          echo "📋 All downloaded artifacts and files:"
          find . -name "*.json" -o -name "*.md" -o -name "*.png" -o -name "*.jpg" | head -20
          
          echo ""
          echo "🖼️ Specifically looking for images:"
          echo "PNG files:"
          find . -name "*.png" -type f 2>/dev/null | head -10
          echo "JPG files:"
          find . -name "*.jpg" -o -name "*.jpeg" -type f 2>/dev/null | head -10
          echo ""
          echo "Image directories:"
          find . -name "images" -type d 2>/dev/null
          find . -name "imagen" -type d 2>/dev/null
          
          echo ""
          echo "🔍 Current working directory contents:"
          ls -la
          
          echo ""
          echo "🔍 Specifically looking for factcheck and SEO files:"
          echo "Factcheck files:"
          find . -name "*factcheck*" -type f 2>/dev/null || echo "No factcheck files found"
          echo "SEO files:"
          find . -name "*seo*" -type f 2>/dev/null || echo "No SEO files found"
          
          echo ""
          echo "🔍 Output directory contents:"
          if [ -d "output/" ]; then
            find output/ -type f | head -20
          else
            echo "❌ No output directory found"
          fi
          
          echo "=============================================="
          
          # 最終パッケージ用のディレクトリを作成
          mkdir -p $FINAL_DIR
          
          # V4の4つの成果物を収集（アーティファクトから直接）
          echo ""
          echo "🔄 Collecting V4 deliverables from artifacts..."
          
          # 1. メイン記事 (HTML) - アーティファクトから検索
          ARTICLE_FOUND=false
          
          # 複数の場所から記事ファイルを検索
          POSSIBLE_ARTICLES=(
            "$ARTICLE_DIR/final_article.html"
            "$ARTICLE_DIR/article.html"
            "final_article.html"
            "article.html"
          )
          
          for article_path in "${POSSIBLE_ARTICLES[@]}"; do
            if [ -f "$article_path" ]; then
              cp "$article_path" "$FINAL_DIR/article.html"
              echo "✅ Found and copied article: $article_path ($(wc -c < "$article_path") bytes)"
              ARTICLE_FOUND=true
              break
            fi
          done
          
          # 記事が見つからない場合は.htmlファイルを検索
          if [ "$ARTICLE_FOUND" = false ]; then
            echo "⚠️ Standard article files not found, searching for any .html files..."
            HTML_FILE=$(find . -name "*.html" -type f ! -name "index.html" | head -1)
            if [ -n "$HTML_FILE" ]; then
              cp "$HTML_FILE" "$FINAL_DIR/article.html"
              echo "✅ Using fallback .html file: $HTML_FILE ($(wc -c < "$HTML_FILE") bytes)"
              ARTICLE_FOUND=true
            fi
          fi
          
          if [ "$ARTICLE_FOUND" = false ]; then
            echo "❌ ERROR: No article file found in any location!"
            echo "Creating minimal article as last resort..."
            echo '<div class="article-content"><h2>記事生成エラー</h2><p>記事ファイルが見つかりませんでした。ワークフローの実行ログを確認してください。</p></div>' > "$FINAL_DIR/article.html"
          fi
          
          # 2. リサーチ結果 - 複数の場所から検索
          RESEARCH_LOCATIONS=(
            "$ARTICLE_DIR/research_results.json"
            "research_results.json"
            "research-*.json"
          )
          
          RESEARCH_FOUND=false
          for loc in "${RESEARCH_LOCATIONS[@]}"; do
            if [ -f "$loc" ]; then
              cp "$loc" "$FINAL_DIR/research_results.json"
              echo "✅ Found research results: $loc"
              RESEARCH_FOUND=true
              break
            fi
          done
          
          if [ "$RESEARCH_FOUND" = false ]; then
            # 検索パターンを使用
            RESEARCH_FILE=$(find . -name "*research*.json" | head -1)
            if [ -n "$RESEARCH_FILE" ]; then
              cp "$RESEARCH_FILE" "$FINAL_DIR/research_results.json"
              echo "✅ Using research file: $RESEARCH_FILE"
            else
              echo "⚠️ No research results found"
            fi
          fi
          
          # 3. SEOメタデータ - 複数の場所から検索
          SEO_LOCATIONS=(
            "$ARTICLE_DIR/seo_metadata.json"
            "seo_metadata.json"
            "seo-*.json"
          )
          
          SEO_FOUND=false
          for loc in "${SEO_LOCATIONS[@]}"; do
            if [ -f "$loc" ]; then
              cp "$loc" "$FINAL_DIR/seo_metadata.json"
              echo "✅ Found SEO metadata: $loc"
              SEO_FOUND=true
              break
            fi
          done
          
          if [ "$SEO_FOUND" = false ]; then
            echo "⚠️ No SEO metadata found"
            echo "📁 Searching for SEO metadata files..."
            find . -name "*seo*.json" -type f 2>/dev/null | head -10
          fi
          
          # 4. ファクトチェック品質レポート - 複数の場所から検索
          FACTCHECK_LOCATIONS=(
            "$ARTICLE_DIR/factcheck_report.json"
            "factcheck_report.json"
            "factcheck-*.json"
          )
          
          FACTCHECK_FOUND=false
          for loc in "${FACTCHECK_LOCATIONS[@]}"; do
            if [ -f "$loc" ]; then
              cp "$loc" "$FINAL_DIR/factcheck_report.json"
              echo "✅ Found factcheck report: $loc"
              FACTCHECK_FOUND=true
              break
            fi
          done
          
          if [ "$FACTCHECK_FOUND" = false ]; then
            # 検索パターンを使用
            FACTCHECK_FILE=$(find . -name "*factcheck*.json" | head -1)
            if [ -n "$FACTCHECK_FILE" ]; then
              cp "$FACTCHECK_FILE" "$FINAL_DIR/factcheck_report.json"
              echo "✅ Using factcheck file: $FACTCHECK_FILE"
            else
              echo "⚠️ No factcheck report found"
              echo "📁 Searching for factcheck files..."
              find . -name "*factcheck*.json" -type f 2>/dev/null | head -10
            fi
          fi
          
          # 5. 画像フォルダ - 複数の場所から検索
          mkdir -p "$FINAL_DIR/images"
          IMAGES_FOUND=false
          
          # 標準的な画像フォルダの場所
          if [ -d "$ARTICLE_DIR/images" ]; then
            cp -r "$ARTICLE_DIR/images/"* "$FINAL_DIR/images/" 2>/dev/null || true
            echo "✅ Found images in $ARTICLE_DIR/images"
            IMAGES_FOUND=true
          fi
          
          # imagen/ フォルダから画像を検索（MCP画像生成の場所）
          if [ -d "imagen" ]; then
            echo "📁 Checking imagen/ directory for MCP generated images..."
            cp imagen/*.png "$FINAL_DIR/images/" 2>/dev/null || true
            cp imagen/*.jpg "$FINAL_DIR/images/" 2>/dev/null || true
            if [ "$(ls -A imagen/*.png 2>/dev/null)" ] || [ "$(ls -A imagen/*.jpg 2>/dev/null)" ]; then
              echo "✅ Found images in imagen/"
              IMAGES_FOUND=true
            fi
          fi
          
          # images-*/output/*/images/ から画像を検索（アーティファクトの構造）
          IMAGE_ARTIFACT_PATHS=$(find . -path "*/images-*/output/*/images" -type d 2>/dev/null)
          if [ -n "$IMAGE_ARTIFACT_PATHS" ]; then
            for img_path in $IMAGE_ARTIFACT_PATHS; do
              echo "📁 Found image artifact path: $img_path"
              cp "$img_path"/*.png "$FINAL_DIR/images/" 2>/dev/null || true
              cp "$img_path"/*.jpg "$FINAL_DIR/images/" 2>/dev/null || true
              IMAGES_FOUND=true
            done
          fi
          
          # 直接 output/*/images または output/*/imagen から検索
          if [ -d "$ARTICLE_DIR/images" ] || [ -d "$ARTICLE_DIR/imagen" ]; then
            echo "📁 Checking output artifact directories..."
            [ -d "$ARTICLE_DIR/images" ] && cp -r "$ARTICLE_DIR/images/"* "$FINAL_DIR/images/" 2>/dev/null || true
            [ -d "$ARTICLE_DIR/imagen" ] && cp -r "$ARTICLE_DIR/imagen/"* "$FINAL_DIR/images/" 2>/dev/null || true
            IMAGES_FOUND=true
          fi
          
          # その他の場所から画像を検索（最後の手段）
          if [ "$IMAGES_FOUND" = false ]; then
            echo "⚠️ Standard image locations not found, searching all directories..."
            find . -name "*.png" -o -name "*.jpg" -o -name "*.jpeg" | while read img; do
              if [[ "$img" != *"README"* ]] && [[ "$img" != *"node_modules"* ]]; then
                cp "$img" "$FINAL_DIR/images/" 2>/dev/null || true
                echo "✅ Found image: $img"
                IMAGES_FOUND=true
              fi
            done
          fi
          
          # 画像フォルダの内容を確認
          echo "📁 Final images directory contents:"
          ls -la "$FINAL_DIR/images/" 2>/dev/null || echo "No images directory created"
          
          
          # V4成果物説明
          if [ -f "$ARTICLE_DIR/V4_deliverables.md" ]; then
            cp "$ARTICLE_DIR/V4_deliverables.md" "$FINAL_DIR/deliverables.md"
          fi
          
          # 最終パッケージの内容確認
          echo ""
          echo "📦 Final package contents:"
          find "$FINAL_DIR" -type f -exec ls -la {} \;
          
          # README作成
          echo "# V4 記事生成完了パッケージ（制作向け簡易版）" > "$FINAL_DIR/README.md"
          echo "" >> "$FINAL_DIR/README.md"
          echo "<strong>記事タイトル</strong>: ${{ inputs.article_title }}" >> "$FINAL_DIR/README.md"
          echo "<strong>生成日時</strong>: $(date +%Y-%m-%d\ %H:%M:%S)" >> "$FINAL_DIR/README.md"
          echo "<strong>記事ID</strong>: ${{ needs.initialize.outputs.article_id }}" >> "$FINAL_DIR/README.md"
          echo "" >> "$FINAL_DIR/README.md"
          echo "## 📁 V4成果物（5点）" >> "$FINAL_DIR/README.md"
          echo "" >> "$FINAL_DIR/README.md"
          echo "1. <strong>article.html</strong> - 記事本文（HTML形式、画像配置済み）" >> "$FINAL_DIR/README.md"
          echo "2. <strong>research_results.json</strong> - リサーチ結果（信頼性スコア付き）" >> "$FINAL_DIR/README.md"
          echo "3. <strong>factcheck_report.json</strong> - ファクトチェック品質スコア（0-100点）" >> "$FINAL_DIR/README.md"
          echo "4. <strong>seo_metadata.json</strong> - SEOメタ情報（キーワード、メタディスクリプション等）" >> "$FINAL_DIR/README.md"
          echo "5. <strong>images/</strong> - 生成画像（各セクション用）" >> "$FINAL_DIR/README.md"
          echo "" >> "$FINAL_DIR/README.md"
          echo "## 🎯 ターゲット情報" >> "$FINAL_DIR/README.md"
          echo "" >> "$FINAL_DIR/README.md"
          echo "- <strong>切り口・ターゲット</strong>: ${{ inputs.approach_target }}" >> "$FINAL_DIR/README.md"
          echo "- <strong>主要KW</strong>: ${{ inputs.main_keywords }}" >> "$FINAL_DIR/README.md"
          echo "- <strong>E-E-A-T要素</strong>: ${{ inputs.eeat_elements }}" >> "$FINAL_DIR/README.md"
          echo "" >> "$FINAL_DIR/README.md"
          echo "## 📝 備考" >> "$FINAL_DIR/README.md"
          echo "" >> "$FINAL_DIR/README.md"
          echo "- <strong>article.html</strong>: 指定テンプレート形式のHTML（<div class=\"article-content\">で開始）" >> "$FINAL_DIR/README.md"
          echo "- 画像は各セクションに配置済み" >> "$FINAL_DIR/README.md"
          echo "- 追加のスタイルやSEO構造化が必要な場合は制作側で実施してください" >> "$FINAL_DIR/README.md"
          
          echo "📦 V4 final package created in: $FINAL_DIR"
          ls -la $FINAL_DIR/

      - name: Upload final package
        uses: actions/upload-artifact@v4
        with:
          name: FINAL_V4_ARTICLE_PACKAGE
          path: final_package
          retention-days: 30

