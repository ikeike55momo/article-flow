name: Article Generation V3 (MCP + Imagen4)

on:
  workflow_dispatch:
    inputs:
      article_title:
        description: 'Ë®ò‰∫ã„Çø„Ç§„Éà„É´'
        required: true
        type: string
        default: ''
      
      target_persona:
        description: '„Çø„Éº„Ç≤„ÉÉ„Éà„Éö„É´„ÇΩ„ÉäÔºà‰æãÔºö30‰ª£Â•≥ÊÄß„ÄÅÂÅ•Â∫∑ÊÑèË≠ò„ÅåÈ´ò„ÅÑ„ÄÅÂ≠êËÇ≤„Å¶‰∏≠Ôºâ'
        required: true
        type: string
        default: ''
      
      meta_keywords:
        description: '„É°„Çø„Ç≠„Éº„ÉØ„Éº„ÉâÔºà„Ç´„É≥„ÉûÂå∫Âàá„ÇäÔºâ'
        required: true
        type: string
        default: ''
      
      enable_image_generation:
        description: 'ÁîªÂÉèÁîüÊàê„ÇíÊúâÂäπ„Å´„Åô„Çã'
        required: false
        type: boolean
        default: true
      
      enable_drive_upload:
        description: 'Google Drive„Å∏„ÅÆ„Ç¢„ÉÉ„Éó„É≠„Éº„Éâ'
        required: false
        type: boolean
        default: false

env:
  PYTHON_VERSION: '3.11'

jobs:
  # „Ç∏„Éß„Éñ1: ÂàùÊúüÂåñ
  initialize:
    runs-on: ubuntu-latest
    environment: GA
    timeout-minutes: 5
    outputs:
      article_id: ${{ steps.init.outputs.article_id }}
      
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Initialize article generation
        id: init
        run: |
          # „Çø„Ç§„Éà„É´„Åã„ÇâID„ÇíÁîüÊàê
          CLEAN_TITLE=$(echo "${{ inputs.article_title }}" | sed 's/[^a-zA-Z0-9„ÅÇ-„Çì„Ç¢-„É≥‰∏Ä-ÈæØ]/_/g' | cut -c1-50)
          ARTICLE_ID=$(date +%Y%m%d_%H%M%S)_${CLEAN_TITLE}
          echo "article_id=${ARTICLE_ID}" >> $GITHUB_OUTPUT
          echo "Article ID: ${ARTICLE_ID}"
          
          # Âá∫Âäõ„Éá„Ç£„É¨„ÇØ„Éà„É™‰ΩúÊàê
          mkdir -p output/${ARTICLE_ID}
          
          # ÂÖ•ÂäõÊÉÖÂ†±„Çí‰øùÂ≠ò
          TIMESTAMP=$(date -u +%Y-%m-%dT%H:%M:%SZ)
          cat > output/${ARTICLE_ID}/input_params.json << EOJSON
          {
            "article_id": "${ARTICLE_ID}",
            "title": "${{ inputs.article_title }}",
            "target_persona": "${{ inputs.target_persona }}",
            "meta_keywords": "${{ inputs.meta_keywords }}",
            "created_at": "${TIMESTAMP}"
          }
          EOJSON

      - name: Upload initialization artifacts
        uses: actions/upload-artifact@v4
        with:
          name: init-${{ steps.init.outputs.article_id }}
          path: output/${{ steps.init.outputs.article_id }}
          retention-days: 30

  # „Ç∏„Éß„Éñ2: „É™„ÇØ„Ç®„Çπ„ÉàÂàÜÊûê
  analysis:
    needs: initialize
    runs-on: ubuntu-latest
    environment: GA
    timeout-minutes: 10
    outputs:
      main_keyword: ${{ steps.analyze.outputs.main_keyword }}
      
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Download initialization artifacts
        uses: actions/download-artifact@v4
        with:
          name: init-${{ needs.initialize.outputs.article_id }}
          path: output/${{ needs.initialize.outputs.article_id }}

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Install dependencies
        run: |
          cd github-actions
          pip install -r requirements.txt

      - name: Create analysis input
        run: |
          cd output/${{ needs.initialize.outputs.article_id }}
          # Phase1„ÅåÊúüÂæÖ„Åô„ÇãÂΩ¢Âºè„ÅÆJSON„Çí‰ΩúÊàê
          cat > request_params.json << EOJSON
          {
            "topic": "${{ inputs.article_title }}",
            "target_audience": "${{ inputs.target_persona }}",
            "keywords": "${{ inputs.meta_keywords }}"
          }
          EOJSON

      - name: Run Phase 1 Analysis with Claude
        uses: anthropics/claude-code-base-action@beta
        with:
          anthropic_api_key: ${{ secrets.ANTHROPIC_API_KEY }}
          
          prompt: |
            Ë®ò‰∫ã„É™„ÇØ„Ç®„Çπ„Éà„ÇíÂàÜÊûê„Åó„Å¶„ÄÅSEOÊúÄÈÅ©Âåñ„Åï„Çå„ÅüË®ò‰∫ãÁîüÊàê„ÅÆ„Åü„ÇÅ„ÅÆË©≥Á¥∞„Éë„É©„É°„Éº„Çø„ÇíÊäΩÂá∫„Åó„Å¶„Åè„Å†„Åï„ÅÑ„ÄÇ
            
            ÂÖ•ÂäõÊÉÖÂ†±:
            - „Éà„Éî„ÉÉ„ÇØ: ${{ inputs.article_title }}  
            - „Çø„Éº„Ç≤„ÉÉ„ÉàË™≠ËÄÖ: ${{ inputs.target_persona }}
            - „É°„Çø„Ç≠„Éº„ÉØ„Éº„Éâ: ${{ inputs.meta_keywords }}
            
            „Çø„Çπ„ÇØ:
            1. output/${{ needs.initialize.outputs.article_id }}/request_params.json „ÇíË™≠„ÅøËæº„Çì„ÅßÁêÜËß£
            2. ‰ª•‰∏ã„ÅÆÂàÜÊûê„ÇíÂÆüË°å:
               - „É°„Ç§„É≥„Ç≠„Éº„ÉØ„Éº„Éâ„ÅÆÁâπÂÆö
               - Èñ¢ÈÄ£„Ç≠„Éº„ÉØ„Éº„Éâ„ÅÆÊäΩÂá∫Ôºà5-8ÂÄãÔºâ
               - Ê§úÁ¥¢ÊÑèÂõ≥„ÅÆÂàÜÊûê
               - „É™„Çµ„Éº„ÉÅ„ÇØ„Ç®„É™„ÅÆÁîüÊàêÔºà15-25ÂÄãÔºâ
            
            3. ÂàÜÊûêÁµêÊûú„Çí output/${{ needs.initialize.outputs.article_id }}/phase1_output.json „Éï„Ç°„Ç§„É´„Å´‰øùÂ≠ò„Åó„Å¶„Åè„Å†„Åï„ÅÑÔºàÁµ∂ÂØæ„Éë„ÇπÊåáÂÆöÔºâ
            
            ÈáçË¶ÅÔºö‰ª•‰∏ã„ÅÆÂΩ¢Âºè„Åßanalysis„Ç™„Éñ„Ç∏„Çß„ÇØ„Éà„ÇíÂê´„ÇÄJSON„Çí‰ΩúÊàê„Åó„Å¶„Åè„Å†„Åï„ÅÑÔºö
            {
              "analysis": {
                "main_keyword": "ÊäΩÂá∫„Åó„Åü„É°„Ç§„É≥„Ç≠„Éº„ÉØ„Éº„Éâ",
                "related_keywords": ["Èñ¢ÈÄ£1", "Èñ¢ÈÄ£2", "Èñ¢ÈÄ£3", "Èñ¢ÈÄ£4", "Èñ¢ÈÄ£5"],
                "search_intent": "informational",
                "content_type": "how-to", 
                "tone": "friendly",
                "key_points": ["„Éù„Ç§„É≥„Éà1", "„Éù„Ç§„É≥„Éà2", "„Éù„Ç§„É≥„Éà3"],
                "research_queries": ["„ÇØ„Ç®„É™1", "„ÇØ„Ç®„É™2", "„ÇØ„Ç®„É™3", "„ÇØ„Ç®„É™4", "„ÇØ„Ç®„É™5", "„ÇØ„Ç®„É™6", "„ÇØ„Ç®„É™7", "„ÇØ„Ç®„É™8", "„ÇØ„Ç®„É™9", "„ÇØ„Ç®„É™10", "„ÇØ„Ç®„É™11", "„ÇØ„Ç®„É™12", "„ÇØ„Ç®„É™13", "„ÇØ„Ç®„É™14", "„ÇØ„Ç®„É™15"],
                "competitor_analysis_needed": true,
                "local_seo_focus": false,
                "estimated_sections": 5
              },
              "topic": "${{ inputs.article_title }}",
              "target_audience": "${{ inputs.target_persona }}",
              "keywords": "${{ inputs.meta_keywords }}",
              "processed_at": "ÁèæÂú®ÊôÇÂàª",
              "workflow_version": "3.0.0"
            }
          
          allowed_tools: |
            Read,
            Write
          
          claude_env: |
            ARTICLE_ID=${{ needs.initialize.outputs.article_id }}
          
          max_turns: "5"
      
      - name: Verify and prepare analysis results
        run: |
          echo "üîç Checking for analysis files..."
          echo "Current working directory: $(pwd)"
          echo "Files in root:"
          ls -la
          echo "Files in output directory:"
          ls -la output/${{ needs.initialize.outputs.article_id }}/
          
          cd output/${{ needs.initialize.outputs.article_id }}
          if [ -f "phase1_output.json" ]; then
            echo "‚úÖ Phase 1 analysis file found"
            cat phase1_output.json
          else
            echo "‚ö†Ô∏è Phase 1 analysis file not found, creating default"
            # Check if file was created in root directory by mistake
            if [ -f "../../phase1_output.json" ]; then
              echo "üìÅ Found phase1_output.json in root, moving to correct location"
              mv ../../phase1_output.json ./phase1_output.json
            else
              echo "üîß Creating fallback analysis file"
              # Create fallback analysis if Claude didn't create the file
              TIMESTAMP=$(date -u +%Y-%m-%dT%H:%M:%SZ)
              TITLE="${{ inputs.article_title }}"
              PERSONA="${{ inputs.target_persona }}"
              KEYWORDS="${{ inputs.meta_keywords }}"
              
              # Â§ñÈÉ®„Çπ„ÇØ„É™„Éó„Éà„Çí‰ΩøÁî®„Åó„Å¶JSON„Çí‰ΩúÊàê
              TITLE="${TITLE}" PERSONA="${PERSONA}" KEYWORDS="${KEYWORDS}" TIMESTAMP="${TIMESTAMP}" OUTPUT_DIR="." python3 ../../github-actions/scripts/create_phase1_fallback.py
            fi
          fi
          
          echo "üìã Final verification - files in current directory:"
          ls -la

      - name: Split research queries into batches
        id: analyze
        run: |
          # „ÇØ„Ç®„É™„Çí5„Éê„ÉÉ„ÉÅ„Å´ÂàÜÂâ≤
          cd output/${{ needs.initialize.outputs.article_id }}
          python3 ../../github-actions/scripts/split_research_queries.py
          
          # „É°„Ç§„É≥„Ç≠„Éº„ÉØ„Éº„Éâ„ÇíÂá∫Âäõ
          if [ -f "research_meta.json" ]; then
            MAIN_KW=$(python -c "import json; print(json.load(open('research_meta.json'))['main_keyword'])")
            echo "main_keyword=${MAIN_KW}" >> $GITHUB_OUTPUT
          fi
        env:
          ANTHROPIC_API_KEY: ${{ secrets.ANTHROPIC_API_KEY }}
          ENABLE_GEMINI_RESEARCH: "true"

      - name: Upload analysis artifacts
        uses: actions/upload-artifact@v4
        with:
          name: analysis-${{ needs.initialize.outputs.article_id }}
          path: output/${{ needs.initialize.outputs.article_id }}
          retention-days: 30

  # „Ç∏„Éß„Éñ3: „É™„Çµ„Éº„ÉÅÔºàGemini‰ΩøÁî® - ‰∏¶ÂàóÂÆüË°åÔºâ
  research:
    needs: [initialize, analysis]
    runs-on: ubuntu-latest
    environment: GA
    timeout-minutes: 15
    strategy:
      matrix:
        batch: [0, 1, 2, 3, 4]
      max-parallel: 5
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Download initialization artifacts
        uses: actions/download-artifact@v4
        with:
          name: init-${{ needs.initialize.outputs.article_id }}
          path: output/${{ needs.initialize.outputs.article_id }}

      - name: Download analysis artifacts
        uses: actions/download-artifact@v4
        with:
          name: analysis-${{ needs.initialize.outputs.article_id }}
          path: output/${{ needs.initialize.outputs.article_id }}

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Install dependencies
        run: |
          cd github-actions
          pip install -r requirements.txt
          
      - name: Install Gemini API dependencies  
        run: |
          pip install google-generativeai httpx

      - name: Research with Gemini (Batch ${{ matrix.batch }})
        run: |
          cd output/${{ needs.initialize.outputs.article_id }}
          
          # „Éê„ÉÉ„ÉÅÁî®„ÅÆÂàÜÊûê„Éï„Ç°„Ç§„É´„Çí‰ΩúÊàê
          BATCH_NUM=${{ matrix.batch }} python3 ../../github-actions/scripts/create_batch_analysis.py
          
          # „Éê„ÉÉ„ÉÅ„ÇØ„Ç®„É™„ÇíË™≠„ÅøËæº„Çì„ÅßGemini API„ÅßÁõ¥Êé•Ê§úÁ¥¢ÔºàV2ÊñπÂºèÔºâ
          cat > research_batch_${{ matrix.batch }}.py << 'EOF'
          import os
          import sys
          import json
          import google.generativeai as genai
          from datetime import datetime
          
          # Configure Gemini
          genai.configure(api_key=os.environ['GEMINI_API_KEY'])
          model = genai.GenerativeModel('gemini-2.0-flash-exp')
          
          # „Éê„ÉÉ„ÉÅ„ÇØ„Ç®„É™„ÇíË™≠„ÅøËæº„Åø
          with open('research_batch_${{ matrix.batch }}.json', 'r') as f:
              batch_data = json.load(f)
          
          queries = batch_data.get('queries', [])
          results = []
          
          for i, query in enumerate(queries):
              print(f"Searching batch ${{ matrix.batch }} ({i+1}/{len(queries)}): {query}")
              
              prompt = f"""
              WebÊ§úÁ¥¢„ÇíÂÆüË°å: "{query}"
              
              ÂÑ™ÂÖàÈ†Ü‰ΩçÔºö
              1. ÊîøÂ∫úÊ©üÈñ¢Ôºà.go.jp, .govÔºâ
              2. Â≠¶Ë°ìÊ©üÈñ¢Ôºà.ac.jp, .eduÔºâ  
              3. ÂåªÂ≠¶‰ºö„ÉªÂ∞ÇÈñÄÂõ£‰Ωì
              4. Â§ßÊâã„É°„Éá„Ç£„Ç¢
              
              ‰ª•‰∏ã„ÅÆÂΩ¢Âºè„ÅßJSON„ÅßËøî„Åó„Å¶„Åè„Å†„Åï„ÅÑÔºö
              {{
                "query": "{query}",
                "results": [
                  {{
                    "url": "URL",
                    "title": "„Çø„Ç§„Éà„É´", 
                    "source_type": "government/academic/medical/industry/media",
                    "reliability_score": 1-10,
                    "key_findings": ["ÈáçË¶Å„Å™Áô∫Ë¶ã"],
                    "publication_date": "YYYY-MM-DD"
                  }}
                ]
              }}
              """
              
              try:
                  response = model.generate_content(
                      prompt,
                      tools=[genai.protos.Tool(
                          google_search=genai.protos.GoogleSearch()
                      )],
                      generation_config=genai.GenerationConfig(
                          temperature=1.0,
                          max_output_tokens=2048
                      )
                  )
                  
                  text = response.text
                  json_start = text.find('{')
                  json_end = text.rfind('}') + 1
                  if json_start >= 0 and json_end > json_start:
                      result = json.loads(text[json_start:json_end])
                      results.append(result)
                  else:
                      print(f"‚ö†Ô∏è No valid JSON in response for: {query}")
                      
              except Exception as e:
                  print(f"‚ùå Error searching '{query}': {e}")
          
          # „Éê„ÉÉ„ÉÅÁµêÊûú„Çí‰øùÂ≠ò
          os.makedirs('batch_${{ matrix.batch }}', exist_ok=True)
          output_data = {
              'batch_id': ${{ matrix.batch }},
              'results': results,
              'sources': [r.get('results', [{}])[0].get('url', '') for r in results if r.get('results')],
              'key_findings': [finding for r in results for result in r.get('results', []) for finding in result.get('key_findings', [])],
              'timestamp': datetime.now().isoformat(),
              'total_queries': len(queries),
              'successful_queries': len(results)
          }
          
          with open('batch_${{ matrix.batch }}/phase2_research.json', 'w') as f:
              json.dump(output_data, f, ensure_ascii=False, indent=2)
          
          print(f"‚úÖ Batch ${{ matrix.batch }} completed: {len(results)}/{len(queries)} successful")
          EOF
          
          python3 research_batch_${{ matrix.batch }}.py
        env:
          GEMINI_API_KEY: ${{ secrets.GEMINI_API_KEY }}

      - name: Upload research batch artifacts
        uses: actions/upload-artifact@v4
        with:
          name: research-batch-${{ matrix.batch }}-${{ needs.initialize.outputs.article_id }}
          path: output/${{ needs.initialize.outputs.article_id }}/batch_${{ matrix.batch }}
          retention-days: 30

  # „Ç∏„Éß„Éñ4: „É™„Çµ„Éº„ÉÅÁµêÊûú„ÅÆÁµ±Âêà
  research-merge:
    needs: [initialize, research]
    runs-on: ubuntu-latest
    environment: GA
    timeout-minutes: 10
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Create output directory
        run: mkdir -p output/${{ needs.initialize.outputs.article_id }}

      - name: Download all research batches
        uses: actions/download-artifact@v4
        with:
          pattern: research-batch-*-${{ needs.initialize.outputs.article_id }}
          path: output/${{ needs.initialize.outputs.article_id }}/batches

      - name: Download analysis artifacts
        uses: actions/download-artifact@v4
        with:
          name: analysis-${{ needs.initialize.outputs.article_id }}
          path: output/${{ needs.initialize.outputs.article_id }}

      - name: Merge research results
        run: |
          cd output/${{ needs.initialize.outputs.article_id }}
          
          # „É™„Çµ„Éº„ÉÅÁµêÊûú„ÇíÁµ±Âêà
          python3 ../../github-actions/scripts/merge_research_results.py

      - name: Upload merged research artifacts
        uses: actions/upload-artifact@v4
        with:
          name: research-${{ needs.initialize.outputs.article_id }}
          path: output/${{ needs.initialize.outputs.article_id }}
          retention-days: 30

  # „Ç∏„Éß„Éñ5: Ë®ò‰∫ãÊßãÊàê„ÅÆÁîüÊàê
  generate-structure:
    needs: [initialize, analysis, research-merge]
    runs-on: ubuntu-latest
    environment: GA
    timeout-minutes: 15
      
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Download artifacts
        uses: actions/download-artifact@v4
        with:
          pattern: '*-${{ needs.initialize.outputs.article_id }}'
          path: output/${{ needs.initialize.outputs.article_id }}
          merge-multiple: true

      - name: Generate article structure with Claude
        uses: anthropics/claude-code-base-action@beta
        with:
          anthropic_api_key: ${{ secrets.ANTHROPIC_API_KEY }}
          
          prompt: |
            ÂÅ•Â∫∑„ÉªÁæéÂÆπ„Å´Èñ¢„Åô„ÇãË®ò‰∫ã„ÅÆÊßãÊàê„Çí‰ΩúÊàê„Åó„Å¶„Åè„Å†„Åï„ÅÑ„ÄÇ
            
            ÂÖ•ÂäõÊÉÖÂ†±:
            - Ë®ò‰∫ã„Çø„Ç§„Éà„É´: ${{ inputs.article_title }}
            - „Çø„Éº„Ç≤„ÉÉ„Éà„Éö„É´„ÇΩ„Éä: ${{ inputs.target_persona }}
            - „É°„Çø„Ç≠„Éº„ÉØ„Éº„Éâ: ${{ inputs.meta_keywords }}
            
            „Çø„Çπ„ÇØ:
            1. ‰ª•‰∏ã„ÅÆ„Éï„Ç°„Ç§„É´„ÇíË™≠„ÅøËæº„Çì„ÅßÁêÜËß£:
               - input_params.json: ÂÖ•Âäõ„Éë„É©„É°„Éº„Çø
               - phase1_output.json: ÂàÜÊûêÁµêÊûú
               - phase2_research.json: „É™„Çµ„Éº„ÉÅÁµêÊûú
            2. ÂàÜÊûê„Å®„É™„Çµ„Éº„ÉÅÁµêÊûú„ÇíË∏è„Åæ„Åà„Å¶„Éö„É´„ÇΩ„Éä„Å´ÊúÄÈÅ©Âåñ„Åï„Çå„ÅüË®ò‰∫ãÊßãÊàê„Çí‰ΩúÊàê
            3. ‰ª•‰∏ã„ÅÆ„Éï„Ç°„Ç§„É´„ÇíÁîüÊàê:
               - 01_article_structure.md: Ë©≥Á¥∞„Å™Ë®ò‰∫ãÊßãÊàê
               - 02_content_plan.md: ÂêÑ„Çª„ÇØ„Ç∑„Éß„É≥„ÅÆÂÜÖÂÆπË®àÁîª
               - 03_seo_strategy.md: SEOÊà¶Áï•„Å®„Ç≠„Éº„ÉØ„Éº„ÉâÈÖçÁΩÆË®àÁîª
            
            Ë¶Å‰ª∂:
            - „Éö„É´„ÇΩ„Éä„ÅÆÊÇ©„Åø„ÇÑÈñ¢ÂøÉ‰∫ã„Å´ÂØÑ„ÇäÊ∑ª„ÅÜÊßãÊàê
            - „É°„Çø„Ç≠„Éº„ÉØ„Éº„Éâ„ÇíËá™ÁÑ∂„Å´ÁµÑ„ÅøËæº„ÇÄ
            - Ëñ¨Ê©üÊ≥ï„ÉªÊôØË°®Ê≥ï„ÇíËÄÉÊÖÆ„Åó„ÅüË°®ÁèæË®àÁîª
            - Ë™≠„Åø„ÇÑ„Åô„Åè‰æ°ÂÄ§„ÅÆ„ÅÇ„ÇãË®ò‰∫ãÊßãÊàê
          
          allowed_tools: |
            Read,
            Write,
            Edit
          
          claude_env: |
            ARTICLE_ID=${{ needs.initialize.outputs.article_id }}
          
          max_turns: "10"

      - name: Upload structure artifacts
        uses: actions/upload-artifact@v4
        with:
          name: structure-${{ needs.initialize.outputs.article_id }}
          path: output/${{ needs.initialize.outputs.article_id }}
          retention-days: 30

  # „Ç∏„Éß„Éñ6: Ë®ò‰∫ãÊú¨Êñá„ÅÆÁîüÊàê
  generate-content:
    needs: [initialize, generate-structure]
    runs-on: ubuntu-latest
    environment: GA
    timeout-minutes: 20
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Download artifacts
        uses: actions/download-artifact@v4
        with:
          pattern: '*-${{ needs.initialize.outputs.article_id }}'
          path: output/${{ needs.initialize.outputs.article_id }}
          merge-multiple: true

      - name: Generate article content with Claude
        uses: anthropics/claude-code-base-action@beta
        with:
          anthropic_api_key: ${{ secrets.ANTHROPIC_API_KEY }}
          
          prompt: |
            Ë®ò‰∫ãÊú¨Êñá„ÇíÁîüÊàê„Åó„Å¶„Åè„Å†„Åï„ÅÑ„ÄÇ
            
            „Çø„Çπ„ÇØ:
            1. ‰ª•‰∏ã„ÅÆ„Éï„Ç°„Ç§„É´„ÇíË™≠„ÅøËæº„Çì„ÅßÁêÜËß£:
               - input_params.json: ÂÖ•Âäõ„Éë„É©„É°„Éº„Çø
               - phase1_output.json: ÂàÜÊûêÁµêÊûú
               - phase2_research.json: „É™„Çµ„Éº„ÉÅÁµêÊûú
               - 01_article_structure.md: Ë®ò‰∫ãÊßãÊàê
               - 02_content_plan.md: ÂÜÖÂÆπË®àÁîª
               - 03_seo_strategy.md: SEOÊà¶Áï•
            
            2. „Éö„É´„ÇΩ„Éä„Å´ÊúÄÈÅ©Âåñ„Åï„Çå„ÅüË®ò‰∫ãÊú¨Êñá„ÇíÁîüÊàê:
               - „Éö„É´„ÇΩ„Éä„ÅÆË®ÄËëâÈÅ£„ÅÑ„ÇÑÈñ¢ÂøÉ‰∫ã„ÇíÂèçÊò†
               - ÂÖ∑‰ΩìÁöÑ„ÅßÂÆüË∑µÁöÑ„Å™ÂÜÖÂÆπ
               - Ë™≠„Åø„ÇÑ„Åô„ÅÑÊßãÊàê„Å®Ëá™ÁÑ∂„Å™ÊµÅ„Çå
            
            3. ‰ª•‰∏ã„ÅÆ„Éï„Ç°„Ç§„É´„ÇíÁîüÊàê:
               - 04_draft_article.md: MarkdownÂΩ¢Âºè„ÅÆË®ò‰∫ãÊú¨Êñá
               - 05_article.html: HTMLÂΩ¢Âºè„ÅÆË®ò‰∫ãÔºàÈÅ©Âàá„Å™„Éû„Éº„ÇØ„Ç¢„ÉÉ„ÉóÔºâ
               - 06_meta_data.json: „É°„ÇøÊÉÖÂ†±Ôºà„Çø„Ç§„Éà„É´„ÄÅË™¨Êòé„ÄÅ„Ç≠„Éº„ÉØ„Éº„ÉâÁ≠âÔºâ
            
            Ë¶Å‰ª∂:
            - 3000-5000ÊñáÂ≠óÁ®ãÂ∫¶
            - „Éö„É´„ÇΩ„Éä„Å´Èüø„ÅèË®ÄËëâÈÅ∏„Å≥
            - SEO„ÇíÊÑèË≠ò„Åó„ÅüË¶ãÂá∫„ÅóÊßãÊàê
            - Ëñ¨Ê©üÊ≥ï„ÉªÊôØË°®Ê≥ïÊ∫ñÊã†
          
          allowed_tools: |
            Read,
            Write,
            Edit
          
          claude_env: |
            ARTICLE_ID=${{ needs.initialize.outputs.article_id }}
          
          max_turns: "15"

      - name: Upload content artifacts
        uses: actions/upload-artifact@v4
        with:
          name: content-${{ needs.initialize.outputs.article_id }}
          path: output/${{ needs.initialize.outputs.article_id }}
          retention-days: 30

  # „Ç∏„Éß„Éñ7: „Éï„Ç°„ÇØ„Éà„ÉÅ„Çß„ÉÉ„ÇØ
  factcheck:
    needs: [initialize, generate-content]
    runs-on: ubuntu-latest
    environment: GA
    timeout-minutes: 15
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Download artifacts
        uses: actions/download-artifact@v4
        with:
          pattern: '*-${{ needs.initialize.outputs.article_id }}'
          path: output/${{ needs.initialize.outputs.article_id }}
          merge-multiple: true

      - name: Fact-check article with Claude
        uses: anthropics/claude-code-base-action@beta
        with:
          anthropic_api_key: ${{ secrets.ANTHROPIC_API_KEY }}
          
          prompt: |
            Ë®ò‰∫ã„ÅÆ„Éï„Ç°„ÇØ„Éà„ÉÅ„Çß„ÉÉ„ÇØ„ÇíË°å„Å£„Å¶„Åè„Å†„Åï„ÅÑ„ÄÇ
            
            „Çø„Çπ„ÇØ:
            1. ‰ª•‰∏ã„ÅÆ„Éï„Ç°„Ç§„É´„ÇíË™≠„ÅøËæº„Çì„ÅßÂÜÖÂÆπ„ÇíÁ¢∫Ë™ç:
               - 04_draft_article.md: Ë®ò‰∫ãÊú¨Êñá
               - phase2_research.json: „É™„Çµ„Éº„ÉÅÁµêÊûú
            
            2. ‰ª•‰∏ã„ÅÆË¶≥ÁÇπ„Åß„ÉÅ„Çß„ÉÉ„ÇØ:
               - ‰∫ãÂÆü„ÅÆÊ≠£Á¢∫ÊÄßÔºà„É™„Çµ„Éº„ÉÅÁµêÊûú„Å®„ÅÆÁÖßÂêàÔºâ
               - Ëñ¨Ê©üÊ≥ï„ÉªÊôØË°®Ê≥ï„ÅÆÈÅµÂÆà
               - Êï∞ÂÄ§„ÇÑÁµ±Ë®à„ÅÆÊ≠£Á¢∫ÊÄß
               - ÂåªÂ≠¶ÁöÑ„ÉªÁßëÂ≠¶ÁöÑ‰∏ªÂºµ„ÅÆÂ¶•ÂΩìÊÄß
            
            3. ‰øÆÊ≠£„ÅåÂøÖË¶Å„Å™Â†¥Âêà:
               - 04_draft_article.md „ÇíÁõ¥Êé•Á∑®ÈõÜ
               - factcheck_report.md „Å´‰øÆÊ≠£ÂÜÖÂÆπ„ÇíË®òÈå≤
            
            4. „Éö„É´„ÇΩ„Éä„Å∏„ÅÆÈÖçÊÖÆ:
               - „Éö„É´„ÇΩ„Éä„ÅåË™§Ëß£„Åó„ÇÑ„Åô„ÅÑË°®Áèæ„ÅÆ‰øÆÊ≠£
               - „Çà„ÇäÂàÜ„Åã„Çä„ÇÑ„Åô„ÅÑË™¨Êòé„Å∏„ÅÆÊîπÂñÑ
          
          allowed_tools: |
            View,
            Edit
          
          claude_env: |
            ARTICLE_ID=${{ needs.initialize.outputs.article_id }}
          
          max_turns: "10"

      - name: Upload factcheck artifacts
        uses: actions/upload-artifact@v4
        with:
          name: factcheck-${{ needs.initialize.outputs.article_id }}
          path: output/${{ needs.initialize.outputs.article_id }}
          retention-days: 30

  # „Ç∏„Éß„Éñ8: SEOÊúÄÈÅ©Âåñ
  seo-optimization:
    needs: [initialize, generate-content]
    runs-on: ubuntu-latest
    environment: GA
    timeout-minutes: 15
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Download artifacts
        uses: actions/download-artifact@v4
        with:
          pattern: '*-${{ needs.initialize.outputs.article_id }}'
          path: output/${{ needs.initialize.outputs.article_id }}
          merge-multiple: true

      - name: SEO optimization with Claude
        uses: anthropics/claude-code-base-action@beta
        with:
          anthropic_api_key: ${{ secrets.ANTHROPIC_API_KEY }}
          
          prompt: |
            Ë®ò‰∫ã„ÅÆSEOÊúÄÈÅ©Âåñ„ÇíË°å„Å£„Å¶„Åè„Å†„Åï„ÅÑ„ÄÇ
            
            „Çø„Çπ„ÇØ:
            1. ‰ª•‰∏ã„ÅÆ„Éï„Ç°„Ç§„É´„ÇíË™≠„ÅøËæº„Çì„ÅßÊúÄÈÅ©Âåñ:
               - 04_draft_article.md: Ë®ò‰∫ãÊú¨Êñá
               - 05_article.html: HTMLÁâàË®ò‰∫ã
               - 03_seo_strategy.md: SEOÊà¶Áï•
               - input_params.json: „É°„Çø„Ç≠„Éº„ÉØ„Éº„ÉâÁ¢∫Ë™ç
            
            2. SEOÊúÄÈÅ©Âåñ„ÅÆÂÆüÊñΩ:
               - „Çø„Ç§„Éà„É´„Çø„Ç∞„ÅÆÊúÄÈÅ©Âåñ
               - „É°„Çø„Éá„Ç£„Çπ„ÇØ„É™„Éó„Ç∑„Éß„É≥„ÅÆ‰ΩúÊàê
               - Ë¶ãÂá∫„Åó„Çø„Ç∞ÔºàH1-H3Ôºâ„ÅÆÊúÄÈÅ©Âåñ
               - „Ç≠„Éº„ÉØ„Éº„ÉâÂØÜÂ∫¶„ÅÆË™øÊï¥Ôºà2-3%Ôºâ
               - ÂÜÖÈÉ®„É™„É≥„ÇØÊßãÈÄ†„ÅÆÊèêÊ°à
            
            3. „Éö„É´„ÇΩ„ÉäÂêë„ÅëSEO:
               - „Éö„É´„ÇΩ„Éä„Åå‰Ωø„ÅÜÊ§úÁ¥¢„Ç≠„Éº„ÉØ„Éº„Éâ„ÇíÊÑèË≠ò
               - „Éö„É´„ÇΩ„Éä„ÅÆÊ§úÁ¥¢ÊÑèÂõ≥„Å´ÂêàËá¥„Åô„ÇãÂÜÖÂÆπÂº∑Âåñ
            
            4. ÁîüÊàê„Éï„Ç°„Ç§„É´:
               - 06_optimized_content.html: SEOÊúÄÈÅ©ÂåñÊ∏à„ÅøHTML
               - seo_optimization_report.md: ÊúÄÈÅ©ÂåñÂÜÖÂÆπ„É¨„Éù„Éº„Éà
          
          allowed_tools: |
            Read,
            Write,
            Edit
          
          claude_env: |
            ARTICLE_ID=${{ needs.initialize.outputs.article_id }}
          
          max_turns: "10"

      - name: Upload SEO artifacts
        uses: actions/upload-artifact@v4
        with:
          name: seo-${{ needs.initialize.outputs.article_id }}
          path: output/${{ needs.initialize.outputs.article_id }}
          retention-days: 30

  # „Ç∏„Éß„Éñ9: ÁîªÂÉèÁîüÊàêÔºàMCP + Imagen4Ôºâ
  generate-images:
    if: ${{ inputs.enable_image_generation }}
    needs: [initialize, generate-structure]
    runs-on: ubuntu-latest
    environment: GA
    timeout-minutes: 20
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Download artifacts
        uses: actions/download-artifact@v4
        with:
          pattern: '*-${{ needs.initialize.outputs.article_id }}'
          path: output/${{ needs.initialize.outputs.article_id }}
          merge-multiple: true

      - name: Generate Images with Claude + MCP Imagen4
        uses: anthropics/claude-code-base-action@beta
        with:
          anthropic_api_key: ${{ secrets.ANTHROPIC_API_KEY }}
          
          prompt: |
            Ë®ò‰∫ã„Å´ÊúÄÈÅ©„Å™ÁîªÂÉè„ÇíË§áÊï∞ÊûöÁîüÊàê„Åó„Å¶„Åè„Å†„Åï„ÅÑ„ÄÇÂêàË®à4-5Êûö„ÅÆÁîªÂÉè„ÇíÁîüÊàê„Åó„Åæ„Åô„ÄÇ
            
            „Çø„Çπ„ÇØ:
            1. Ë®ò‰∫ãÂÜÖÂÆπ„ÇíÁêÜËß£:
               - input_params.json „Åß„Éö„É´„ÇΩ„Éä„ÇíÁ¢∫Ë™ç
               - 04_draft_article.md „ÅßË®ò‰∫ãÂÜÖÂÆπ„ÇíÊääÊè°
               - 01_article_structure.md „ÅßÊßãÊàê„ÇíÁêÜËß£
            
            2. ‰ª•‰∏ã„ÅÆÊâãÈ†Ü„ÅßÂÄãÂà•„Å´ÁîªÂÉè„ÇíÁîüÊàê:
               
               **„Çπ„ÉÜ„ÉÉ„Éó1**: „Éí„Éº„É≠„ÉºÁîªÂÉèÔºà16:9Ôºâ„ÇíÁîüÊàê
               - mcp__gemini-imagen__generate_image „Çí‰ΩøÁî®
               - „Éó„É≠„É≥„Éó„Éà: "Ë®ò‰∫ãÂÖ®‰Ωì„ÅÆ„Ç§„É°„Éº„Ç∏„ÇíË°®Áèæ„Åô„Çã16:9„ÅÆ„Éí„Éº„É≠„ÉºÁîªÂÉè"
               - „Éö„É´„ÇΩ„Éä„Å´Âêà„Çè„Åõ„Åü„É°„Ç§„É≥„Éì„Ç∏„É•„Ç¢„É´
               
               **„Çπ„ÉÜ„ÉÉ„Éó2**: „Çª„ÇØ„Ç∑„Éß„É≥ÁîªÂÉè1Ôºà4:3Ôºâ„ÇíÁîüÊàê  
               - mcp__gemini-imagen__generate_image „Çí‰ΩøÁî®
               - „Éó„É≠„É≥„Éó„Éà: "Ë®ò‰∫ã„ÅÆÂ∞éÂÖ•ÈÉ®ÂàÜ„ÇíË°®Áèæ„Åô„Çã4:3„ÅÆÁîªÂÉè"
               
               **„Çπ„ÉÜ„ÉÉ„Éó3**: „Çª„ÇØ„Ç∑„Éß„É≥ÁîªÂÉè2Ôºà4:3Ôºâ„ÇíÁîüÊàê
               - mcp__gemini-imagen__generate_image „Çí‰ΩøÁî®  
               - „Éó„É≠„É≥„Éó„Éà: "Ë®ò‰∫ã„ÅÆÊñπÊ≥ï„ÉªÊâãÈ†ÜÈÉ®ÂàÜ„ÇíË°®Áèæ„Åô„Çã4:3„ÅÆÁîªÂÉè"
               
               **„Çπ„ÉÜ„ÉÉ„Éó4**: „Çª„ÇØ„Ç∑„Éß„É≥ÁîªÂÉè3Ôºà4:3Ôºâ„ÇíÁîüÊàê
               - mcp__gemini-imagen__generate_image „Çí‰ΩøÁî®
               - „Éó„É≠„É≥„Éó„Éà: "Ë®ò‰∫ã„ÅÆÁµêÊûú„ÉªÂäπÊûúÈÉ®ÂàÜ„ÇíË°®Áèæ„Åô„Çã4:3„ÅÆÁîªÂÉè"
               
               **„Çπ„ÉÜ„ÉÉ„Éó5**: „Çª„ÇØ„Ç∑„Éß„É≥ÁîªÂÉè4Ôºà4:3Ôºâ„ÇíÁîüÊàê
               - mcp__gemini-imagen__generate_image „Çí‰ΩøÁî®
               - „Éó„É≠„É≥„Éó„Éà: "Ë®ò‰∫ã„ÅÆ„Åæ„Å®„ÇÅÈÉ®ÂàÜ„ÇíË°®Áèæ„Åô„Çã4:3„ÅÆÁîªÂÉè"
            
            3. ÁîªÂÉèÁîüÊàê„ÅÆÊñπÈáùÔºàÂÖ®ÁîªÂÉèÂÖ±ÈÄöÔºâ:
               - „Éö„É´„ÇΩ„Éä„ÅÆÂπ¥‰ª£„ÉªÊÄßÂà•„Å´Âêà„Çè„Åõ„Åü„Éì„Ç∏„É•„Ç¢„É´
               - Ê∏ÖÊΩîÊÑü„Å®‰ø°È†ºÊÑü„ÅÆ„ÅÇ„Çã„Éá„Ç∂„Ç§„É≥
               - Ë®ò‰∫ãÂÜÖÂÆπ„Å®Ë™øÂíå„Åó„Åü„Ç´„É©„Éº„Éë„É¨„ÉÉ„Éà
               - „ÉÜ„Ç≠„Çπ„Éà„ÇÑ„É≠„Ç¥„ÅØÂê´„Åæ„Å™„ÅÑ
               - imagen-4 „Åæ„Åü„ÅØ imagen-4-ultra „Çí‰ΩøÁî®
            
            4. „É°„Çø„Éá„Éº„Çø‰ΩúÊàê:
               - images/metadata.json „Å´ÁîüÊàêÊÉÖÂ†±„ÇíË®òÈå≤
               - ÂêÑÁîªÂÉè„ÅÆ„Éó„É≠„É≥„Éó„Éà„ÄÅÁî®ÈÄî„ÄÅ„Çµ„Ç§„Ç∫„ÇíË®òËºâ
               
            ÈáçË¶Å: ÂøÖ„Åö5Âõû„ÅÆmcp__gemini-imagen__generate_image„ÇíÂÆüË°å„Åó„Å¶„ÄÅË§áÊï∞Êûö„ÅÆÁîªÂÉè„ÇíÁîüÊàê„Åó„Å¶„Åè„Å†„Åï„ÅÑ„ÄÇ
          
          mcp_config: |
            {
              "mcpServers": {
                "gemini-imagen": {
                  "command": "npx",
                  "args": [
                    "-y", 
                    "gemini-imagen-mcp-server",
                    "--model", "imagen-4"
                  ],
                  "env": {
                    "GEMINI_API_KEY": "${{ secrets.GEMINI_API_KEY }}"
                  }
                }
              }
            }
          
          allowed_tools: |
            Read,
            Write,
            mcp__gemini-imagen__generate_image,
            mcp__gemini-imagen__list_models
          
          claude_env: |
            ARTICLE_ID=${{ needs.initialize.outputs.article_id }}
          
          max_turns: "15"

      - name: Process generated images
        run: |
          ARTICLE_DIR="output/${{ needs.initialize.outputs.article_id }}"
          IMAGE_DIR="${ARTICLE_DIR}/images"
          
          # MCP„Çµ„Éº„Éê„Éº„ÅØ imagen/ „Éá„Ç£„É¨„ÇØ„Éà„É™„Å´‰øùÂ≠ò„Åô„Çã
          if [ -d "imagen" ] && [ "$(ls -A imagen 2>/dev/null)" ]; then
            echo "‚úÖ Images found in imagen directory:"
            ls -la imagen/
            
            # ÁîªÂÉè„ÇíË®ò‰∫ã„Éá„Ç£„É¨„ÇØ„Éà„É™„Å´„Ç≥„Éî„Éº
            mkdir -p $IMAGE_DIR
            cp imagen/*.png $IMAGE_DIR/ 2>/dev/null || true
            cp imagen/*.jpg $IMAGE_DIR/ 2>/dev/null || true
            
            # „É™„Éç„Éº„É†Ôºà„Ç™„Éó„Ç∑„Éß„É≥Ôºâ
            cd $IMAGE_DIR
            i=1
            for img in *.png *.jpg; do
              if [ -f "$img" ]; then
                if [ $i -eq 1 ]; then
                  mv "$img" "hero_image.png" 2>/dev/null || true
                else
                  mv "$img" "section_$((i-1))_image.png" 2>/dev/null || true
                fi
                i=$((i+1))
              fi
            done
            cd -
            
            echo "Final images:"
            ls -la $IMAGE_DIR
          else
            echo "‚ö†Ô∏è No images generated"
          fi

      - name: Upload image artifacts
        uses: actions/upload-artifact@v4
        with:
          name: images-${{ needs.initialize.outputs.article_id }}
          path: |
            output/${{ needs.initialize.outputs.article_id }}/images
            imagen/
          retention-days: 30

  # „Ç∏„Éß„Éñ10: ÊúÄÁµÇÂá¶ÁêÜ„Å®„Ç¢„ÉÉ„Éó„É≠„Éº„Éâ
  finalize:
    needs: [initialize, analysis, research-merge, generate-structure, generate-content, factcheck, seo-optimization, generate-images]
    if: always()
    runs-on: ubuntu-latest
    environment: GA
    timeout-minutes: 10
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          pattern: '*-${{ needs.initialize.outputs.article_id }}'
          path: output/${{ needs.initialize.outputs.article_id }}
          merge-multiple: true

      - name: Create final package with Claude
        uses: anthropics/claude-code-base-action@beta
        with:
          anthropic_api_key: ${{ secrets.ANTHROPIC_API_KEY }}
          
          prompt: |
            Ë®ò‰∫ã„ÅÆÊúÄÁµÇ„Éë„ÉÉ„Ç±„Éº„Ç∏„Çí‰ΩúÊàê„Åó„Å¶„Åè„Å†„Åï„ÅÑ„ÄÇ
            
            „Çø„Çπ„ÇØ:
            1. „Åô„Åπ„Å¶„ÅÆ„Éï„Ç°„Ç§„É´„ÇíÁ¢∫Ë™ç
            2. final_article.html „Çí‰ΩúÊàê:
               - Ë®ò‰∫ãÊú¨ÊñáÔºà05_article.htmlÔºâ
               - ÁîªÂÉè„ÅÆÈÅ©Âàá„Å™ÈÖçÁΩÆ
               - „É°„ÇøÊÉÖÂ†±„ÅÆÁµ±Âêà
            3. summary.md „Çí‰ΩúÊàê:
               - ÁîüÊàê„Åï„Çå„ÅüË®ò‰∫ã„ÅÆÊ¶ÇË¶Å
               - „Éö„É´„ÇΩ„Éä„Å∏„ÅÆÊúÄÈÅ©Âåñ„Éù„Ç§„É≥„Éà
               - SEOÂØæÁ≠ñ„ÅÆÂÆüÊñΩÂÜÖÂÆπ
               - ‰ΩøÁî®ÁîªÂÉè„ÅÆ„É™„Çπ„Éà
          
          allowed_tools: |
            Read,
            Write,
            Edit
          
          claude_env: |
            ARTICLE_ID=${{ needs.initialize.outputs.article_id }}
          
          max_turns: "10"

      # Google Drive Upload („Ç™„Éó„Ç∑„Éß„É≥)
      - name: Setup Python for Drive upload
        if: ${{ inputs.enable_drive_upload }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Install dependencies for Drive upload
        if: ${{ inputs.enable_drive_upload }}
        run: |
          pip install google-auth google-auth-oauthlib google-auth-httplib2 google-api-python-client pyyaml

      - name: Upload to Google Drive
        if: ${{ inputs.enable_drive_upload }}
        run: |
          python github-actions/scripts/upload_to_drive.py \
            --article-dir output/${{ needs.initialize.outputs.article_id }} \
            --drive-folder-id ${{ secrets.GOOGLE_DRIVE_FOLDER_ID }}
        env:
          GOOGLE_DRIVE_CREDENTIALS: ${{ secrets.GOOGLE_DRIVE_CREDENTIALS }}

      - name: Create workflow summary
        if: always()
        run: |
          ARTICLE_DIR="output/${{ needs.initialize.outputs.article_id }}"
          
          echo "## üìù Article Generation V3 Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### üìã Input Parameters" >> $GITHUB_STEP_SUMMARY
          echo "- **Title**: ${{ inputs.article_title }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Persona**: ${{ inputs.target_persona }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Keywords**: ${{ inputs.meta_keywords }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          if [ -f "$ARTICLE_DIR/summary.md" ]; then
            echo "### üìä Generation Summary" >> $GITHUB_STEP_SUMMARY
            cat "$ARTICLE_DIR/summary.md" >> $GITHUB_STEP_SUMMARY
          fi
          
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### üì¶ Generated Files" >> $GITHUB_STEP_SUMMARY
          echo '```' >> $GITHUB_STEP_SUMMARY
          find $ARTICLE_DIR -type f -name "*.md" -o -name "*.html" -o -name "*.json" | sort >> $GITHUB_STEP_SUMMARY
          echo '```' >> $GITHUB_STEP_SUMMARY
          
          if [ -d "$ARTICLE_DIR/images" ]; then
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "### üñºÔ∏è Generated Images" >> $GITHUB_STEP_SUMMARY
            echo "- Image count: $(find $ARTICLE_DIR/images -name "*.png" -o -name "*.jpg" | wc -l)" >> $GITHUB_STEP_SUMMARY
          fi

      - name: Create organized final package
        run: |
          ARTICLE_DIR="output/${{ needs.initialize.outputs.article_id }}"
          FINAL_DIR="final_package"
          
          # ÊúÄÁµÇ„Éë„ÉÉ„Ç±„Éº„Ç∏Áî®„ÅÆ„Éá„Ç£„É¨„ÇØ„Éà„É™„Çí‰ΩúÊàê
          mkdir -p $FINAL_DIR
          
          # „Çè„Åã„Çä„ÇÑ„Åô„ÅÑ„Éï„Ç°„Ç§„É´Âêç„Åß„Ç≥„Éî„Éº
          # „É°„Ç§„É≥Ë®ò‰∫ã
          if [ -f "$ARTICLE_DIR/04_draft_article.md" ]; then
            cp "$ARTICLE_DIR/04_draft_article.md" "$FINAL_DIR/article.md"
          fi
          if [ -f "$ARTICLE_DIR/05_article.html" ]; then
            cp "$ARTICLE_DIR/05_article.html" "$FINAL_DIR/article.html"
          fi
          if [ -f "$ARTICLE_DIR/06_optimized_content.html" ]; then
            cp "$ARTICLE_DIR/06_optimized_content.html" "$FINAL_DIR/article_optimized.html"
          fi
          
          # „É™„Çµ„Éº„ÉÅÁµêÊûú
          if [ -f "$ARTICLE_DIR/phase2_research.json" ]; then
            cp "$ARTICLE_DIR/phase2_research.json" "$FINAL_DIR/research_results.json"
          fi
          
          # „Éï„Ç°„ÇØ„Éà„ÉÅ„Çß„ÉÉ„ÇØ
          if [ -f "$ARTICLE_DIR/factcheck_report.md" ]; then
            cp "$ARTICLE_DIR/factcheck_report.md" "$FINAL_DIR/factcheck_report.md"
          fi
          
          # SEO„É¨„Éù„Éº„Éà
          if [ -f "$ARTICLE_DIR/seo_optimization_report.md" ]; then
            cp "$ARTICLE_DIR/seo_optimization_report.md" "$FINAL_DIR/seo_report.md"
          fi
          
          # ÁîªÂÉè„Éï„Ç©„É´„ÉÄ
          if [ -d "$ARTICLE_DIR/images" ]; then
            cp -r "$ARTICLE_DIR/images" "$FINAL_DIR/images"
          fi
          
          # „Çµ„Éû„É™„Éº
          if [ -f "$ARTICLE_DIR/summary.md" ]; then
            cp "$ARTICLE_DIR/summary.md" "$FINAL_DIR/summary.md"
          fi
          
          # README‰ΩúÊàê
          cat > $FINAL_DIR/README.md << EOF
          # Ë®ò‰∫ãÁîüÊàêÂÆå‰∫Ü„Éë„ÉÉ„Ç±„Éº„Ç∏
          
          **Ë®ò‰∫ã„Çø„Ç§„Éà„É´**: ${{ inputs.article_title }}
          **ÁîüÊàêÊó•ÊôÇ**: $(date +%Y-%m-%d\ %H:%M:%S)
          **Ë®ò‰∫ãID**: ${{ needs.initialize.outputs.article_id }}
          
          ## üìÅ „Éï„Ç°„Ç§„É´‰∏ÄË¶ß
          
          - **article.md** - „É°„Ç§„É≥Ë®ò‰∫ãÔºàMarkdownÂΩ¢ÂºèÔºâ
          - **article.html** - „É°„Ç§„É≥Ë®ò‰∫ãÔºàHTMLÂΩ¢ÂºèÔºâ
          - **article_optimized.html** - SEOÊúÄÈÅ©ÂåñÊ∏à„ÅøË®ò‰∫ã
          - **research_results.json** - „É™„Çµ„Éº„ÉÅÁµêÊûú„Éá„Éº„Çø
          - **factcheck_report.md** - „Éï„Ç°„ÇØ„Éà„ÉÅ„Çß„ÉÉ„ÇØ„É¨„Éù„Éº„Éà
          - **seo_report.md** - SEOÊúÄÈÅ©Âåñ„É¨„Éù„Éº„Éà
          - **images/** - ÁîüÊàêÁîªÂÉèÔºà„Éí„Éº„É≠„ÉºÁîªÂÉè + „Çª„ÇØ„Ç∑„Éß„É≥ÁîªÂÉèÔºâ
          - **summary.md** - ÁîüÊàê„Çµ„Éû„É™„Éº
          
          ## üéØ „Çø„Éº„Ç≤„ÉÉ„ÉàÊÉÖÂ†±
          
          - **„Éö„É´„ÇΩ„Éä**: ${{ inputs.target_persona }}
          - **„Ç≠„Éº„ÉØ„Éº„Éâ**: ${{ inputs.meta_keywords }}
          EOF
          
          echo "üì¶ Final package created in: $FINAL_DIR"
          ls -la $FINAL_DIR/

      - name: Upload final package
        uses: actions/upload-artifact@v4
        with:
          name: FINAL_ARTICLE_PACKAGE
          path: final_package
          retention-days: 30

  # ÈÄöÁü•Ôºà„Ç™„Éó„Ç∑„Éß„É≥Ôºâ
  notify:
    needs: [initialize, finalize]
    if: always() && vars.SLACK_WEBHOOK != ''
    runs-on: ubuntu-latest
    
    steps:
      - name: Send Slack notification
        env:
          SLACK_WEBHOOK: ${{ secrets.SLACK_WEBHOOK }}
        run: |
          STATUS="${{ needs.finalize.result }}"
          COLOR="good"
          EMOJI="‚úÖ"
          
          if [ "$STATUS" != "success" ]; then
            COLOR="danger"
            EMOJI="‚ùå"
          fi
          
          curl -X POST $SLACK_WEBHOOK \
            -H 'Content-type: application/json' \
            -d '{
              "attachments": [{
                "color": "'$COLOR'",
                "title": "'$EMOJI' Article Generation V3 '$STATUS'",
                "fields": [
                  {"title": "Title", "value": "'"${{ inputs.article_title }}"'", "short": false},
                  {"title": "Persona", "value": "'"${{ inputs.target_persona }}"'", "short": false},
                  {"title": "Workflow", "value": "'"${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}"'", "short": false}
                ]
              }]
            }'